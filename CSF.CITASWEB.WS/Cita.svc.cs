using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.Text;
using CSF.CITASWEB.WS.BE;
using System.ServiceModel.Activation;
using System.ServiceModel.Web;
using System.Net;
//using CSF.CITASWEB.WS.DA;
using System.Web.Script.Serialization;
using System.Configuration;
using System.Diagnostics;
using System.Net.Http;
using Newtonsoft.Json;
using System.Net.Http.Headers;
using System.IO;
using System.Data.SqlClient;
using System.Data;
using System.Web;
using CSF.CITASWEB.WS.wsprecisa;
using System.Threading.Tasks;
using System.Security.Cryptography;
using Twilio.Jwt.AccessToken;
using System.Reflection;
using System.Threading;
using chn = System.ServiceModel.Channels;

namespace CSF.CITASWEB.WS
{
    [AspNetCompatibilityRequirements(RequirementsMode = AspNetCompatibilityRequirementsMode.Required)]
    [ServiceBehavior(AddressFilterMode = AddressFilterMode.Any)]
    public class
        Cita : ICita
    {
        Int32 _diasPagoSynap = 0;
        String _urlBaseSynap = String.Empty;
        String _urlLinkSynap = String.Empty;
        String _apiKeySynap = String.Empty;
        String _idClinica = String.Empty;


        public RespuestaSimpleBE RegistrarCita(string tipoDocumento, string numeroDocumento, string idHorarioDetalle,
                                        string fecha, string numeroTurno, string origen, string observaciones,
                                        string tipoCita, string esChequeo, string tipoCobertura = "", string horaInicio = "", string duracion = "", string codigoComponente = "",
                                        List<beRespuestaImagen> lRespuestaImagen = null, string archivoConsentimiento = "", string nombreArchivoConsentimiento = "",
                                        string idCitaOriginal = "", string origenOpcion = "")
        {
            #region Validacion de Parámetros
            if (string.IsNullOrEmpty(tipoDocumento) || string.IsNullOrEmpty(numeroDocumento) || string.IsNullOrEmpty(idHorarioDetalle)
                || string.IsNullOrEmpty(fecha) || string.IsNullOrEmpty(numeroTurno))
            {
                throw new WebFaultException(HttpStatusCode.BadRequest);
            }
            if (tipoDocumento != "1" && tipoDocumento != "2" && tipoDocumento != "3")
            {
                return new RespuestaSimpleBE()
                {
                    rpt = 101,
                    mensaje = "Sólo se soportan los valores \"1\" (DNI), \"2\" (CE) o \"3\" (PAS) en el parámetro tipoDocumento",
                    data = null
                };
            }
            if (numeroDocumento.Length > 20)
            {
                return new RespuestaSimpleBE()
                {
                    rpt = 102,
                    mensaje = "El parámetro numeroDocumento no puede tener más de 20 caracteres",
                    data = null
                };
            }
            int varIDHorarioDetalle;
            if (idHorarioDetalle.Split('|').Length != 2 ||
                !int.TryParse(idHorarioDetalle.Split('|')[0], out varIDHorarioDetalle) ||
                !int.TryParse(idHorarioDetalle.Split('|')[1], out varIDHorarioDetalle))
            {
                return new RespuestaSimpleBE()
                {
                    rpt = 103,
                    mensaje = "El parámetro idHorarioDetalle debe ser numérico",
                    data = null
                };
            }
            DateTime varFecha;
            if (!DateTime.TryParse(fecha, out varFecha))
            {
                return new RespuestaSimpleBE()
                {
                    rpt = 104,
                    mensaje = "El parámetro fecha no tiene el formato correcto",
                    data = null
                };
            }
            int varNumeroTurno;
            if (!int.TryParse(numeroTurno, out varNumeroTurno))
            {
                return new RespuestaSimpleBE()
                {
                    rpt = 105,
                    mensaje = "El parámetro numeroTurno debe ser numérico",
                    data = null
                };
            }

            //if (((int)varFecha.DayOfWeek).ToString() != (idHorarioDetalle.Split('|')[1] == "7" ? "0" : idHorarioDetalle.Split('|')[1]))
            //{

            //    return new RespuestaSimpleBE()
            //    {
            //        rpt = 106,
            //        mensaje = "La fecha indicada no corresponde al día del horario",
            //        data = null
            //    };
            //}
            if (string.IsNullOrEmpty(origen))
                origen = "App";
            //if (origen.ToLower() != "app" && origen.ToLower() != "web" && origen.ToLower() != "intranet" && origen.ToLower() != "whatsapp"
            //     && origen.ToLower() != "chqmed")
            //{
            //    return new RespuestaSimpleBE()
            //    {
            //        rpt = 107,
            //        mensaje = "Sólo se soportan los valores \"App\", \"Web\", \"Whatsapp\", \"ChqMed\" e \"Intranet\" en el parámetro origen",
            //        data = null
            //    };
            //}
            //beOrigenResponse obeOrigen = fnValidarOrigen(origen);
            //if (!obeOrigen.IndValido)
            //{
            //    return new RespuestaSimpleBE()
            //    {
            //        rpt = 107,
            //        mensaje = obeOrigen.Mensaje,
            //        data = null
            //    };
            //}

            if (string.IsNullOrEmpty(observaciones))
                observaciones = "";

            if (string.IsNullOrEmpty(tipoCita))
                tipoCita = "1";

            int varTipoCita;
            if (!int.TryParse(tipoCita, out varTipoCita))
            {
                return new RespuestaSimpleBE()
                {
                    rpt = 108,
                    mensaje = "El parámetro TipoCita debe ser numérico",
                    data = null
                };
            }

            if (string.IsNullOrEmpty(esChequeo))
                esChequeo = "false";
            bool varEsChequeo;
            if (!bool.TryParse(esChequeo, out varEsChequeo))
            {
                return new RespuestaSimpleBE()
                {
                    rpt = 109,
                    mensaje = "El parámetro esChequeo debe ser True o False",
                    data = null
                };
            }

            if (string.IsNullOrEmpty(tipoCobertura))
            {
                tipoCobertura = "0";
            }

            int varTipoCobertura;
            if (!int.TryParse(tipoCobertura, out varTipoCobertura))
            {
                return new RespuestaSimpleBE()
                {
                    rpt = 108,
                    mensaje = "El parámetro TipoCobertura debe ser numérico",
                    data = null
                };
            }
            #endregion
            RespuestaSimpleBE varRespuesta = new RespuestaSimpleBE();
            try
            {
                var oRequest = new
                {
                    tipoDocumento = tipoDocumento,
                    numeroDocumento = numeroDocumento,
                    idHorarioDetalle = idHorarioDetalle,
                    fecha = fecha,
                    numeroTurno = numeroTurno,
                    origen = origen,
                    observaciones = observaciones,
                    tipoCita = tipoCita,
                    esChequeo = esChequeo,
                    tipoCobertura = tipoCobertura,
                    horaInicio = horaInicio,
                    duracion = duracion,
                    codigoComponente = codigoComponente,
                    lRespuestaImagen = lRespuestaImagen,
                    archivoConsentimiento = archivoConsentimiento,
                    nombreArchivoConsentimiento = nombreArchivoConsentimiento,
                    idCitaOriginal = idCitaOriginal,
                    origenOpcion = origenOpcion
                };
                string strRequest = new JavaScriptSerializer().Serialize(oRequest);
                string response = ClasesGenericas.PostAsyncIntranet("Cita.svc/RegistrarCita/", strRequest, ClasesGenericas.GetHeader(WebOperationContext.Current.IncomingRequest.Headers, "token"));
                RespuestaBE<RegistrarCitaBE> varRespuesta2 = new JavaScriptSerializer().Deserialize<RespuestaBE<RegistrarCitaBE>>(response);

                if (varRespuesta2 == null)
                {
                    return new RespuestaSimpleBE()
                    {
                        rpt = -1,
                        mensaje = "No se logró procesar la solicitud",
                        data = null
                    };
                }

                if (varRespuesta2.rpt == 0)
                {
                    string idCita = varRespuesta2.data.idCita;
                    string correoPaciente = varRespuesta2.mensaje;
                    bool statusEnvioEmail = false;
                    if (varRespuesta2.data.enviarCorreo)
                    {
                        statusEnvioEmail = enviarCorreoCitaPresencial(idCita, origen);
                    }

                    return new RespuestaSimpleBE()
                    {
                        rpt = 0,
                        mensaje = statusEnvioEmail ? correoPaciente : "",
                        data = idCita
                    };
                }
                else
                {
                    return new RespuestaSimpleBE()
                    {
                        rpt = varRespuesta2.rpt,
                        mensaje = varRespuesta2.mensaje,
                        data = null
                    };
                }
            }
            catch (Exception ex)
            {
                //return new ErrorDA().RegistrarError(ex, "WS", "Cita.svc");
                return ClasesGenericas.RegistrarErrorIntranet(ex, "WS", "Cita.svc");
            }
        }
        public RespuestaBE<RegistrarCitaBE> RegistrarCitaApp(string tipoDocumento, string numeroDocumento, string idHorarioDetalle,
                                        string fecha, string numeroTurno, string origen, string observaciones,
                                        string tipoCita, string esChequeo, string idCitaOriginal)
        {
            #region Validacion de Parámetros
            if (string.IsNullOrEmpty(tipoDocumento) || string.IsNullOrEmpty(numeroDocumento) || string.IsNullOrEmpty(idHorarioDetalle)
                || string.IsNullOrEmpty(fecha) || string.IsNullOrEmpty(numeroTurno))
            {
                throw new WebFaultException(HttpStatusCode.BadRequest);
            }
            if (tipoDocumento != "1" && tipoDocumento != "2" && tipoDocumento != "3")
            {
                return new RespuestaBE<RegistrarCitaBE>()
                {
                    rpt = 101,
                    mensaje = "Sólo se soportan los valores \"1\" (DNI), \"2\" (CE) o \"3\" (PAS) en el parámetro tipoDocumento",
                    data = null
                };
            }
            if (numeroDocumento.Length > 20)
            {
                return new RespuestaBE<RegistrarCitaBE>()
                {
                    rpt = 102,
                    mensaje = "El parámetro numeroDocumento no puede tener más de 20 caracteres",
                    data = null
                };
            }
            int varIDHorarioDetalle;
            if (idHorarioDetalle.Split('|').Length != 2 ||
                !int.TryParse(idHorarioDetalle.Split('|')[0], out varIDHorarioDetalle) ||
                !int.TryParse(idHorarioDetalle.Split('|')[1], out varIDHorarioDetalle))
            {
                return new RespuestaBE<RegistrarCitaBE>()
                {
                    rpt = 103,
                    mensaje = "El parámetro idHorarioDetalle debe ser numérico",
                    data = null
                };
            }
            DateTime varFecha;
            if (!DateTime.TryParse(fecha, out varFecha))
            {
                return new RespuestaBE<RegistrarCitaBE>()
                {
                    rpt = 104,
                    mensaje = "El parámetro fecha no tiene el formato correcto",
                    data = null
                };
            }
            int varNumeroTurno;
            if (!int.TryParse(numeroTurno, out varNumeroTurno))
            {
                return new RespuestaBE<RegistrarCitaBE>()
                {
                    rpt = 105,
                    mensaje = "El parámetro numeroTurno debe ser numérico",
                    data = null
                };
            }

            if (((int)varFecha.DayOfWeek).ToString() != (idHorarioDetalle.Split('|')[1] == "7" ? "0" : idHorarioDetalle.Split('|')[1]))
            {
                return new RespuestaBE<RegistrarCitaBE>()
                {
                    rpt = 106,
                    mensaje = "La fecha indicada no corresponde al día del horario",
                    data = null
                };
            }
            if (string.IsNullOrEmpty(origen))
            {
                origen = "App";
            }
            //if (origen.ToLower() != "app" && origen.ToLower() != "web" && origen.ToLower() != "intranet")
            //{
            //    return new RespuestaBE<RegistrarCitaBE>()
            //    {
            //        rpt = 107,
            //        mensaje = "Sólo se soportan los valores \"App\", \"Web\" e \"Intranet\" en el parámetro origen",
            //        data = null
            //    };
            //}
            //beOrigenResponse obeOrigen = fnValidarOrigen(origen);
            //if (!obeOrigen.IndValido)
            //{
            //    return new RespuestaBE<RegistrarCitaBE>()
            //    {
            //        rpt = 107,
            //        mensaje = obeOrigen.Mensaje,
            //        data = null
            //    };
            //}

            if (string.IsNullOrEmpty(observaciones))
                observaciones = "";

            if (string.IsNullOrEmpty(tipoCita))
                tipoCita = "1";

            int varTipoCita;
            if (!int.TryParse(tipoCita, out varTipoCita))
            {
                return new RespuestaBE<RegistrarCitaBE>()
                {
                    rpt = 108,
                    mensaje = "El parámetro TipoCita debe ser numérico",
                    data = null
                };
            }

            if (string.IsNullOrEmpty(esChequeo))
                esChequeo = "false";
            bool varEsChequeo;
            if (!bool.TryParse(esChequeo, out varEsChequeo))
            {
                return new RespuestaBE<RegistrarCitaBE>()
                {
                    rpt = 109,
                    mensaje = "El parámetro esChequeo debe ser True o False",
                    data = null
                };
            }
            #endregion
            RespuestaBE<RegistrarCitaBE> varRespuesta = new RespuestaBE<RegistrarCitaBE>();
            try
            {
                var oRequest = new
                {
                    tipoDocumento = tipoDocumento,
                    numeroDocumento = numeroDocumento,
                    idHorarioDetalle = idHorarioDetalle,
                    fecha = fecha,
                    numeroTurno = numeroTurno,
                    origen = origen,
                    observaciones = observaciones,
                    tipoCita = tipoCita,
                    esChequeo = esChequeo,
                    idCitaOriginal = idCitaOriginal
                };
                string strRequest = new JavaScriptSerializer().Serialize(oRequest);
                string response = ClasesGenericas.PostAsyncIntranet("Cita.svc/RegistrarCitaApp/", strRequest, ClasesGenericas.GetHeader(WebOperationContext.Current.IncomingRequest.Headers, "token"));
                varRespuesta = new JavaScriptSerializer().Deserialize<RespuestaBE<RegistrarCitaBE>>(response);
                
                if (varRespuesta == null)
                {
                    return new RespuestaBE<RegistrarCitaBE>()
                    {
                        rpt = -1,
                        mensaje = "No se logró procesar la solicitud",
                        data = null
                    };
                }

                if (varRespuesta.rpt == 0)
                {
                    string idCita = varRespuesta.data.idCita;
                    string correoPaciente = varRespuesta.mensaje;
                    bool statusEnvioEmail = false;
                    if (varRespuesta.data.enviarCorreo)
                    {
                        statusEnvioEmail = enviarCorreoCitaPresencial(idCita, origen);
                    }
                    varRespuesta.mensaje = statusEnvioEmail ? correoPaciente : "";
                }
            }
            catch (Exception ex)
            {
                //return new ErrorDA().RegistrarError<RegistrarCitaBE>(ex, "WS", "Cita.svc");
                return ClasesGenericas.RegistrarErrorIntranet<RegistrarCitaBE>(ex, "WS", "Cita.svc");
            }
            return varRespuesta;
        }

        public RespuestaSimpleBE RegistrarCitaAdicional(string tipoDocumento, string numeroDocumento, string idHorarioDetalle,
                                        string fecha, string horaInicio, string origen, string observaciones, string esChequeo,
                                        string idCitaOriginal, string origenOpcion)
        {
            #region Validacion de Parámetros
            if (string.IsNullOrEmpty(tipoDocumento) || string.IsNullOrEmpty(numeroDocumento) || string.IsNullOrEmpty(idHorarioDetalle)
                || string.IsNullOrEmpty(fecha) || string.IsNullOrEmpty(horaInicio))
            {
                throw new WebFaultException(HttpStatusCode.BadRequest);
            }
            if (tipoDocumento != "1" && tipoDocumento != "2" && tipoDocumento != "3")
            {
                return new RespuestaSimpleBE()
                {
                    rpt = 101,
                    mensaje = "Sólo se soportan los valores \"1\" (DNI), \"2\" (CE) o \"3\" (PAS) en el parámetro tipoDocumento",
                    data = null
                };
            }
            if (numeroDocumento.Length > 20)
            {
                return new RespuestaSimpleBE()
                {
                    rpt = 102,
                    mensaje = "El parámetro numeroDocumento no puede tener más de 20 caracteres",
                    data = null
                };
            }
            int varIDHorarioDetalle;
            if (idHorarioDetalle.Split('|').Length != 2 ||
                !int.TryParse(idHorarioDetalle.Split('|')[0], out varIDHorarioDetalle) ||
                !int.TryParse(idHorarioDetalle.Split('|')[1], out varIDHorarioDetalle))
            {
                return new RespuestaSimpleBE()
                {
                    rpt = 103,
                    mensaje = "El parámetro idHorarioDetalle debe ser numérico",
                    data = null
                };
            }
            //DateTime varFecha;
            //if (!DateTime.TryParse(fecha, out varFecha))
            //{
            //    return new RespuestaSimpleBE()
            //    {
            //        rpt = 104,
            //        mensaje = "El parámetro fecha no tiene el formato correcto",
            //        data = null
            //    };
            //}
            TimeSpan varHoraInicio;
            if (!TimeSpan.TryParse(horaInicio, out varHoraInicio))
            {
                return new RespuestaSimpleBE()
                {
                    rpt = 105,
                    mensaje = "El parámetro horaInicio debe ser de tipo hora (hh:mm)",
                    data = null
                };
            }

            //if (((int)varFecha.DayOfWeek).ToString() != (idHorarioDetalle.Split('|')[1] == "7" ? "0" : idHorarioDetalle.Split('|')[1]))
            //{
            //    return new RespuestaSimpleBE()
            //    {
            //        rpt = 106,
            //        mensaje = "La fecha indicada no corresponde al día del horario",
            //        data = null
            //    };
            //}
            if (string.IsNullOrEmpty(origen))
                origen = "App";
            //if (origen.ToLower() != "app" && origen.ToLower() != "web" && origen.ToLower() != "intranet")
            //{
            //    return new RespuestaSimpleBE()
            //    {
            //        rpt = 107,
            //        mensaje = "Sólo se soportan los valores \"App\", \"Web\" e \"Intranet\" en el parámetro origen",
            //        data = null
            //    };
            //}
            //beOrigenResponse obeOrigen = fnValidarOrigen(origen);
            //if (!obeOrigen.IndValido)
            //{
            //    return new RespuestaSimpleBE()
            //    {
            //        rpt = 107,
            //        mensaje = obeOrigen.Mensaje,
            //        data = null
            //    };
            //}

            if (string.IsNullOrEmpty(observaciones))
                observaciones = "";


            if (string.IsNullOrEmpty(esChequeo))
                esChequeo = "false";
            bool varEsChequeo;
            if (!bool.TryParse(esChequeo, out varEsChequeo))
            {
                return new RespuestaSimpleBE()
                {
                    rpt = 108,
                    mensaje = "El parámetro esChequeo debe ser True o False",
                    data = null
                };
            }
            #endregion
            RespuestaSimpleBE varRespuesta = new RespuestaSimpleBE();
            try
            {
                var oRequest = new
                {
                    tipoDocumento = tipoDocumento,
                    numeroDocumento = numeroDocumento,
                    idHorarioDetalle = idHorarioDetalle,
                    fecha = fecha,
                    horaInicio = horaInicio,
                    origen = origen,
                    observaciones = observaciones,
                    esChequeo = esChequeo,
                    idCitaOriginal = idCitaOriginal,
                    origenOpcion = origenOpcion
                };
                string strRequest = new JavaScriptSerializer().Serialize(oRequest);
                string response = ClasesGenericas.PostAsyncIntranet("Cita.svc/RegistrarCitaAdicional/", strRequest, ClasesGenericas.GetHeader(WebOperationContext.Current.IncomingRequest.Headers, "token"));
                varRespuesta = new JavaScriptSerializer().Deserialize<RespuestaSimpleBE>(response);

                if (varRespuesta == null)
                {
                    return new RespuestaSimpleBE()
                    {
                        rpt = -1,
                        mensaje = "No se logró procesar la solicitud",
                        data = null
                    };
                }

                bool statusEnvioEmail = false;
                if (varRespuesta.rpt == 0)
                {
                    string idCita = varRespuesta.data;
                    string correoPaciente = varRespuesta.mensaje;
                    statusEnvioEmail = enviarCorreoCitaPresencial(idCita, origen);
                    varRespuesta.mensaje = statusEnvioEmail ? correoPaciente : "";
                }
                return new RespuestaSimpleBE()
                {
                    rpt = 0,
                    mensaje = statusEnvioEmail ? varRespuesta.mensaje : "",
                    data = varRespuesta.data
                };
            }
            catch (Exception ex)
            {
                //return new ErrorDA().RegistrarError(ex, "WS", "Cita.svc");
                return ClasesGenericas.RegistrarErrorIntranet(ex, "WS", "Cita.svc");
            }
            //return varRespuesta;
        }
        
        public RespuestaBE<CitasListadoBE> ListarCitas(string tipoDocumento, string numeroDocumento, string año,
            string origen = "", string fechaCita = "", string indicadorHistoricas = "1", string indicadorPendientes = "1", bool soloTitular = false)
        {
            #region Validacion de Parámetros
            //if (string.IsNullOrEmpty(tipoDocumento) || string.IsNullOrEmpty(numeroDocumento) || string.IsNullOrEmpty(año))
            //if (string.IsNullOrEmpty(año))
            //{
            //    throw new WebFaultException(HttpStatusCode.BadRequest);
            //}
            //if (tipoDocumento != "1" && tipoDocumento != "2" && tipoDocumento != "3")
            //{
            //    return new RespuestaBE<CitasListadoBE>()
            //    {
            //        rpt = 101,
            //        mensaje = "Sólo se soportan los valores \"1\" (DNI), \"2\" (CE) o \"3\" (PAS) en el parámetro tipoDocumento",
            //        data = null
            //    };
            //}
            //if (numeroDocumento.Length > 20)
            //{
            //    return new RespuestaBE<CitasListadoBE>()
            //    {
            //        rpt = 102,
            //        mensaje = "El parámetro numeroDocumento no puede tener más de 20 caracteres",
            //        data = null
            //    };
            //}
            int varAño;
            if (!int.TryParse(año, out varAño) || año.Length != 4)
            {
                return new RespuestaBE<CitasListadoBE>()
                {
                    rpt = 103,
                    mensaje = "El parámetro año debe ser numérico de 4 dígitos",
                    data = null
                };
            }

            if (String.IsNullOrEmpty(fechaCita))
            {
                fechaCita = "";
            }
            if (String.IsNullOrEmpty(origen))
            {
                origen = "";
            }
            int _indicadorHistoricas = 1;
            if (String.IsNullOrEmpty(indicadorHistoricas))
            {
                _indicadorHistoricas = 1;

            }
            else
            {
                if (indicadorHistoricas.Equals("1"))
                {
                    _indicadorHistoricas = 1;
                }
                else if (indicadorHistoricas.Equals("0"))
                {
                    _indicadorHistoricas = 0;
                }
                else
                {
                    return new RespuestaBE<CitasListadoBE>()
                    {
                        rpt = 103,
                        mensaje = "El parámetro indicadorHistoricas solo acepta los valores 0 y 1",
                        data = null
                    };
                }

            }
            int _indicadorPendientes = 1;
            if (String.IsNullOrEmpty(indicadorPendientes))
            {
                _indicadorPendientes = 1;

            }
            else
            {

                if (indicadorPendientes.Equals("1"))
                {
                    _indicadorPendientes = 1;
                }
                else if (indicadorPendientes.Equals("0"))
                {
                    _indicadorPendientes = 0;
                }
                else
                {
                    return new RespuestaBE<CitasListadoBE>()
                    {
                        rpt = 103,
                        mensaje = "El parámetro indicadorHistoricas solo acepta los valores 0 y 1",
                        data = null
                    };
                }

            }
            #endregion
            RespuestaBE<CitasListadoBE> varRespuesta = new RespuestaBE<CitasListadoBE>();
            try
            {
                var oRequest = new
                {
                    tipoDocumento = tipoDocumento,
                    numeroDocumento = numeroDocumento,
                    año = año,
                    origen = origen,
                    fechaCita = fechaCita,
                    indicadorHistoricas = indicadorHistoricas,
                    indicadorPendientes = indicadorPendientes,
                    soloTitular = soloTitular
                };
                string strRequest = new JavaScriptSerializer().Serialize(oRequest);
                string response = ClasesGenericas.PostAsyncIntranet("Cita.svc/ListarCitas/", strRequest, ClasesGenericas.GetHeader(WebOperationContext.Current.IncomingRequest.Headers, "token"));
                varRespuesta = new JavaScriptSerializer().Deserialize<RespuestaBE<CitasListadoBE>>(response);
                if (varRespuesta == null)
                {
                    return new RespuestaBE<CitasListadoBE>()
                    {
                        rpt = -1,
                        mensaje = "No se logró procesar la solicitud",
                        data = null
                    };
                }
            }
            catch (Exception ex)
            {
                //return new ErrorDA().RegistrarError<CitasListadoBE>(ex, "WS", "Cita.svc");
                return ClasesGenericas.RegistrarErrorIntranet<CitasListadoBE>(ex, "WS", "Cita.svc");
            }
            return varRespuesta;
        }

        public RespuestaSimpleBE ReprogramarCita(string tipoDocumento, string numeroDocumento, string idCita,
                                        string idHorarioDetalle, string fecha, string numeroTurno, string origen,
                                        string observaciones, string tipoCita, string esChequeo, string tipoCobertura = "",
                                        string origenOpcion = "")
        {
            #region Validacion de Parámetros
            if (string.IsNullOrEmpty(tipoDocumento) || string.IsNullOrEmpty(numeroDocumento) || string.IsNullOrEmpty(idCita) ||
                string.IsNullOrEmpty(idHorarioDetalle) || string.IsNullOrEmpty(fecha) || string.IsNullOrEmpty(numeroTurno))
            {
                throw new WebFaultException(HttpStatusCode.BadRequest);
            }
            if (tipoDocumento != "1" && tipoDocumento != "2" && tipoDocumento != "3")
            {
                return new RespuestaSimpleBE()
                {
                    rpt = 101,
                    mensaje = "Sólo se soportan los valores \"1\" (DNI), \"2\" (CE) o \"3\" (PAS) en el parámetro tipoDocumento",
                    data = null
                };
            }
            if (numeroDocumento.Length > 20)
            {
                return new RespuestaSimpleBE()
                {
                    rpt = 102,
                    mensaje = "El parámetro numeroDocumento no puede tener más de 20 caracteres",
                    data = null
                };
            }
            int varIDCita;
            if (!int.TryParse(idCita, out varIDCita))
            {
                return new RespuestaSimpleBE()
                {
                    rpt = 103,
                    mensaje = "El parámetro idCita debe ser numérico",
                    data = null
                };
            }
            int varIDHorarioDetalle;
            if (idHorarioDetalle.Split('|').Length != 2 ||
                !int.TryParse(idHorarioDetalle.Split('|')[0], out varIDHorarioDetalle) ||
                !int.TryParse(idHorarioDetalle.Split('|')[1], out varIDHorarioDetalle))
            {
                return new RespuestaSimpleBE()
                {
                    rpt = 104,
                    mensaje = "El parámetro idHorarioDetalle debe ser numérico",
                    data = null
                };
            }
            //DateTime varFecha;
            //if (!DateTime.TryParse(fecha, out varFecha))
            //{
            //    return new RespuestaSimpleBE()
            //    {
            //        rpt = 105,
            //        mensaje = "El parámetro fecha no tiene el formato correcto",
            //        data = null
            //    };
            //}
            int varNumeroTurno;
            if (!int.TryParse(numeroTurno, out varNumeroTurno))
            {
                return new RespuestaSimpleBE()
                {
                    rpt = 106,
                    mensaje = "El parámetro numeroTurno debe ser numérico",
                    data = null
                };
            }

            if (string.IsNullOrEmpty(origen))
                origen = "App";
            //if (origen.ToLower() != "app" && origen.ToLower() != "web" && origen.ToLower() != "intranet")
            //{
            //    return new RespuestaSimpleBE()
            //    {
            //        rpt = 107,
            //        mensaje = "Sólo se soportan los valores \"App\", \"Web\" e \"Intranet\" en el parámetro origen",
            //        data = null
            //    };
            //}
            //beOrigenResponse obeOrigen = fnValidarOrigen(origen);
            //if (!obeOrigen.IndValido)
            //{
            //    return new RespuestaSimpleBE()
            //    {
            //        rpt = 107,
            //        mensaje = obeOrigen.Mensaje,
            //        data = null
            //    };
            //}

            if (string.IsNullOrEmpty(observaciones))
                observaciones = "";

            if (string.IsNullOrEmpty(tipoCita))
                tipoCita = "1";

            int varTipoCita;
            if (!int.TryParse(tipoCita, out varTipoCita))
            {
                return new RespuestaSimpleBE()
                {
                    rpt = 108,
                    mensaje = "El parámetro TipoCita debe ser numérico",
                    data = null
                };
            }

            if (string.IsNullOrEmpty(esChequeo))
                esChequeo = "false";
            bool varEsChequeo;
            if (!bool.TryParse(esChequeo, out varEsChequeo))
            {
                return new RespuestaSimpleBE()
                {
                    rpt = 109,
                    mensaje = "El parámetro esChequeo debe ser True o False",
                    data = null
                };
            }

            if (string.IsNullOrEmpty(tipoCobertura))
            {
                tipoCobertura = "0";
            }

            int varTipoCobertura;
            if (!int.TryParse(tipoCobertura, out varTipoCobertura))
            {
                return new RespuestaSimpleBE()
                {
                    rpt = 108,
                    mensaje = "El parámetro TipoCobertura debe ser numérico",
                    data = null
                };
            }
            #endregion
            RespuestaSimpleBE varRespuesta = new RespuestaSimpleBE();
            try
            {
                var oRequest = new
                {
                    tipoDocumento = tipoDocumento,
                    numeroDocumento = numeroDocumento,
                    idCita = idCita,
                    idHorarioDetalle = idHorarioDetalle,
                    fecha = fecha,
                    numeroTurno = numeroTurno,
                    origen = origen,
                    observaciones = observaciones,
                    tipoCita = tipoCita,
                    esChequeo = esChequeo,
                    tipoCobertura = tipoCobertura,
                    origenOpcion = origenOpcion
                };
                string strRequest = new JavaScriptSerializer().Serialize(oRequest);
                string response = ClasesGenericas.PostAsyncIntranet("Cita.svc/ReprogramarCita/", strRequest, ClasesGenericas.GetHeader(WebOperationContext.Current.IncomingRequest.Headers, "token"));
                RespuestaBE<ReprogramarCitaBE> varRespuesta2 = new JavaScriptSerializer().Deserialize<RespuestaBE<ReprogramarCitaBE>>(response);

                if (varRespuesta2 == null)
                {
                    return new RespuestaSimpleBE()
                    {
                        rpt = -1,
                        mensaje = "No se logró procesar la solicitud",
                        data = null
                    };
                }

                if (varRespuesta2.rpt == 0)
                {
                    string idCitaRpt = varRespuesta2.data.idCita;
                    varRespuesta.data = idCitaRpt;
                    varRespuesta.mensaje = varRespuesta2.mensaje;
                    bool statusEnvioEmail = false;
                    if (varRespuesta2.data.enviarCorreo)
                    {
                        statusEnvioEmail = enviarCorreoCitaPresencial(idCitaRpt, origen);
                    }
                    varRespuesta.mensaje = statusEnvioEmail ? varRespuesta.mensaje : "";
                    if (varRespuesta2.data.procesarPago)
                    {
                        bool pagoRoyal = RegistroPagoRoyal(idCitaRpt, varRespuesta2.data.tarjeta, varRespuesta2.data.tipoTarjeta, 1);
                    }
                }
                else
                {
                    varRespuesta.data = null;
                    varRespuesta.mensaje = varRespuesta2.mensaje;
                    varRespuesta.rpt = varRespuesta2.rpt;
                }
            }
            catch (Exception ex)
            {
                //return new ErrorDA().RegistrarError(ex, "WS", "Cita.svc");
                return ClasesGenericas.RegistrarErrorIntranet(ex, "WS", "Cita.svc");
            }
            return varRespuesta;
        }
        public RespuestaBE<RegistrarCitaBE> ReprogramarCitaApp(string tipoDocumento, string numeroDocumento, string idCita,
                                        string idHorarioDetalle, string fecha, string numeroTurno, string origen,
                                        string observaciones, string tipoCita, string esChequeo)
        {
            Debug.WriteLine("Reprog App");
            #region Validacion de Parámetros
            if (string.IsNullOrEmpty(tipoDocumento) || string.IsNullOrEmpty(numeroDocumento) || string.IsNullOrEmpty(idCita) ||
                string.IsNullOrEmpty(idHorarioDetalle) || string.IsNullOrEmpty(fecha) || string.IsNullOrEmpty(numeroTurno))
            {
                throw new WebFaultException(HttpStatusCode.BadRequest);
            }
            if (tipoDocumento != "1" && tipoDocumento != "2" && tipoDocumento != "3")
            {
                return new RespuestaBE<RegistrarCitaBE>()
                {
                    rpt = 101,
                    mensaje = "Sólo se soportan los valores \"1\" (DNI), \"2\" (CE) o \"3\" (PAS) en el parámetro tipoDocumento",
                    data = null
                };
            }
            if (numeroDocumento.Length > 20)
            {
                return new RespuestaBE<RegistrarCitaBE>()
                {
                    rpt = 102,
                    mensaje = "El parámetro numeroDocumento no puede tener más de 20 caracteres",
                    data = null
                };
            }
            int varIDCita;
            if (!int.TryParse(idCita, out varIDCita))
            {
                return new RespuestaBE<RegistrarCitaBE>()
                {
                    rpt = 103,
                    mensaje = "El parámetro idCita debe ser numérico",
                    data = null
                };
            }
            int varIDHorarioDetalle;
            if (idHorarioDetalle.Split('|').Length != 2 ||
                !int.TryParse(idHorarioDetalle.Split('|')[0], out varIDHorarioDetalle) ||
                !int.TryParse(idHorarioDetalle.Split('|')[1], out varIDHorarioDetalle))
            {
                return new RespuestaBE<RegistrarCitaBE>()
                {
                    rpt = 104,
                    mensaje = "El parámetro idHorarioDetalle debe ser numérico",
                    data = null
                };
            }
            DateTime varFecha;
            if (!DateTime.TryParse(fecha, out varFecha))
            {
                return new RespuestaBE<RegistrarCitaBE>()
                {
                    rpt = 105,
                    mensaje = "El parámetro fecha no tiene el formato correcto",
                    data = null
                };
            }
            int varNumeroTurno;
            if (!int.TryParse(numeroTurno, out varNumeroTurno))
            {
                return new RespuestaBE<RegistrarCitaBE>()
                {
                    rpt = 106,
                    mensaje = "El parámetro numeroTurno debe ser numérico",
                    data = null
                };
            }

            if (string.IsNullOrEmpty(origen)) origen = "App";
            //if (origen.ToLower() != "app" && origen.ToLower() != "web" && origen.ToLower() != "intranet")
            //{
            //    return new RespuestaBE<RegistrarCitaBE>()
            //    {
            //        rpt = 107,
            //        mensaje = "Sólo se soportan los valores \"App\", \"Web\" e \"Intranet\" en el parámetro origen",
            //        data = null
            //    };
            //}
            //beOrigenResponse obeOrigen = fnValidarOrigen(origen);
            //if (!obeOrigen.IndValido)
            //{
            //    return new RespuestaBE<RegistrarCitaBE>()
            //    {
            //        rpt = 107,
            //        mensaje = obeOrigen.Mensaje,
            //        data = null
            //    };
            //}

            if (string.IsNullOrEmpty(observaciones))
                observaciones = "";

            if (string.IsNullOrEmpty(tipoCita))
                tipoCita = "1";

            int varTipoCita;
            if (!int.TryParse(tipoCita, out varTipoCita))
            {
                return new RespuestaBE<RegistrarCitaBE>()
                {
                    rpt = 108,
                    mensaje = "El parámetro TipoCita debe ser numérico",
                    data = null
                };
            }

            if (string.IsNullOrEmpty(esChequeo))
                esChequeo = "false";
            bool varEsChequeo;
            if (!bool.TryParse(esChequeo, out varEsChequeo))
            {
                return new RespuestaBE<RegistrarCitaBE>()
                {
                    rpt = 109,
                    mensaje = "El parámetro esChequeo debe ser True o False",
                    data = null
                };
            }
            #endregion
            RespuestaBE<RegistrarCitaBE> varRespuesta = new RespuestaBE<RegistrarCitaBE>();
            try
            {
                var oRequest = new
                {
                    tipoDocumento = tipoDocumento,
                    numeroDocumento = numeroDocumento,
                    idCita = idCita,
                    idHorarioDetalle = idHorarioDetalle,
                    fecha = fecha,
                    numeroTurno = numeroTurno,
                    origen = origen,
                    observaciones = observaciones,
                    tipoCita = tipoCita,
                    esChequeo = esChequeo
                };
                string strRequest = new JavaScriptSerializer().Serialize(oRequest);
                string response = ClasesGenericas.PostAsyncIntranet("Cita.svc/ReprogramarCitaApp/", strRequest, ClasesGenericas.GetHeader(WebOperationContext.Current.IncomingRequest.Headers, "token"));
                RespuestaBE<RegistrarCitaBE> varRespuesta2 = new JavaScriptSerializer().Deserialize<RespuestaBE<RegistrarCitaBE>>(response);

                if (varRespuesta2 == null)
                {
                    return new RespuestaBE<RegistrarCitaBE>()
                    {
                        rpt = -1,
                        mensaje = "No se logró procesar la solicitud",
                        data = null
                    };
                }

                if (varRespuesta2.rpt == 0)
                {
                    varRespuesta.data = varRespuesta2.data;
                    varRespuesta.mensaje = varRespuesta2.mensaje;
                    bool statusEnvioEmail = false;
                    if (varRespuesta.data.enviarCorreo)
                    {
                        statusEnvioEmail = enviarCorreoCitaPresencial(varRespuesta.data.idCita, origen);
                    }
                    varRespuesta.mensaje = statusEnvioEmail ? varRespuesta.mensaje : "";
                    if (varRespuesta2.data.procesarPago)
                    {
                        bool pagoRoyal = RegistroPagoRoyal(varRespuesta.data.idCita, varRespuesta.data.tarjeta, varRespuesta.data.tipoTarjeta, 1);
                    }
                }
                else
                {
                    varRespuesta.data = varRespuesta2.data;
                    varRespuesta.mensaje = varRespuesta2.mensaje;
                    varRespuesta.rpt = varRespuesta2.rpt;
                }
            }
            catch (Exception ex)
            {
                //return new ErrorDA().RegistrarError<RegistrarCitaBE>(ex, "WS", "Cita.svc");
                return ClasesGenericas.RegistrarErrorIntranet<RegistrarCitaBE>(ex, "WS", "Cita.svc");
            }
            return varRespuesta;
        }

        public RespuestaSimpleBE AnularCita(string tipoDocumento, string numeroDocumento, string idCita, string origen, bool indReprogramacion)
        {
            #region Validacion de Parámetros
            //if (string.IsNullOrEmpty(tipoDocumento) || string.IsNullOrEmpty(numeroDocumento) || string.IsNullOrEmpty(idCita))
            if (string.IsNullOrEmpty(idCita))
            {
                throw new WebFaultException(HttpStatusCode.BadRequest);
            }
            //if (tipoDocumento != "1" && tipoDocumento != "2" && tipoDocumento != "3")
            //{
            //    return new RespuestaSimpleBE()
            //    {
            //        rpt = 101,
            //        mensaje = "Sólo se soportan los valores \"1\" (DNI), \"2\" (CE) o \"3\" (PAS) en el parámetro tipoDocumento",
            //        data = null
            //    };
            //}
            //if (numeroDocumento.Length > 20)
            //{
            //    return new RespuestaSimpleBE()
            //    {
            //        rpt = 102,
            //        mensaje = "El parámetro numeroDocumento no puede tener más de 20 caracteres",
            //        data = null
            //    };
            //}
            int varIDCita;
            if (!int.TryParse(idCita, out varIDCita))
            {
                return new RespuestaSimpleBE()
                {
                    rpt = 103,
                    mensaje = "El parámetro idCita debe ser numérico",
                    data = null
                };
            }
            #endregion
            RespuestaSimpleBE varRespuesta = new RespuestaSimpleBE();
            try
            {
                var oRequest = new
                {
                    tipoDocumento = tipoDocumento,
                    numeroDocumento = numeroDocumento,
                    idCita = idCita,
                    origen = origen,
                    indReprogramacion = indReprogramacion
                };
                string strRequest = new JavaScriptSerializer().Serialize(oRequest);
                string response = ClasesGenericas.PostAsyncIntranet("Cita.svc/AnularCita/", strRequest, ClasesGenericas.GetHeader(WebOperationContext.Current.IncomingRequest.Headers, "token"));
                varRespuesta = new JavaScriptSerializer().Deserialize<RespuestaSimpleBE>(response);

                if (varRespuesta == null)
                {
                    return new RespuestaSimpleBE()
                    {
                        rpt = -1,
                        mensaje = "No se logró procesar la solicitud",
                        data = null
                    };
                }
            }
            catch (Exception ex)
            {
                //return new ErrorDA().RegistrarError(new Exception(ex.Message), "WS", "Cita.svc");
                return ClasesGenericas.RegistrarErrorIntranet(ex, "WS", "Cita.svc");
            }
            return varRespuesta;
        }

        public RespuestaSimpleBE AnularCitaVirtual(string tipoDocumento, string numeroDocumento, string idCitaVirtual, string origen)
        {
            #region Validacion de Parámetros
            if (string.IsNullOrEmpty(tipoDocumento) || string.IsNullOrEmpty(numeroDocumento) || string.IsNullOrEmpty(idCitaVirtual))
            {
                throw new WebFaultException(HttpStatusCode.BadRequest);
            }
            if (tipoDocumento != "1" && tipoDocumento != "2" && tipoDocumento != "3")
            {
                return new RespuestaSimpleBE()
                {
                    rpt = 101,
                    mensaje = "Sólo se soportan los valores \"1\" (DNI), \"2\" (CE) o \"3\" (PAS) en el parámetro tipoDocumento",
                    data = null
                };
            }
            if (numeroDocumento.Length > 20)
            {
                return new RespuestaSimpleBE()
                {
                    rpt = 102,
                    mensaje = "El parámetro numeroDocumento no puede tener más de 20 caracteres",
                    data = null
                };
            }
            int varIDCitaVirtual;
            if (!int.TryParse(idCitaVirtual, out varIDCitaVirtual))
            {
                return new RespuestaSimpleBE()
                {
                    rpt = 103,
                    mensaje = "El parámetro idCitaVirtual debe ser numérico",
                    data = null
                };
            }
            #endregion
            RespuestaSimpleBE varRespuesta = new RespuestaSimpleBE();
            try
            {
                var oRequest = new
                {
                    tipoDocumento = tipoDocumento,
                    numeroDocumento = numeroDocumento,
                    idCitaVirtual = idCitaVirtual,
                    origen = origen
                };
                string strRequest = new JavaScriptSerializer().Serialize(oRequest);
                string response = ClasesGenericas.PostAsyncIntranet("Cita.svc/AnularCitaVirtual/", strRequest, ClasesGenericas.GetHeader(WebOperationContext.Current.IncomingRequest.Headers, "token"));
                varRespuesta = new JavaScriptSerializer().Deserialize<RespuestaSimpleBE>(response);

                if (varRespuesta == null)
                {
                    return new RespuestaSimpleBE()
                    {
                        rpt = -1,
                        mensaje = "No se logró procesar la solicitud",
                        data = null
                    };
                }
            }
            catch (Exception ex)
            {
                //return new ErrorDA().RegistrarError(ex, "WS", "Cita.svc");
                return ClasesGenericas.RegistrarErrorIntranet(ex, "WS", "Cita.svc");
            }
            return varRespuesta;
        }

        public RespuestaBE<CitaVirtualBE> ReprogramarCitaVirtual(string tipoDocumento, string numeroDocumento, string idCitaVirtual,
                                        string idHorarioDetalle, string fecha, string numeroTurno, string preguntaPaciente1, string respuestaPaciente1,
                                        string preguntaPaciente2, string respuestaPaciente2,
                                        string tieneAlergia, string descripcionAlergia, string origen,
                                        string origenOpcion)
        {
            preguntaPaciente1 = !String.IsNullOrEmpty(preguntaPaciente1) ? preguntaPaciente1 : "";
            respuestaPaciente1 = !String.IsNullOrEmpty(respuestaPaciente1) ? respuestaPaciente1 : "";
            preguntaPaciente2 = !String.IsNullOrEmpty(preguntaPaciente2) ? preguntaPaciente2 : "";
            respuestaPaciente2 = !String.IsNullOrEmpty(respuestaPaciente2) ? respuestaPaciente2 : "";
            descripcionAlergia = !String.IsNullOrEmpty(descripcionAlergia) ? descripcionAlergia : "";

            #region Validacion de Parámetros
            if (string.IsNullOrEmpty(tipoDocumento) || string.IsNullOrEmpty(numeroDocumento) || string.IsNullOrEmpty(idCitaVirtual) ||
                string.IsNullOrEmpty(idHorarioDetalle) || string.IsNullOrEmpty(fecha) || string.IsNullOrEmpty(numeroTurno)
                )//|| string.IsNullOrEmpty(preguntaPaciente1) || string.IsNullOrEmpty(respuestaPaciente1))
            {
                throw new WebFaultException(HttpStatusCode.BadRequest);
            }
            if (tipoDocumento != "1" && tipoDocumento != "2" && tipoDocumento != "3")
            {
                return new RespuestaBE<CitaVirtualBE>()
                {
                    rpt = 101,
                    mensaje = "Sólo se soportan los valores \"1\" (DNI), \"2\" (CE) o \"3\" (PAS) en el parámetro tipoDocumento",
                    data = null
                };
            }
            if (numeroDocumento.Length > 20)
            {
                return new RespuestaBE<CitaVirtualBE>()
                {
                    rpt = 102,
                    mensaje = "El parámetro numeroDocumento no puede tener más de 20 caracteres",
                    data = null
                };
            }
            int varIDCitaVirtual;
            if (!int.TryParse(idCitaVirtual, out varIDCitaVirtual))
            {
                return new RespuestaBE<CitaVirtualBE>()
                {
                    rpt = 103,
                    mensaje = "El parámetro idCitaVirtual debe ser numérico",
                    data = null
                };
            }
            int varIDHorarioDetalle;
            if (idHorarioDetalle.Split('|').Length != 2 ||
                !int.TryParse(idHorarioDetalle.Split('|')[0], out varIDHorarioDetalle) ||
                !int.TryParse(idHorarioDetalle.Split('|')[1], out varIDHorarioDetalle))
            {
                return new RespuestaBE<CitaVirtualBE>()
                {
                    rpt = 104,
                    mensaje = "El parámetro idHorarioDetalle debe ser numérico",
                    data = null
                };
            }
            //DateTime varFecha;
            //if (!DateTime.TryParse(fecha, out varFecha))
            //{
            //    return new RespuestaBE<CitaVirtualBE>()
            //    {
            //        rpt = 105,
            //        mensaje = "El parámetro fecha no tiene el formato correcto",
            //        data = null
            //    };
            //}
            int varNumeroTurno;
            if (!int.TryParse(numeroTurno, out varNumeroTurno))
            {
                return new RespuestaBE<CitaVirtualBE>()
                {
                    rpt = 106,
                    mensaje = "El parámetro numeroTurno debe ser numérico",
                    data = null
                };
            }
            //if (((int)varFecha.DayOfWeek).ToString() != (idHorarioDetalle.Split('|')[1] == "7" ? "0" : idHorarioDetalle.Split('|')[1]))
            //{
            //    return new RespuestaBE<CitaVirtualBE>()
            //    {
            //        rpt = 107,
            //        mensaje = "La fecha indicada no corresponde al día del horario",
            //        data = null
            //    };
            //}
            if (preguntaPaciente1.Length > 500)
            {
                return new RespuestaBE<CitaVirtualBE>()
                {
                    rpt = 108,
                    mensaje = "El parámetro preguntaPaciente1 no puede tener más de 500 caracteres",
                    data = null
                };
            }
            if (respuestaPaciente1.Length > 500)
            {
                return new RespuestaBE<CitaVirtualBE>()
                {
                    rpt = 109,
                    mensaje = "El parámetro respuestaPaciente1 no puede tener más de 500 caracteres",
                    data = null
                };
            }
            if (!string.IsNullOrEmpty(preguntaPaciente2) && preguntaPaciente2.Length > 500)
            {
                return new RespuestaBE<CitaVirtualBE>()
                {
                    rpt = 110,
                    mensaje = "El parámetro preguntaPaciente2 no puede tener más de 500 caracteres",
                    data = null
                };
            }
            if (!string.IsNullOrEmpty(respuestaPaciente2) && respuestaPaciente2.Length > 500)
            {
                return new RespuestaBE<CitaVirtualBE>()
                {
                    rpt = 111,
                    mensaje = "El parámetro respuestaPaciente2 no puede tener más de 500 caracteres",
                    data = null
                };
            }


            if (string.IsNullOrEmpty(tieneAlergia))
                tieneAlergia = "false";

            bool varTieneAlergia;
            if (!bool.TryParse(tieneAlergia, out varTieneAlergia))
            {
                return new RespuestaBE<CitaVirtualBE>()
                {
                    rpt = 112,
                    mensaje = "El parámetro tieneAlergia sólo acepta true o false",
                    data = null
                };
            }
            if (!string.IsNullOrEmpty(descripcionAlergia) && descripcionAlergia.Length > 500)
            {
                return new RespuestaBE<CitaVirtualBE>()
                {
                    rpt = 113,
                    mensaje = "El parámetro descripcionAlergia no puede tener más de 500 caracteres",
                    data = null
                };
            }
            //beOrigenResponse obeOrigen = fnValidarOrigen(origen);
            //if (!obeOrigen.IndValido)
            //{
            //    return new RespuestaBE<CitaVirtualBE>()
            //    {
            //        rpt = 114,
            //        mensaje = obeOrigen.Mensaje,
            //        data = null
            //    };
            //}
            #endregion
            bool indReprogramacion = true;
            RespuestaBE<CitaVirtualBE> varRespuesta = new RespuestaBE<CitaVirtualBE>();
            try
            {
                var oRequest = new
                {
                    tipoDocumento = tipoDocumento,
                    numeroDocumento = numeroDocumento,
                    idCitaVirtual = idCitaVirtual,
                    idHorarioDetalle = idHorarioDetalle,
                    fecha = fecha,
                    numeroTurno = numeroTurno,
                    preguntaPaciente1 = preguntaPaciente1,
                    respuestaPaciente1 = respuestaPaciente1,
                    preguntaPaciente2 = preguntaPaciente2,
                    respuestaPaciente2 = respuestaPaciente2,
                    tieneAlergia = tieneAlergia,
                    descripcionAlergia = descripcionAlergia,
                    origen = origen,
                    origenOpcion = origenOpcion
                };
                string strRequest = new JavaScriptSerializer().Serialize(oRequest);
                string response = ClasesGenericas.PostAsyncIntranet("Cita.svc/ReprogramarCitaVirtual/", strRequest, ClasesGenericas.GetHeader(WebOperationContext.Current.IncomingRequest.Headers, "token"));
                RespuestaBE<CitaVirtualBE> varRespuesta2 = new JavaScriptSerializer().Deserialize<RespuestaBE<CitaVirtualBE>>(response);

                if (varRespuesta2 == null)
                {
                    return new RespuestaBE<CitaVirtualBE>()
                    {
                        rpt = -1,
                        mensaje = "No se logró procesar la solicitud",
                        data = null
                    };
                }

                if (varRespuesta2.rpt == 0)
                {
                    if (String.IsNullOrEmpty(origen)) origen = varRespuesta2.data.origen2;
                    string origenLower = origen.ToLower();
                    if (origenLower.Equals("android") || origenLower.Equals("ios")
                        || origenLower.Equals("huawei") || origenLower.Equals("portalpaciente"))
                    {
                        RespuestaBE<RegistrarCitaBE> respuestaReprogramarCitaApp = ReprogramarCitaApp(tipoDocumento, numeroDocumento, varRespuesta2.data.idCita, idHorarioDetalle,
                                                                fecha, numeroTurno, origen, "",
                                                                "1", "false");
                        if (respuestaReprogramarCitaApp == null)
                        {
                            return new RespuestaBE<CitaVirtualBE>()
                            {
                                rpt = 1,
                                mensaje = "Solicitud no procesada",
                                data = null
                            };
                        }
                        if (respuestaReprogramarCitaApp.rpt != 0)
                        {
                            return new RespuestaBE<CitaVirtualBE>()
                            {
                                rpt = respuestaReprogramarCitaApp.rpt,
                                mensaje = respuestaReprogramarCitaApp.mensaje,
                                data = null
                            };
                        }
                    }
                    else
                    {
                        RespuestaSimpleBE oCitaVirtual = ReprogramarCita(tipoDocumento, numeroDocumento, varRespuesta2.data.idCita, idHorarioDetalle,
                                                                fecha, numeroTurno, origen, "",
                                                                "1", "false", "", origenOpcion);
                        if (oCitaVirtual == null)
                        {
                            return new RespuestaBE<CitaVirtualBE>()
                            {
                                rpt = 1,
                                mensaje = "Solicitud no procesada",
                                data = null
                            };
                        }
                        if (oCitaVirtual.rpt != 0)
                        {
                            return new RespuestaBE<CitaVirtualBE>()
                            {
                                rpt = oCitaVirtual.rpt,
                                mensaje = oCitaVirtual.mensaje,
                                data = null
                            };
                        }
                    }

                    bool statusEnvioEmail = false;
                    string emailNotificacion = varRespuesta2.data.emailNotificacion;
                    if (!string.IsNullOrEmpty(emailNotificacion))
                    {
                        //statusEnvioEmail = (varParametrosCorreo["TipoPago"] == "PrePago") ? ClasesGenericas.EnviarCorreo(varParametrosCorreo["Email"], "Cita_RegistrarCitaVirtualPrePago", varParametrosCorreo, null, "SMTPVirtual") : ClasesGenericas.EnviarCorreo(varParametrosCorreo["Email"], "Cita_RegistrarCitaVirtualPostPago", varParametrosCorreo, null, "SMTPVirtual");
                        var oRequest2 = new
                        {
                            idCitaVirtual = varRespuesta2.data.idCitaVirtual
                        };
                        strRequest = new JavaScriptSerializer().Serialize(oRequest2);
                        response = ClasesGenericas.PostAsyncIntranet("Cita.svc/DatosCitaVirtual/", strRequest, ClasesGenericas.GetHeader(WebOperationContext.Current.IncomingRequest.Headers, "token"));
                        RespuestaBE<DatosCitaVirtualBE> varRespuesta3 = new JavaScriptSerializer().Deserialize<RespuestaBE<DatosCitaVirtualBE>>(response);

                        if (varRespuesta3.rpt == 0)
                        {
                            Dictionary<string, string> varParametrosCorreo = DatosCitaVirtualDct(varRespuesta3.data);
                            statusEnvioEmail = ClasesGenericas.EnviarCorreo(emailNotificacion, "Cita_RegistrarCitaVirtualPrePago", varParametrosCorreo, null, "SMTPVirtual");
                        }
                    }

                    return new RespuestaBE<CitaVirtualBE>()
                    {
                        rpt = 0,
                        mensaje = "",
                        data = new CitaVirtualBE()
                        {
                            emailNotificacion = statusEnvioEmail ? emailNotificacion : "",
                            idCitaVirtual = varRespuesta2.data.idCitaVirtual,
                            tipoPago = varRespuesta2.data.tipoPago,
                            idClinica = varRespuesta2.data.idClinica,
                            pagar = false,
                            esPrepago = varRespuesta2.data.esPrepago
                        }
                    };
                }
                else
                {
                    varRespuesta.rpt = varRespuesta2.rpt;
                    varRespuesta.mensaje = varRespuesta2.mensaje;
                    varRespuesta.data = null;
                }
            }
            catch (Exception ex)
            {
                //return new ErrorDA().RegistrarError<CitaVirtualBE>(ex, "WS", "Cita.svc");
                return ClasesGenericas.RegistrarErrorIntranet<CitaVirtualBE>(ex, "WS", "Cita.svc");
            }
            return varRespuesta;
        }

        public RespuestaBE<DatosPagoBE> ObtenerDatosPago(string idCitaPresencial, string idCita, string canal, string ruc, string idCobertura = null)//cambio mb
        {
            #region Validacion de Parámetros
            int varIDCita;
            if (!string.IsNullOrEmpty(idCitaPresencial))
            {
                if (!int.TryParse(idCitaPresencial, out varIDCita))
                {
                    return new RespuestaBE<DatosPagoBE>()
                    {
                        rpt = 101,
                        mensaje = "El parámetro idCita debe ser numérico",
                        data = null
                    };
                }
            }
            if (!string.IsNullOrEmpty(idCita))
            {
                if (!int.TryParse(idCita, out varIDCita))
                {
                    return new RespuestaBE<DatosPagoBE>()
                    {
                        rpt = 101,
                        mensaje = "El parámetro idCitaVirtual debe ser numérico",
                        data = null
                    };
                }
            }
            #endregion
            RespuestaBE<DatosPagoBE> varRespuesta = new RespuestaBE<DatosPagoBE>();
            try
            {
                var oRequest = new
                {
                    idCitaPresencial = idCitaPresencial,
                    idCita = idCita,
                    canal = canal,
                    ruc = ruc,
                    idCobertura = idCobertura
                };
                string strRequest = new JavaScriptSerializer().Serialize(oRequest);
                string response = ClasesGenericas.PostAsyncIntranet("Cita.svc/ObtenerDatosPago/", strRequest, ClasesGenericas.GetHeader(WebOperationContext.Current.IncomingRequest.Headers, "token"));
                varRespuesta = new JavaScriptSerializer().Deserialize<RespuestaBE<DatosPagoBE>>(response);

                if (varRespuesta == null)
                {
                    return new RespuestaBE<DatosPagoBE>()
                    {
                        rpt = -1,
                        mensaje = "No se logró procesar la solicitud",
                        data = null
                    };
                }
            }
            catch (Exception ex)
            {
                //return new ErrorDA().RegistrarError<DatosPagoBE>(ex, "WS", "Cita.svc");
                return ClasesGenericas.RegistrarErrorIntranet<DatosPagoBE>(ex, "WS", "Cita.svc");
            }
            return varRespuesta;
        }

        public RespuestaSimpleBE RegistrarPagoCita(string idCitaPresencial, string idCita, string codigo, string mensaje, string fecha,
                                                    string hora, long purchaseNumber, string transactionID, string numeroTarjeta,
                                                    string deseaBoleta, string ruc, string razonSocial, string direccion, string origen,
                                                    string monto, string IDUnico, string tokenEmail, string nombreVisa, string apellidoVisa,
                                                    string firma, string tipoTarjeta, string tipoDocumentoBoleta, string numeroDocumentoBoleta,
                                                    string nombresBoleta, string apellidoPaternoBoleta, string apellidoMaternoBoleta,
                                                    string direccionBoleta, string fechaNacimientoBoleta, string celularBoleta,
                                                    string emailBoleta, 
                                                    string RUCSeguro, string codigoCobertura, string origenMonto, 
                                                    string fechaPago, string codigoProducto, string IAFAS, 
                                                    string codigoParentesco, string codigoAfiliado, string tipoDocumentoContratante, 
                                                    string numeroDocumentoContratante, string codigoTipoPago, bool indNoProcesarSiteds,
                                                    string tipoDocumentoUsuario, string numeroDocumentoUsuario, string tokenTarjeta,
                                                    string nombresTarjeta, string apellidosTarjeta, string merchantBuyerId,
                                                    string payMethod, bool esIPN)
        {
            codigo = (String.IsNullOrEmpty(codigo) && monto.Equals("0.00")) ? "000" : codigo;//"000" : codigo; // Ahora se considera con dos decimales
            if (codigo.Equals("00")) codigo = "000"; 
            try
            {
                var oRequest = new
                {
                    idCitaPresencial = idCitaPresencial,
                    idCita = idCita,
                    codigo = codigo,
                    mensaje = mensaje,
                    fecha = fecha,
                    hora = hora,
                    purchaseNumber = purchaseNumber,
                    transactionID = transactionID,
                    numeroTarjeta = numeroTarjeta,
                    deseaBoleta = deseaBoleta,
                    ruc = ruc,
                    razonSocial = razonSocial,
                    direccion = direccion,
                    origen = origen,
                    monto = monto,
                    IDUnico = IDUnico,
                    tokenEmail = tokenEmail,
                    nombreVisa = nombreVisa,
                    apellidoVisa = apellidoVisa,
                    firma = firma,
                    tipoTarjeta = tipoTarjeta,
                    tipoDocumentoBoleta = tipoDocumentoBoleta,
                    numeroDocumentoBoleta = numeroDocumentoBoleta,
                    nombresBoleta = nombresBoleta,
                    apellidoPaternoBoleta = apellidoPaternoBoleta,
                    apellidoMaternoBoleta = apellidoMaternoBoleta,
                    direccionBoleta = direccionBoleta,
                    fechaNacimientoBoleta = fechaNacimientoBoleta,
                    celularBoleta = celularBoleta,
                    emailBoleta = emailBoleta,
                    RUCSeguro = RUCSeguro,
                    codigoCobertura = codigoCobertura,
                    origenMonto = origenMonto,
                    fechaPago = fechaPago,
                    codigoProducto = codigoProducto,
                    IAFAS = IAFAS,
                    codigoParentesco = codigoParentesco,
                    codigoAfiliado = codigoAfiliado,
                    tipoDocumentoContratante = tipoDocumentoContratante,
                    numeroDocumentoContratante = numeroDocumentoContratante,
                    codigoTipoPago = codigoTipoPago,
                    indNoProcesarSiteds = indNoProcesarSiteds,
                    tipoDocumentoUsuario = tipoDocumentoUsuario,
                    numeroDocumentoUsuario = numeroDocumentoUsuario,
                    tokenTarjeta = tokenTarjeta,
                    nombresTarjeta = nombresTarjeta,
                    apellidosTarjeta = apellidosTarjeta,
                    merchantBuyerId = merchantBuyerId,
                    payMethod = payMethod,
                    esIPN = esIPN
                };
                string strRequest = new JavaScriptSerializer().Serialize(oRequest);
                string response = ClasesGenericas.PostAsyncIntranet("Cita.svc/RegistrarPagoCita/", strRequest, ClasesGenericas.GetHeader(WebOperationContext.Current.IncomingRequest.Headers, "token"));
                RespuestaBE<RegistroPagoBE> varRespuesta = new JavaScriptSerializer().Deserialize<RespuestaBE<RegistroPagoBE>>(response);

                if (varRespuesta == null)
                {
                    return new RespuestaSimpleBE()
                    {
                        rpt = -1,
                        mensaje = "No se logró procesar la solicitud",
                        data = null
                    };
                }
                RegistroPagoBE oRegistroPagoBE = varRespuesta.data;

                bool succes = oRegistroPagoBE.success;
                if (succes)
                {
                    var id = (String.IsNullOrEmpty(idCitaPresencial)) ? idCita : idCitaPresencial;
                    var tipo = (String.IsNullOrEmpty(idCitaPresencial)) ? 2 : 1;
                    if (codigo == "000")
                    {
                        Debug.WriteLine("Entro");
                        bool pagoRoyal = false;
                        RespuestaSimpleBE pagoRoyalSimple = new RespuestaSimpleBE();
                        if (indNoProcesarSiteds)
                        {
                            pagoRoyal = true;
                            pagoRoyalSimple = new RespuestaSimpleBE()
                            {
                                rpt = 0,
                                mensaje = "Pago procesado correctamente" //IPN
                            };
                        } 
                        else
                        {
                            if (tipo == 1) pagoRoyal = RegistroPagoRoyal(id, numeroTarjeta, tipoTarjeta, tipo, fecha, hora);
                            else if (tipo == 2) pagoRoyalSimple = RegistroPagoRoyalVirtual(id, firma);
                        }
                    }
                }
                if (succes)
                {
                    if (oRegistroPagoBE.indEnviarCorreo)
                    {
                        bool statusEnvioEmail;
                        Dictionary<string, string> varParametrosCorreo = new Dictionary<string, string>();
                        if (!String.IsNullOrEmpty(idCita))
                        {
                            //Virtual
                            //varParametrosCorreo = new CitaDA().DatosCitaVirtual(idCita);
                            var oRequest2 = new
                            {
                                idCitaVirtual = idCita
                            };
                            string strRequest2 = new JavaScriptSerializer().Serialize(oRequest2);
                            string response2 = ClasesGenericas.PostAsyncIntranet("Cita.svc/DatosCitaVirtual/", strRequest2, ClasesGenericas.GetHeader(WebOperationContext.Current.IncomingRequest.Headers, "token"));
                            RespuestaBE<DatosCitaVirtualBE> varRespuesta2 = new JavaScriptSerializer().Deserialize<RespuestaBE<DatosCitaVirtualBE>>(response2);

                            if (varRespuesta2.rpt == 0)
                            {
                                varParametrosCorreo = DatosCitaVirtualDct(varRespuesta2.data);
                            }
                            varParametrosCorreo.Add("FechaPago", fecha);
                            varParametrosCorreo.Add("HoraPago", hora);
                            varParametrosCorreo.Add("Transaccion", transactionID);
                            try
                            {
                                if (codigo == "000")
                                {
                                    statusEnvioEmail = ClasesGenericas.EnviarCorreo(varParametrosCorreo["Email"], "Cita_RegistrarCitaVirtualPago", varParametrosCorreo, null, "SMTPVirtual", "", ';', varParametrosCorreo["EmailPago"], ';');
                                }
                            }
                            catch (Exception)
                            {
                            }
                        }
                        else
                        {
                            //Presencial
                            //varParametrosCorreo = new CitaDA().DatosCita(idCitaPresencial);
                            var oRequest3 = new
                            {
                                idCitaPresencial = idCitaPresencial
                            };
                            string strRequest3 = new JavaScriptSerializer().Serialize(oRequest3);
                            string response3 = ClasesGenericas.PostAsyncIntranet("Cita.svc/DatosCita/", strRequest3, ClasesGenericas.GetHeader(WebOperationContext.Current.IncomingRequest.Headers, "token"));
                            RespuestaBE<DatosCitaBE> varRespuesta3 = new JavaScriptSerializer().Deserialize<RespuestaBE<DatosCitaBE>>(response3);

                            if (varRespuesta3.rpt == 0)
                            {
                                varParametrosCorreo = DatosCitaDct(varRespuesta3.data);
                            }
                            varParametrosCorreo.Add("FechaPago", fecha);
                            varParametrosCorreo.Add("HoraPago", hora);
                            varParametrosCorreo.Add("Transaccion", transactionID);
                            if (varParametrosCorreo["EsAdicional"].Equals("1"))
                            {
                                varParametrosCorreo["HoraInicio"] = "ADICIONAL DE " + varParametrosCorreo["HoraInicioHorario"] + " - " + varParametrosCorreo["HoraFinHorario"];
                            }
                            if (codigo == "000")
                            {
                                statusEnvioEmail = ClasesGenericas.EnviarCorreo(varParametrosCorreo["Email"], "Cita_RegistrarCitaPago", varParametrosCorreo, null, "SMTP", "", ';', varParametrosCorreo["EmailPago"], ';');
                            }
                        }
                    }
                    return new RespuestaSimpleBE()
                    {
                        rpt = 0,
                        mensaje = "Success",
                        data = "true"
                    };
                }
                else
                {
                    return new RespuestaSimpleBE()
                    {
                        rpt = 1,
                        mensaje = "Error, por favor comunicarse con soporte",
                        data = "False"
                    };
                }
            }
            catch (Exception ex)
            {
                return ClasesGenericas.RegistrarErrorIntranet(ex, "WS", "Cita.svc");
            }
        }
        public RespuestaBE<List<FilaEsperaBE>> ConsultarFilaEspera(string idCitaPresencial, string idCitaVirtual)
        {
            #region Validacion de Parámetros
            if (string.IsNullOrEmpty(idCitaPresencial) && string.IsNullOrEmpty(idCitaVirtual))
            {
                throw new WebFaultException(HttpStatusCode.BadRequest);
            }
            if (!string.IsNullOrEmpty(idCitaPresencial) && !string.IsNullOrEmpty(idCitaVirtual))
            {
                return new RespuestaBE<List<FilaEsperaBE>>()
                {
                    rpt = 100,
                    mensaje = "Solo enviar el parámetro idCitaPresencial o idCitaVirtual",
                    data = null
                };
            }
            int varIDCita;
            if (!string.IsNullOrEmpty(idCitaPresencial))
            {
                if (!int.TryParse(idCitaPresencial, out varIDCita))
                {
                    return new RespuestaBE<List<FilaEsperaBE>>()
                    {
                        rpt = 101,
                        mensaje = "El parámetro idCitaPresencial debe ser numérico",
                        data = null
                    };
                }
            }
            if (!string.IsNullOrEmpty(idCitaVirtual))
            {
                if (!int.TryParse(idCitaVirtual, out varIDCita))
                {
                    return new RespuestaBE<List<FilaEsperaBE>>()
                    {
                        rpt = 102,
                        mensaje = "El parámetro idCitaVirtual debe ser numérico",
                        data = null
                    };
                }
            }
            #endregion
            RespuestaBE<List<FilaEsperaBE>> varRespuesta = new RespuestaBE<List<FilaEsperaBE>>();
            try
            {
                var oRequest = new
                {
                    idCitaPresencial = idCitaPresencial,
                    idCitaVirtual = idCitaVirtual
                };
                string strRequest = new JavaScriptSerializer().Serialize(oRequest);
                string response = ClasesGenericas.PostAsyncIntranet("Cita.svc/ConsultarFilaEspera/", strRequest, ClasesGenericas.GetHeader(WebOperationContext.Current.IncomingRequest.Headers, "token"));
                varRespuesta = new JavaScriptSerializer().Deserialize<RespuestaBE<List<FilaEsperaBE>>>(response);

                if (varRespuesta == null)
                {
                    return new RespuestaBE<List<FilaEsperaBE>>()
                    {
                        rpt = -1,
                        mensaje = "No se logró procesar la solicitud",
                        data = null
                    };
                }
            }
            catch (Exception ex)
            {
                //return new ErrorDA().RegistrarError<List<FilaEsperaBE>>(ex, "WS", "Cita.svc");
                return ClasesGenericas.RegistrarErrorIntranet<List<FilaEsperaBE>>(ex, "WS", "Cita.svc");
            }
            return varRespuesta;
        }
        public bool RegistroPagoRoyal(string idCita, string tarjeta, string tipoTarjeta, int tipo, string fechaOperacion = "", string horaOperacion = "")
        {
            bool flgRpta = true;
            RespuestaRoyal estados = new RespuestaRoyal();

            List<string> lLog = new List<string>();
            List<string> lDataRoyal = new List<string>();
            List<string> lLogRoyal = new List<string>();
            string sepCampos = "¦";

            //var preDatos = new CitaDA().DatosCitaSeguro(idCita, tipo);
            var oRequest = new
            {
                idCita = idCita,
                tipo = tipo
            };
            string strRequest = new JavaScriptSerializer().Serialize(oRequest);
            string response = ClasesGenericas.PostAsyncIntranet("Cita.svc/DatosCitaSeguro/", strRequest, ClasesGenericas.GetHeader(WebOperationContext.Current.IncomingRequest.Headers, "token"));
            RespuestaBE<PreDatosCitasSited> varRespuesta = new JavaScriptSerializer().Deserialize<RespuestaBE<PreDatosCitasSited>>(response);
            PreDatosCitasSited preDatos = varRespuesta.data;

            if (preDatos == null)
            {
                //fnRegistrarCitaLog(idCita, "", "00 - No se encontraron datos de la cita", "");
                lLog.Add("LOG" + sepCampos + idCita + sepCampos + "" + sepCampos + "00 - No se encontraron datos de la cita" + sepCampos + "" + sepCampos + "");
                flgRpta = false;
            }

            if (flgRpta)
            {
                try
                {
                    String coberturasCsv = preDatos.coberturasCsv;
                    preDatos.numeroDocumento = preDatos.numeroDocumento.Trim();
                    //fnRegistrarCitaLog(idCita, "", "01 - Inicio de consulta SITEDS", "");
                    lLog.Add("LOG" + sepCampos + idCita + sepCampos + "" + sepCampos + "01 - Inicio de consulta SITEDS" + sepCampos + "" + sepCampos + "");
                    if (String.IsNullOrEmpty(preDatos.idPaciente))
                    {
                        //fnRegistrarCitaLog(idCita, "No se puede obtener el Id del Paciente");
                        lLog.Add("LOG" + sepCampos + idCita + sepCampos + "No se puede obtener el Id del Paciente" + sepCampos + "" + sepCampos + "" + sepCampos + "");
                    }

                    List<ConsultAsegNomResponse> listResponseOne = new List<ConsultAsegNomResponse>();
                    List<ConsultAsegNomResponse> listResponseOneFiltro = new List<ConsultAsegNomResponse>();

                    ConsultAsegNomResponse responseOne = new ConsultAsegNomResponse();
                    ConsultAsegCodResponse responseTwo = new ConsultAsegCodResponse();
                    ConsultaObservacionResponse responseThree = new ConsultaObservacionResponse();
                    ConsultaDatosAdicionalesResponse responseFour = new ConsultaDatosAdicionalesResponse();
                    ConsultaCondicionMedicaResponse responseFive = new ConsultaCondicionMedicaResponse();
                    ObtenerFotoResponse responseSix = new ObtenerFotoResponse();
                    ObtenerNumeroAutorizacionResponse responseSeven = new ObtenerNumeroAutorizacionResponse();
                    ConsultaProcedimientosEspecialesResponse responseEight = new ConsultaProcedimientosEspecialesResponse();
                    List<Cobertura> lbeCobertura = new List<Cobertura>();

                    int tipoDocumentoPaciente = Convert.ToInt32(preDatos.tipoDocumento);
                    bool indDNI = tipoDocumentoPaciente == 1;
                    bool indVolverLlamar = false; //Volver a llamar al método de productos
                    if (!string.IsNullOrEmpty(preDatos.codProducto))// && !string.IsNullOrEmpty(preDatos.codCobertura))
                    {

                        estados.idCitaConSeguro = true;
                        string urlBase = "", urlMetodo = "";
                        using (var client = new HttpClient())
                        {
                            //fnRegistrarCitaLog(idCita, "", "02 - Inicio de Consulta de productos", "");
                            lLog.Add("LOG" + sepCampos + idCita + sepCampos + "" + sepCampos + "02 - Inicio de Consulta de productos" + sepCampos + "" + sepCampos + "");
                            //WS 1
                            urlBase = ConfigurationManager.AppSettings["WS_SITED"].ToString();
                            client.BaseAddress = new Uri(urlBase);
                            //HTTP POST
                            ConsultAsegNom rqst = new ConsultAsegNom();
                            rqst.CodTipoDocumentoAfiliado = indDNI ? preDatos.tipoDocumento : "";
                            rqst.NumeroDocumentoAfiliado = indDNI ? preDatos.numeroDocumento : "";
                            rqst.RUC = preDatos.rucClinica;
                            rqst.SUNASA = preDatos.codigoSunasa;
                            rqst.IAFAS = preDatos.iafas;
                            rqst.NombresAfiliado = indDNI ? "" : preDatos.nombres;
                            rqst.ApellidoPaternoAfiliado = indDNI ? "" : preDatos.apellidoPaterno;
                            rqst.ApellidoMaternoAfiliado = indDNI ? "" : preDatos.apellidoMaterno;
                            rqst.CodEspecialidad = preDatos.iafas.Equals("30004") ? "028" : "";
                            Debug.WriteLine("Request");
                            Debug.WriteLine(JsonConvert.SerializeObject(rqst).ToString());
                            var content = new StringContent(JsonConvert.SerializeObject(rqst).ToString(), Encoding.UTF8, "application/json");
                            urlMetodo = "Sistema/ConsultaAsegNom";
                            //fnRegistrarCitaLog(idCita, "", "03 - Request de Consulta de productos", JsonConvert.SerializeObject(rqst).ToString(), urlBase + urlMetodo);
                            lLog.Add("LOG" + sepCampos + idCita + sepCampos + "" + sepCampos + "03 - Request de Consulta de productos" + sepCampos + JsonConvert.SerializeObject(rqst).ToString() + sepCampos + (urlBase + urlMetodo));
                            var responseTaskOne = client.PostAsync(urlMetodo, content);
                            responseTaskOne.Wait();

                            var resultOne = responseTaskOne.Result;

                            estados.vigente = false;
                            string rptaTaskOne = ""; //Para poder grabar en CitaLog 2022-07-04
                            if (resultOne.IsSuccessStatusCode)
                            {
                                estados.wsConsultaAsegNom = true;
                                var readTaskOne = resultOne.Content.ReadAsStringAsync();
                                readTaskOne.Wait();
                                if (readTaskOne.Result.Length > 2 && readTaskOne.Result != "[]")
                                {
                                    Debug.WriteLine("Response");
                                    Debug.WriteLine(readTaskOne.Result);
                                    rptaTaskOne = readTaskOne.Result;
                                    //fnRegistrarCitaLog(idCita, "", "04 - Response de Consulta de productos", rptaTaskOne, urlBase + urlMetodo);
                                    lLog.Add("LOG" + sepCampos + idCita + sepCampos + "" + sepCampos + "04 - Response de Consulta de productos" + sepCampos + rptaTaskOne + sepCampos + (urlBase + urlMetodo));
                                    listResponseOne = JsonConvert.DeserializeObject<List<ConsultAsegNomResponse>>(rptaTaskOne);
                                    int nRegistros = listResponseOne.Count;
                                    if (nRegistros == 0)
                                    {
                                        //fnRegistrarCitaLog(idCita, "No se obtiene datos de productos de SITEDS", JsonConvert.SerializeObject(rqst).ToString(), rptaTaskOne);
                                        lLog.Add("LOG" + sepCampos + idCita + sepCampos + "No se obtiene datos de productos de SITEDS" + sepCampos + JsonConvert.SerializeObject(rqst).ToString() + sepCampos + rptaTaskOne + sepCampos + "");
                                    }
                                    if (nRegistros >= 25 && preDatos.iafas.Equals("20001"))
                                    {
                                        indVolverLlamar = true;
                                    }

                                    if (!indVolverLlamar)
                                    {
                                        listResponseOne = listResponseOne.Where(x => x.CodProducto == preDatos.codProducto).ToList();
                                        int nRegistrosVigentes = listResponseOne.Where(x => (x.DesEstado == "VIGENTE" || x.DesEstado == "LATENTE")).ToList().Count;
                                        if (nRegistrosVigentes > 0)
                                        {
                                            if (nRegistrosVigentes == 1)
                                            {
                                                estados.vigente = true;
                                                responseOne = listResponseOne.FirstOrDefault(x => (x.DesEstado == "VIGENTE" || x.DesEstado == "LATENTE"));
                                            }
                                            else
                                            {
                                                responseOne = listResponseOne.FirstOrDefault(x => (x.DesEstado == "VIGENTE" || x.DesEstado == "LATENTE") && x.NumeroDocumentoAfiliado == preDatos.numeroDocumento);
                                                if (responseOne == null)
                                                {
                                                    responseOne = listResponseOne.FirstOrDefault(
                                                        x => (x.DesEstado == "VIGENTE" || x.DesEstado == "LATENTE") &&
                                                        x.NombresAfiliado == preDatos.nombres &&
                                                        x.ApellidoPaternoAfiliado == preDatos.apellidoPaterno &&
                                                        x.ApellidoMaternoAfiliado == preDatos.apellidoMaterno &&
                                                        x.CodParentesco == preDatos.codigoParentesco &&
                                                        x.CodigoAfiliado == preDatos.codigoAfiliado &&
                                                        x.CodTipoDocumentoContratante == preDatos.tipoDocumentoContratante &&
                                                        x.NumeroDocumentoContratante == preDatos.numeroDocumentoContratante
                                                    );
                                                }
                                                if (responseOne != null)
                                                {
                                                    estados.vigente = true;
                                                }
                                                else
                                                {
                                                    //fnRegistrarCitaLog(idCita, "No hay productos en estado Vigente en SITEDS", JsonConvert.SerializeObject(rqst).ToString(), rptaTaskOne);
                                                    lLog.Add("LOG" + sepCampos + idCita + sepCampos + "No hay productos en estado Vigente en SITEDS" + sepCampos + JsonConvert.SerializeObject(rqst).ToString() + sepCampos + rptaTaskOne + sepCampos + "");
                                                }
                                            }
                                        }
                                        else
                                        {
                                            estados.vigente = false;
                                            //fnRegistrarCitaLog(idCita, "No hay productos en estado Vigente en SITEDS", JsonConvert.SerializeObject(rqst).ToString(), rptaTaskOne);
                                            lLog.Add("LOG" + sepCampos + idCita + sepCampos + "No hay productos en estado Vigente en SITEDS" + sepCampos + JsonConvert.SerializeObject(rqst).ToString() + sepCampos + rptaTaskOne + sepCampos + "");
                                        }
                                    }
                                }
                                else
                                {
                                    //fnRegistrarCitaLog(idCita, "No se obtiene datos de productos de SITEDS", JsonConvert.SerializeObject(rqst).ToString(), rptaTaskOne);
                                    lLog.Add("LOG" + sepCampos + idCita + sepCampos + "No hay productos en estado Vigente en SITEDS" + sepCampos + JsonConvert.SerializeObject(rqst).ToString() + sepCampos + rptaTaskOne + sepCampos + "");
                                }
                            }
                            else //web api sent error response 
                            {
                                estados.wsConsultaAsegNom = false;
                                //fnRegistrarCitaLog(idCita, "No se obtiene datos de productos de SITEDS", JsonConvert.SerializeObject(rqst).ToString(), rptaTaskOne);
                                lLog.Add("LOG" + sepCampos + idCita + sepCampos + "No se obtiene datos de productos de SITEDS" + sepCampos + JsonConvert.SerializeObject(rqst).ToString() + sepCampos + rptaTaskOne + sepCampos + "");
                            }
                            if (indVolverLlamar)
                            {
                                //fnRegistrarCitaLog(idCita, "", "05 - Inicio de Consulta de productos (Segundo intento)", "");
                                lLog.Add("LOG" + sepCampos + idCita + sepCampos + "" + sepCampos + "05 - Inicio de Consulta de productos (Segundo intento)" + sepCampos + "" + sepCampos + "");
                                //WS 1
                                //client.BaseAddress = new Uri(ConfigurationManager.AppSettings["WS_SITED"].ToString());
                                //HTTP POST
                                rqst = new ConsultAsegNom();
                                rqst.CodTipoDocumentoAfiliado = "";
                                rqst.NumeroDocumentoAfiliado = "";
                                rqst.RUC = preDatos.rucClinica;
                                rqst.SUNASA = preDatos.codigoSunasa;
                                rqst.IAFAS = preDatos.iafas;
                                rqst.NombresAfiliado = preDatos.nombres;
                                rqst.ApellidoPaternoAfiliado = preDatos.apellidoPaterno;
                                rqst.ApellidoMaternoAfiliado = preDatos.apellidoMaterno;
                                rqst.CodEspecialidad = preDatos.iafas.Equals("30004") ? "028" : "";
                                Debug.WriteLine("Request");
                                Debug.WriteLine(JsonConvert.SerializeObject(rqst).ToString());
                                content = new StringContent(JsonConvert.SerializeObject(rqst).ToString(), Encoding.UTF8, "application/json");
                                urlMetodo = "Sistema/ConsultaAsegNom";
                                //fnRegistrarCitaLog(idCita, "", "06 - Request de Consulta de productos (Segundo intento)", JsonConvert.SerializeObject(rqst).ToString(), urlBase + urlMetodo);
                                lLog.Add("LOG" + sepCampos + idCita + sepCampos + "" + sepCampos + "06 - Request de Consulta de productos (Segundo intento)" + sepCampos + JsonConvert.SerializeObject(rqst).ToString() + sepCampos + (urlBase + urlMetodo));
                                responseTaskOne = client.PostAsync(urlMetodo, content);
                                responseTaskOne.Wait();

                                resultOne = responseTaskOne.Result;

                                estados.vigente = false;
                                if (resultOne.IsSuccessStatusCode)
                                {

                                    estados.wsConsultaAsegNom = true;
                                    var readTaskOne = resultOne.Content.ReadAsStringAsync();
                                    readTaskOne.Wait();
                                    if (readTaskOne.Result.Length > 2 && readTaskOne.Result != "[]")
                                    {
                                        Debug.WriteLine("Response");
                                        Debug.WriteLine(readTaskOne.Result);
                                        rptaTaskOne = readTaskOne.Result;
                                        //fnRegistrarCitaLog(idCita, "", "07 - Response de Consulta de productos (Segundo intento)", rptaTaskOne, urlBase + urlMetodo);
                                        lLog.Add("LOG" + sepCampos + idCita + sepCampos + "" + sepCampos + "07 - Response de Consulta de productos (Segundo intento)" + sepCampos + rptaTaskOne + sepCampos + (urlBase + urlMetodo));
                                        listResponseOne = JsonConvert.DeserializeObject<List<ConsultAsegNomResponse>>(rptaTaskOne);
                                        int nRegistros = listResponseOne.Count;
                                        if (nRegistros == 0)
                                        {
                                            //fnRegistrarCitaLog(idCita, "No se obtiene datos de productos de SITEDS", JsonConvert.SerializeObject(rqst).ToString(), rptaTaskOne);
                                            lLog.Add("LOG" + sepCampos + idCita + sepCampos + "No se obtiene datos de productos de SITEDS" + sepCampos + JsonConvert.SerializeObject(rqst).ToString() + sepCampos + rptaTaskOne + sepCampos + "");
                                        }
                                        listResponseOne = listResponseOne.Where(x => x.CodProducto == preDatos.codProducto).ToList();
                                        int nRegistrosVigentes = listResponseOne.Where(x => (x.DesEstado == "VIGENTE" || x.DesEstado == "LATENTE")).ToList().Count;
                                        if (nRegistrosVigentes > 0)
                                        {
                                            if (nRegistrosVigentes == 1)
                                            {
                                                estados.vigente = true;
                                                responseOne = listResponseOne.FirstOrDefault(x => (x.DesEstado == "VIGENTE" || x.DesEstado == "LATENTE"));
                                            }
                                            else
                                            {
                                                responseOne = listResponseOne.FirstOrDefault(x => (x.DesEstado == "VIGENTE" || x.DesEstado == "LATENTE") && x.NumeroDocumentoAfiliado == preDatos.numeroDocumento);
                                                if (responseOne == null)
                                                {
                                                    responseOne = listResponseOne.FirstOrDefault(
                                                        x => (x.DesEstado == "VIGENTE" || x.DesEstado == "LATENTE") &&
                                                        x.NombresAfiliado == preDatos.nombres &&
                                                        x.ApellidoPaternoAfiliado == preDatos.apellidoPaterno &&
                                                        x.ApellidoMaternoAfiliado == preDatos.apellidoMaterno &&
                                                        x.CodParentesco == preDatos.codigoParentesco &&
                                                        x.CodigoAfiliado == preDatos.codigoAfiliado &&
                                                        x.CodTipoDocumentoContratante == preDatos.tipoDocumentoContratante &&
                                                        x.NumeroDocumentoContratante == preDatos.numeroDocumentoContratante
                                                    );
                                                }
                                                if (responseOne != null)
                                                {
                                                    estados.vigente = true;
                                                }
                                                else
                                                {
                                                    //fnRegistrarCitaLog(idCita, "No hay productos en estado Vigente en SITEDS", JsonConvert.SerializeObject(rqst).ToString(), rptaTaskOne);
                                                    lLog.Add("LOG" + sepCampos + idCita + sepCampos + "No hay productos en estado Vigente en SITEDS" + sepCampos + JsonConvert.SerializeObject(rqst).ToString() + sepCampos + rptaTaskOne + sepCampos + "");
                                                }
                                            }
                                        }
                                        else
                                        {
                                            estados.vigente = false;
                                            //fnRegistrarCitaLog(idCita, "No hay productos en estado Vigente en SITEDS", JsonConvert.SerializeObject(rqst).ToString(), rptaTaskOne);
                                            lLog.Add("LOG" + sepCampos + idCita + sepCampos + "No hay productos en estado Vigente en SITEDS" + sepCampos + JsonConvert.SerializeObject(rqst).ToString() + sepCampos + rptaTaskOne + sepCampos + "");
                                        }

                                    }

                                }
                                else //web api sent error response 
                                {
                                    estados.wsConsultaAsegNom = false;
                                    //fnRegistrarCitaLog(idCita, "No se obtiene datos de productos de SITEDS", JsonConvert.SerializeObject(rqst).ToString(), rptaTaskOne);
                                    lLog.Add("LOG" + sepCampos + idCita + sepCampos + "No se obtiene datos de productos de SITEDS" + sepCampos + JsonConvert.SerializeObject(rqst).ToString() + sepCampos + rptaTaskOne + sepCampos + "");
                                }
                            }

                            //fnRegistrarCitaLog(idCita, "", "08 - Inicio de filtro de productos", "Cantidad total de productos: " + listResponseOne.Count.ToString());
                            lLog.Add("LOG" + sepCampos + idCita + sepCampos + "" + sepCampos + "08 - Inicio de filtro de productos" + sepCampos + ("Cantidad total de productos: " + listResponseOne.Count.ToString()) + sepCampos + "");
                            listResponseOneFiltro = listResponseOne.FindAll(x => (
                                (x.DesEstado == "VIGENTE" || x.DesEstado == "LATENTE")
                                &&
                                (
                                    (x.NumeroDocumentoAfiliado == preDatos.numeroDocumento &&
                                    x.CodParentesco == preDatos.codigoParentesco &&
                                    x.CodigoAfiliado == preDatos.codigoAfiliado &&
                                    x.CodTipoDocumentoContratante == preDatos.tipoDocumentoContratante &&
                                    x.NumeroDocumentoContratante == preDatos.numeroDocumentoContratante)
                                    ||
                                    (
                                        x.NombresAfiliado == preDatos.nombres &&
                                        x.ApellidoPaternoAfiliado == preDatos.apellidoPaterno &&
                                        x.ApellidoMaternoAfiliado == preDatos.apellidoMaterno &&
                                        x.CodParentesco == preDatos.codigoParentesco &&
                                        x.CodigoAfiliado == preDatos.codigoAfiliado &&
                                        x.CodTipoDocumentoContratante == preDatos.tipoDocumentoContratante &&
                                        x.NumeroDocumentoContratante == preDatos.numeroDocumentoContratante
                                    )
                                )
                            ));
                            //fnRegistrarCitaLog(idCita, "", "09 - Fin de filtro de productos", "Cantidad de productos vigentes o latentes del paciente: " + listResponseOneFiltro.Count.ToString());
                            lLog.Add("LOG" + sepCampos + idCita + sepCampos + "" + sepCampos + "09 - Fin de filtro de productos" + sepCampos + ("Cantidad de productos vigentes o latentes del paciente: " + listResponseOneFiltro.Count.ToString()) + sepCampos + "");
                            var seg = responseOne.CodProducto;
                            ConsultAsegCod rqstTwo = new ConsultAsegCod();
                            //fnRegistrarCitaLog(idCita, "", "10 - Inicio de Consulta de Coberturas", "");
                            lLog.Add("LOG" + sepCampos + idCita + sepCampos + "" + sepCampos + "10 - Inicio de Consulta de Coberturas" + sepCampos + "" + sepCampos + "");
                            int indiceCobertura = 0;
                            foreach (ConsultAsegNomResponse responseOneTmp in listResponseOneFiltro)
                            {
                                //responseTwo = new ConsultAsegCodResponse();
                                seg = responseOneTmp.CodProducto;
                                rqstTwo.SUNASA = preDatos.codigoSunasa;
                                rqstTwo.IAFAS = preDatos.iafas;
                                rqstTwo.RUC = preDatos.rucClinica;
                                rqstTwo.NombresAfiliado = responseOneTmp.NombresAfiliado;
                                rqstTwo.ApellidoPaternoAfiliado = responseOneTmp.ApellidoPaternoAfiliado;
                                rqstTwo.ApellidoMaternoAfiliado = responseOneTmp.ApellidoMaternoAfiliado;
                                rqstTwo.CodigoAfiliado = responseOneTmp.CodigoAfiliado;
                                rqstTwo.CodTipoDocumentoAfiliado = responseOneTmp.CodTipoDocumentoAfiliado;
                                rqstTwo.NumeroDocumentoAfiliado = responseOneTmp.NumeroDocumentoAfiliado;
                                rqstTwo.CodProducto = responseOneTmp.CodProducto;
                                rqstTwo.DesProducto = responseOneTmp.DesProducto;
                                rqstTwo.NumeroPlan = responseOneTmp.NumeroPlan;
                                rqstTwo.CodTipoDocumentoContratante = responseOneTmp.CodTipoDocumentoContratante;
                                rqstTwo.NumeroDocumentoContratante = responseOneTmp.NumeroDocumentoContratante;
                                rqstTwo.NombreContratante = responseOneTmp.NombreContratante;
                                rqstTwo.CodParentesco = responseOneTmp.CodParentesco;
                                rqstTwo.TipoCalificadorContratante = responseOneTmp.TipoCalificadorContratante;
                                rqstTwo.CodEspecialidad = preDatos.iafas.Equals("30004") ? "028" : "";
                                Debug.WriteLine("Request");
                                Debug.WriteLine(JsonConvert.SerializeObject(rqstTwo).ToString());
                                var contentTwo = new StringContent(JsonConvert.SerializeObject(rqstTwo).ToString(), Encoding.UTF8, "application/json");
                                urlMetodo = "Sistema/ConsultaAsegCod";
                                //fnRegistrarCitaLog(idCita, "", "10[" + indiceCobertura.ToString() + "] - Request de Consulta de Coberturas", JsonConvert.SerializeObject(rqstTwo).ToString(), urlBase + urlMetodo);
                                lLog.Add("LOG" + sepCampos + idCita + sepCampos + "" + sepCampos + "10 - Inicio de Consulta de Coberturas" + sepCampos + "" + sepCampos + "");
                                var responseTaskTwo = client.PostAsync(urlMetodo, contentTwo);
                                responseTaskTwo.Wait();

                                var resultTwo = responseTaskTwo.Result;
                                string rptaTaskTwo = "";
                                if (resultTwo.IsSuccessStatusCode)
                                {
                                    estados.wsConsultaAsegCod = true;

                                    var readTaskTwo = resultTwo.Content.ReadAsStringAsync();
                                    readTaskTwo.Wait();
                                    Debug.WriteLine("Response");
                                    rptaTaskTwo = readTaskTwo.Result;
                                    Debug.WriteLine(rptaTaskTwo);
                                    //fnRegistrarCitaLog(idCita, "", "10[" + indiceCobertura.ToString() + "] - Response de Consulta de Coberturas", rptaTaskTwo, urlBase + urlMetodo);
                                    lLog.Add("LOG" + sepCampos + idCita + sepCampos + "" + sepCampos + ("10[" + indiceCobertura.ToString() + "] - Response de Consulta de Coberturas") + sepCampos + rptaTaskTwo + sepCampos + (urlBase + urlMetodo));
                                    if (rptaTaskTwo.Length > 2 && rptaTaskTwo != "[]")
                                    {
                                        responseTwo = JsonConvert.DeserializeObject<ConsultAsegCodResponse>(rptaTaskTwo);
                                    }
                                    if (responseTwo.Coberturas != null)
                                    {
                                        if (responseTwo.Coberturas != null && responseTwo.Coberturas.Count == 0)
                                        {
                                            //fnRegistrarCitaLog(idCita, "No hay cobertura/beneficio en SITEDS", JsonConvert.SerializeObject(rqstTwo).ToString(), rptaTaskTwo);
                                            lLog.Add("LOG" + sepCampos + idCita + sepCampos + "No hay cobertura/beneficio en SITEDS" + sepCampos + JsonConvert.SerializeObject(rqstTwo).ToString() + sepCampos + rptaTaskTwo + sepCampos + "");
                                        }
                                        bool indFarmacia = false;
                                        if (String.IsNullOrEmpty(preDatos.codCobertura))
                                        {
                                            //SqlDA oConexionCsv = new SqlDA();
                                            //String coberturasCsv = oConexionCsv.EjecutarComando("uspObtenerCoberturasSiteds");
                                            String[] lCobertura = !String.IsNullOrEmpty(coberturasCsv) ? coberturasCsv.Split('¬') : new String[0];
                                            String[] aCampo;
                                            bool indCobertura = false;
                                            for (int i = 0; i < lCobertura.Length; i++)
                                            {
                                                aCampo = lCobertura[i].Split('¦');
                                                if (!indCobertura)
                                                {
                                                    foreach (Cobertura cbt in responseTwo.Coberturas)
                                                    {
                                                        if (cbt.CodigoCobertura.Equals(aCampo[0]) && cbt.CondicionesEspeciales != "Farmacia")
                                                        {
                                                            indCobertura = true;
                                                            lbeCobertura.Add(cbt);
                                                            break;
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    break;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            foreach (Cobertura cbt in responseTwo.Coberturas)
                                            {
                                                if (cbt.CodigoCobertura == preDatos.codCobertura && cbt.CondicionesEspeciales != "Farmacia")
                                                {
                                                    lbeCobertura.Add(cbt);
                                                    break;
                                                }
                                            }
                                        }

                                        foreach (Cobertura cbt in responseTwo.Coberturas)
                                        {
                                            if (!indFarmacia)
                                            {
                                                if (cbt.CodigoCobertura.Equals("4902") || (cbt.CondicionesEspeciales.Equals("Farmacia") && cbt.CodigoCobertura.Equals("4100")))
                                                {
                                                    indFarmacia = true;
                                                    lbeCobertura.Add(cbt);
                                                    break;
                                                }
                                            }
                                            else
                                            {
                                                break;
                                            }
                                        }
                                        if (lbeCobertura.Count > 0)
                                        {
                                            estados.wsConsultaAsegCod = true;
                                            responseOne = responseOneTmp;
                                            break;
                                        }
                                        else
                                        {
                                            estados.wsConsultaAsegCod = false;
                                            //fnRegistrarCitaLog(idCita, "No hay cobertura/beneficio en SITEDS", JsonConvert.SerializeObject(rqstTwo).ToString(), rptaTaskTwo);
                                            lLog.Add("LOG" + sepCampos + idCita + sepCampos + "No hay cobertura/beneficio en SITEDS" + sepCampos + JsonConvert.SerializeObject(rqstTwo).ToString() + sepCampos + rptaTaskTwo + sepCampos + "");
                                        }
                                    }
                                    else
                                    {
                                        estados.wsConsultaAsegCod = false;
                                        //fnRegistrarCitaLog(idCita, "No hay cobertura/beneficio en SITEDS", JsonConvert.SerializeObject(rqstTwo).ToString(), rptaTaskTwo);
                                        lLog.Add("LOG" + sepCampos + idCita + sepCampos + "No hay cobertura/beneficio en SITEDS" + sepCampos + JsonConvert.SerializeObject(rqstTwo).ToString() + sepCampos + rptaTaskTwo + sepCampos + "");
                                    }
                                }
                                else //web api sent error response 
                                {
                                    estados.wsConsultaAsegCod = false;
                                    //fnRegistrarCitaLog(idCita, "No hay cobertura/beneficio en SITEDS", JsonConvert.SerializeObject(rqstTwo).ToString(), rptaTaskTwo);
                                    lLog.Add("LOG" + sepCampos + idCita + sepCampos + "No hay cobertura/beneficio en SITEDS" + sepCampos + JsonConvert.SerializeObject(rqstTwo).ToString() + sepCampos + rptaTaskTwo + sepCampos + "");
                                }
                                indiceCobertura++;
                            }
                            //fnRegistrarCitaLog(idCita, "", "11 - Fin de Consulta de Coberturas", "");
                            lLog.Add("LOG" + sepCampos + idCita + sepCampos + "" + sepCampos + "11 - Fin de Consulta de Coberturas" + sepCampos + "" + sepCampos + "");
                            if (responseTwo.DatosAfiliado != null && estados.wsConsultaAsegCod && responseTwo.Coberturas != null && responseTwo.Coberturas.Count > 0)
                            {
                                //SqlDA oSqlDA = new SqlDA();
                                string cadena = preDatos.iafas + "¯" + responseTwo.DatosAfiliado.CodProducto;
                                string configIAFA = "";
                                if (preDatos.iafas == "20001") 
                                {
                                    //configIAFA = oSqlDA.EjecutarComando("uspIAFASporProducto_Buscar", "@lstParametros", cadena);
                                    var oRequest2 = new
                                    {
                                        data = cadena
                                    };
                                    string strRequest2 = new JavaScriptSerializer().Serialize(oRequest2);
                                    string response2 = ClasesGenericas.PostAsyncIntranet("Cita.svc/BuscarIAFA/", strRequest2, ClasesGenericas.GetHeader(WebOperationContext.Current.IncomingRequest.Headers, "token"));
                                    RespuestaSimpleBE varRespuesta2 = new JavaScriptSerializer().Deserialize<RespuestaSimpleBE>(response2);
                                }
                                else configIAFA = preDatos.iafas;

                                String numeroAutorizacionCabecera = "", numeroAutorizacionFarmacia = "", monto = "", numeroAutorizacionTemporal = "";

                                string rptaTaskSeven = "";
                                ObtenerNumeroAutorizacionRequest rqstSeven = new ObtenerNumeroAutorizacionRequest();
                                //fnRegistrarCitaLog(idCita, "", "12 - Inicio de iteración de Coberturas (" + lbeCobertura.Count.ToString() + ")", "");
                                lLog.Add("LOG" + sepCampos + idCita + sepCampos + "" + sepCampos + "12 - Inicio de iteración de Coberturas (" + lbeCobertura.Count.ToString() + ")" + sepCampos + "" + sepCampos + "");
                                indiceCobertura = 0;
                                foreach (Cobertura cobertura in lbeCobertura)
                                {
                                    //fnRegistrarCitaLog(idCita, "", "12[" + indiceCobertura.ToString() + "] - Cobertura", cobertura.CodigoCobertura);
                                    lLog.Add("LOG" + sepCampos + idCita + sepCampos + "" + sepCampos + ("12[" + indiceCobertura.ToString() + "] - Cobertura") + sepCampos + cobertura.CodigoCobertura + sepCampos + "");
                                    if (responseOne != null)
                                    {
                                        if (responseOne.DesEstado == "VIGENTE" || responseOne.DesEstado == "LATENTE")
                                        {
                                            //var seg = responseOne.CodProducto;
                                            ConsultaObservacionRequest rqstThree = new ConsultaObservacionRequest();
                                            rqstThree.SUNASA = preDatos.codigoSunasa;
                                            rqstThree.IAFAS = preDatos.iafas;
                                            rqstThree.RUC = preDatos.rucClinica;
                                            rqstThree.NombresAfiliado = responseOne.NombresAfiliado;
                                            rqstThree.ApellidoPaternoAfiliado = responseOne.ApellidoPaternoAfiliado;
                                            rqstThree.ApellidoMaternoAfiliado = responseOne.ApellidoMaternoAfiliado;
                                            rqstThree.CodigoAfiliado = responseOne.CodigoAfiliado;
                                            rqstThree.CodTipoDocumentoAfiliado = responseOne.CodTipoDocumentoAfiliado;
                                            rqstThree.NumeroDocumentoAfiliado = responseOne.NumeroDocumentoAfiliado;
                                            rqstThree.CodProducto = responseOne.CodProducto;
                                            rqstThree.DesProducto = responseOne.DesProducto;
                                            rqstThree.NumeroPlan = responseOne.NumeroPlan;
                                            rqstThree.CodTipoDocumentoContratante = responseOne.CodTipoDocumentoContratante;
                                            rqstThree.NumeroDocumentoContratante = responseOne.NumeroDocumentoContratante;
                                            rqstThree.NombreContratante = responseOne.NombreContratante;
                                            rqstThree.CodParentesco = responseOne.CodParentesco;
                                            rqstThree.TipoCalificadorContratante = responseOne.TipoCalificadorContratante;
                                            rqstThree.CodEspecialidad = preDatos.iafas.Equals("30004") ? "028" : "";
                                            Debug.WriteLine("Request");
                                            Debug.WriteLine(JsonConvert.SerializeObject(rqstThree).ToString());
                                            var contentThree = new StringContent(JsonConvert.SerializeObject(rqstThree).ToString(), Encoding.UTF8, "application/json");
                                            urlMetodo = "Sistema/ConsultaObservacion";
                                            //fnRegistrarCitaLog(idCita, "", "12[" + indiceCobertura.ToString() + "] - Request de ConsultaObservacion", JsonConvert.SerializeObject(rqstThree).ToString(), urlBase + urlMetodo);
                                            lLog.Add("LOG" + sepCampos + idCita + sepCampos + "" + sepCampos + ("12[" + indiceCobertura.ToString() + "] - Request de ConsultaObservacion") + sepCampos + JsonConvert.SerializeObject(rqstThree).ToString() + sepCampos + (urlBase + urlMetodo));
                                            var responseTaskThree = client.PostAsync(urlMetodo, contentThree);
                                            responseTaskThree.Wait();

                                            var resultThree = responseTaskThree.Result;
                                            if (resultThree.IsSuccessStatusCode)
                                            {

                                                estados.wsConsultaObservacion = true;
                                                var readTaskThree = resultThree.Content.ReadAsStringAsync();
                                                readTaskThree.Wait();
                                                Debug.WriteLine("Response");
                                                Debug.WriteLine(readTaskThree.Result);
                                                //fnRegistrarCitaLog(idCita, "", "12[" + indiceCobertura.ToString() + "] - Response de ConsultaObservacion", readTaskThree.Result, urlBase + urlMetodo);
                                                lLog.Add("LOG" + sepCampos + idCita + sepCampos + "" + sepCampos + ("12[" + indiceCobertura.ToString() + "] - Response de ConsultaObservacion") + sepCampos + readTaskThree.Result + sepCampos + (urlBase + urlMetodo));
                                                if (readTaskThree.Result.Length > 2 && readTaskThree.Result != "[]")
                                                {
                                                    responseThree = JsonConvert.DeserializeObject<ConsultaObservacionResponse>(readTaskThree.Result);
                                                }
                                                estados.wsConsultaObservacion = true;

                                            }
                                            else //web api sent error response 
                                            {
                                                estados.wsConsultaObservacion = false;

                                            }
                                        }
                                    }
                                    if (responseOne != null)
                                    {
                                        if (responseOne.DesEstado == "VIGENTE" || responseOne.DesEstado == "LATENTE")
                                        {
                                            //var seg = responseOne.CodProducto;
                                            ConsultaDatosAdicionalesRequest rqstFour = new ConsultaDatosAdicionalesRequest();
                                            rqstFour.SUNASA = preDatos.codigoSunasa;
                                            rqstFour.IAFAS = preDatos.iafas;
                                            rqstFour.RUC = preDatos.rucClinica;
                                            rqstFour.NombresAfiliado = responseOne.NombresAfiliado;
                                            rqstFour.ApellidoPaternoAfiliado = responseOne.ApellidoPaternoAfiliado;
                                            rqstFour.ApellidoMaternoAfiliado = responseOne.ApellidoMaternoAfiliado;
                                            rqstFour.CodigoAfiliado = responseOne.CodigoAfiliado;
                                            rqstFour.CodTipoDocumentoAfiliado = responseOne.CodTipoDocumentoAfiliado;
                                            rqstFour.NumeroDocumentoAfiliado = responseOne.NumeroDocumentoAfiliado;
                                            rqstFour.CodProducto = responseOne.CodProducto;
                                            rqstFour.DesProducto = responseOne.DesProducto;
                                            rqstFour.NumeroPlan = responseOne.NumeroPlan;
                                            rqstFour.CodTipoDocumentoContratante = responseOne.CodTipoDocumentoContratante;
                                            rqstFour.NumeroDocumentoContratante = responseOne.NumeroDocumentoContratante;
                                            rqstFour.NombreContratante = responseOne.NombreContratante;
                                            rqstFour.CodParentesco = responseOne.CodParentesco;
                                            rqstFour.TipoCalificadorContratante = responseOne.TipoCalificadorContratante;
                                            rqstFour.CodEspecialidad = preDatos.iafas.Equals("30004") ? "028" : "";
                                            Debug.WriteLine("Request");
                                            Debug.WriteLine(JsonConvert.SerializeObject(rqstFour).ToString());
                                            var contentFour = new StringContent(JsonConvert.SerializeObject(rqstFour).ToString(), Encoding.UTF8, "application/json");
                                            urlMetodo = "Sistema/ConsultaDatosAdicionales";
                                            //fnRegistrarCitaLog(idCita, "", "12[" + indiceCobertura.ToString() + "] - Request de ConsultaDatosAdicionales", JsonConvert.SerializeObject(rqstFour).ToString(), urlBase + urlMetodo);
                                            lLog.Add("LOG" + sepCampos + idCita + sepCampos + "" + sepCampos + ("12[" + indiceCobertura.ToString() + "] - Request de ConsultaDatosAdicionales") + sepCampos + JsonConvert.SerializeObject(rqstFour).ToString() + sepCampos + (urlBase + urlMetodo));
                                            var responseTaskFour = client.PostAsync(urlMetodo, contentFour);
                                            responseTaskFour.Wait();

                                            var resultFour = responseTaskFour.Result;
                                            if (resultFour.IsSuccessStatusCode)
                                            {
                                                estados.wsConsultaDatosAdicionales = true;

                                                var readTaskFour = resultFour.Content.ReadAsStringAsync();
                                                readTaskFour.Wait();
                                                Debug.WriteLine("Response");
                                                Debug.WriteLine(readTaskFour.Result);
                                                //fnRegistrarCitaLog(idCita, "", "12[" + indiceCobertura.ToString() + "] - Response de ConsultaDatosAdicionales", readTaskFour.Result, urlBase + urlMetodo);
                                                lLog.Add("LOG" + sepCampos + idCita + sepCampos + "" + sepCampos + ("12[" + indiceCobertura.ToString() + "] - Response de ConsultaDatosAdicionales") + sepCampos + readTaskFour.Result + sepCampos + (urlBase + urlMetodo));
                                                if (readTaskFour.Result.Length > 2 && readTaskFour.Result != "[]")
                                                {
                                                    responseFour = JsonConvert.DeserializeObject<ConsultaDatosAdicionalesResponse>(readTaskFour.Result);

                                                    //Debug.WriteLine(responseTwo.Coberturas[0].CodCopagoFijo);
                                                }
                                                estados.wsConsultaDatosAdicionales = true;

                                            }
                                            else //web api sent error response 
                                            {
                                                estados.wsConsultaDatosAdicionales = false;

                                            }
                                        }
                                    }
                                    if (responseOne != null)
                                    {
                                        if (responseOne.DesEstado == "VIGENTE" || responseOne.DesEstado == "LATENTE")
                                        {
                                            //var seg = responseOne.CodProducto;
                                            ConsultaCondicionMedicaRequest rqstFive = new ConsultaCondicionMedicaRequest();
                                            rqstFive.SUNASA = preDatos.codigoSunasa;
                                            rqstFive.IAFAS = preDatos.iafas;
                                            rqstFive.RUC = preDatos.rucClinica;
                                            rqstFive.NombresAfiliado = responseOne.NombresAfiliado;
                                            rqstFive.ApellidoPaternoAfiliado = responseOne.ApellidoPaternoAfiliado;
                                            rqstFive.ApellidoMaternoAfiliado = responseOne.ApellidoMaternoAfiliado;
                                            rqstFive.CodigoAfiliado = responseOne.CodigoAfiliado;
                                            rqstFive.CodTipoDocumentoAfiliado = responseOne.CodTipoDocumentoAfiliado;
                                            rqstFive.NumeroDocumentoAfiliado = responseOne.NumeroDocumentoAfiliado;
                                            rqstFive.CodProducto = responseOne.CodProducto;
                                            rqstFive.DesProducto = responseOne.DesProducto;
                                            rqstFive.NumeroPlan = responseOne.NumeroPlan;
                                            rqstFive.CodTipoDocumentoContratante = responseOne.CodTipoDocumentoContratante;
                                            rqstFive.NumeroDocumentoContratante = responseOne.NumeroDocumentoContratante;
                                            rqstFive.NombreContratante = responseOne.NombreContratante;
                                            rqstFive.CodParentesco = responseOne.CodParentesco;
                                            rqstFive.TipoCalificadorContratante = responseOne.TipoCalificadorContratante;
                                            rqstFive.CodEspecialidad = preDatos.iafas.Equals("30004") ? "028" : "";
                                            Debug.WriteLine("Request");
                                            Debug.WriteLine(JsonConvert.SerializeObject(rqstFive).ToString());
                                            urlMetodo = "Sistema/ConsultaCondicionMedica";
                                            var contentFive = new StringContent(JsonConvert.SerializeObject(rqstFive).ToString(), Encoding.UTF8, "application/json");
                                            //fnRegistrarCitaLog(idCita, "", "12[" + indiceCobertura.ToString() + "] - Request de ConsultaCondicionMedica", JsonConvert.SerializeObject(rqstFive).ToString(), urlBase + urlMetodo);
                                            lLog.Add("LOG" + sepCampos + idCita + sepCampos + "" + sepCampos + ("12[" + indiceCobertura.ToString() + "] - Request de ConsultaCondicionMedica") + sepCampos + JsonConvert.SerializeObject(rqstFive).ToString() + sepCampos + (urlBase + urlMetodo));
                                            var responseTaskFive = client.PostAsync(urlMetodo, contentFive);
                                            responseTaskFive.Wait();

                                            var resultFive = responseTaskFive.Result;
                                            if (resultFive.IsSuccessStatusCode)
                                            {
                                                estados.wsConsultaCondicionMedica = true;

                                                var readTaskFive = resultFive.Content.ReadAsStringAsync();
                                                readTaskFive.Wait();
                                                Debug.WriteLine("Response");
                                                Debug.WriteLine(readTaskFive.Result);
                                                //fnRegistrarCitaLog(idCita, "", "12[" + indiceCobertura.ToString() + "] - Response de ConsultaCondicionMedica", readTaskFive.Result, urlBase + urlMetodo);
                                                lLog.Add("LOG" + sepCampos + idCita + sepCampos + "" + sepCampos + ("12[" + indiceCobertura.ToString() + "] - Response de ConsultaCondicionMedica") + sepCampos + readTaskFive.Result + sepCampos + (urlBase + urlMetodo));
                                                if (readTaskFive.Result.Length > 2 && readTaskFive.Result != "[]")
                                                {
                                                    /*JsonSerializerSettings JsonSettings = new JsonSerializerSettings
                                                    {
                                                        Formatting = Formatting.Indented,
                                                        NullValueHandling = NullValueHandling.Ignore,
                                                        DefaultValueHandling = DefaultValueHandling.Ignore,
                                                        ReferenceLoopHandling = ReferenceLoopHandling.Ignore
                                                    };*/
                                                    responseFive = JsonConvert.DeserializeObject<ConsultaCondicionMedicaResponse>(readTaskFive.Result);

                                                    //Debug.WriteLine(responseTwo.Coberturas[0].CodCopagoFijo);


                                                }
                                                estados.wsConsultaCondicionMedica = true;

                                            }
                                            else //web api sent error response 
                                            {
                                                estados.wsConsultaCondicionMedica = false;

                                            }
                                        }
                                    }
                                    if (responseOne != null)
                                    {
                                        if (responseOne.DesEstado == "VIGENTE" || responseOne.DesEstado == "LATENTE")
                                        {
                                            try
                                            {
                                                //var seg = responseOne.CodProducto;
                                                ObtenerFotoRequest rqstSix = new ObtenerFotoRequest();
                                                rqstSix.Iafas = preDatos.iafas;
                                                rqstSix.CodigoAfiliado = responseOne.CodigoAfiliado;
                                                rqstSix.CodFechaActualizacionFoto = responseTwo.DatosAfiliado.CodFechaActualizacionFoto;
                                                Debug.WriteLine("Request");
                                                Debug.WriteLine(JsonConvert.SerializeObject(rqstSix).ToString());
                                                var contentSix = new StringContent(JsonConvert.SerializeObject(rqstSix).ToString(), Encoding.UTF8, "application/json");
                                                urlMetodo = "Sistema/ObtenerFoto";
                                                //fnRegistrarCitaLog(idCita, "", "12[" + indiceCobertura.ToString() + "] - Request de ObtenerFoto", JsonConvert.SerializeObject(rqstSix).ToString(), urlBase + urlMetodo);
                                                lLog.Add("LOG" + sepCampos + idCita + sepCampos + "" + sepCampos + ("12[" + indiceCobertura.ToString() + "] - Request de ObtenerFoto") + sepCampos + JsonConvert.SerializeObject(rqstSix).ToString() + sepCampos + (urlBase + urlMetodo));
                                                var responseTaskSix = client.PostAsync(urlMetodo, contentSix);
                                                responseTaskSix.Wait();

                                                var resultSix = responseTaskSix.Result;
                                                if (resultSix.IsSuccessStatusCode)
                                                {
                                                    estados.wsObtenerFoto = true;

                                                    var readTaskSix = resultSix.Content.ReadAsStringAsync();
                                                    readTaskSix.Wait();
                                                    Debug.WriteLine("Response");
                                                    Debug.WriteLine(readTaskSix.Result);
                                                    //fnRegistrarCitaLog(idCita, "", "12[" + indiceCobertura.ToString() + "] - Response de ObtenerFoto", readTaskSix.Result, urlBase + urlMetodo);
                                                    lLog.Add("LOG" + sepCampos + idCita + sepCampos + "" + sepCampos + ("12[" + indiceCobertura.ToString() + "] - Response de ObtenerFoto") + sepCampos + readTaskSix.Result + sepCampos + (urlBase + urlMetodo));
                                                    if (readTaskSix.Result.Length > 2 && readTaskSix.Result != "[]")
                                                    {
                                                        responseSix = JsonConvert.DeserializeObject<ObtenerFotoResponse>(readTaskSix.Result);

                                                        //Debug.WriteLine(responseTwo.Coberturas[0].CodCopagoFijo);


                                                    }
                                                    estados.wsObtenerFoto = true;

                                                }
                                                else //web api sent error response 
                                                {
                                                    estados.wsObtenerFoto = false;

                                                }
                                            }
                                            catch (Exception)
                                            {
                                                estados.wsObtenerFoto = false;
                                            }

                                        }
                                    }
                                    if (responseOne != null)
                                    {
                                        if (responseOne.DesEstado == "VIGENTE" || responseOne.DesEstado == "LATENTE")
                                        {
                                            //var seg = responseOne.CodProducto;
                                            rqstSeven.ApellidoMaternoAfiliado = responseTwo.DatosAfiliado.ApellidoMaternoAfiliado;
                                            rqstSeven.ApellidoPaternoAfiliado = responseTwo.DatosAfiliado.ApellidoPaternoAfiliado;
                                            rqstSeven.BeneficioMaximoInicial = cobertura.BeneficioMaximoInicial;
                                            rqstSeven.CodigoAfiliado = responseTwo.DatosAfiliado.CodigoAfiliado;
                                            rqstSeven.CodigoTitular = responseTwo.DatosAfiliado.CodigoTitular;
                                            rqstSeven.CodCalificacionServicio = cobertura.CodCalificacionServicio;
                                            rqstSeven.CodEstado = responseTwo.DatosAfiliado.CodEstado;
                                            rqstSeven.CodEspecialidad = preDatos.iafas.Equals("30004") ? "028" : "";
                                            rqstSeven.CodMoneda = responseTwo.DatosAfiliado.CodMoneda;
                                            rqstSeven.CodCopagoFijo = cobertura.CodCopagoFijo;
                                            rqstSeven.CodCopagoVariable = cobertura.CodCopagoVariable;
                                            rqstSeven.CodParentesco = responseTwo.DatosAfiliado.CodParentesco;
                                            rqstSeven.CodProducto = responseTwo.DatosAfiliado.CodProducto;
                                            rqstSeven.NumeroDocumentoContratante = responseTwo.DatosAfiliado.NumeroDocumentoContratante;
                                            rqstSeven.CodSubTipoCobertura = cobertura.CodigoSubTipoCobertura;
                                            rqstSeven.CodTipoCobertura = cobertura.CodigoTipoCobertura;
                                            rqstSeven.CodTipoAfiliacion = responseTwo.DatosAfiliado.CodTipoAfiliacion;
                                            rqstSeven.DesProducto = responseTwo.DatosAfiliado.DesProducto;
                                            rqstSeven.CodEstadoMarital = responseTwo.DatosAfiliado.CodEstadoCivil;
                                            rqstSeven.CodFechaFinCarencia = cobertura.CodFechaFinCarencia;
                                            rqstSeven.CodFechaAfiliacion = responseTwo.DatosAfiliado.CodFechaAfiliacion;
                                            rqstSeven.CodFechaInicioVigencia = responseTwo.DatosAfiliado.CodFechaInicioVigencia;
                                            rqstSeven.CodFechaNacimiento = responseTwo.DatosAfiliado.CodFechaNacimiento;
                                            rqstSeven.CodGenero = responseTwo.DatosAfiliado.CodGenero;
                                            rqstSeven.SUNASA = preDatos.codigoSunasa;
                                            rqstSeven.IAFAS = preDatos.iafas;
                                            rqstSeven.CondicionesEspeciales = cobertura.CondicionesEspeciales;
                                            rqstSeven.ApellidoMaternoTitular = responseTwo.DatosAfiliado.ApellidoMaternoTitular;
                                            rqstSeven.NombreContratante = responseTwo.DatosAfiliado.NombreContratante;
                                            rqstSeven.ApellidoPaternoTitular = responseTwo.DatosAfiliado.ApellidoPaternoTitular;
                                            rqstSeven.NombresAfiliado = responseTwo.DatosAfiliado.NombresAfiliado;
                                            rqstSeven.NombresTitular = responseTwo.DatosAfiliado.NombresTitular;
                                            rqstSeven.NumeroCertificado = responseTwo.DatosAfiliado.NumeroCertificado;
                                            rqstSeven.NumeroContrato = responseTwo.DatosAfiliado.NumeroContrato;
                                            rqstSeven.NumeroDocumentoAfiliado = responseTwo.DatosAfiliado.NumeroDocumentoAfiliado;
                                            rqstSeven.NumeroDocumentoTitular = responseTwo.DatosAfiliado.NumeroDocumentoTitular;
                                            rqstSeven.NumeroPlan = responseTwo.DatosAfiliado.NumeroPlan;
                                            rqstSeven.NumeroPoliza = responseTwo.DatosAfiliado.NumeroPoliza;
                                            rqstSeven.RUC = preDatos.rucClinica;
                                            rqstSeven.CodTipoDocumentoContratante = responseTwo.DatosAfiliado.CodTipoDocumentoContratante;
                                            rqstSeven.CodTipoDocumentoAfiliado = responseTwo.DatosAfiliado.CodTipoDocumentoAfiliado;
                                            rqstSeven.CodTipoDocumentoTitular = responseTwo.DatosAfiliado.CodTipoDocumentoTitular;
                                            rqstSeven.CodTipoPlan = responseTwo.DatosAfiliado.CodTipoPlan;
                                            rqstSeven.CodIndicadorRestriccion = cobertura.CodIndicadorRestriccion;
                                            rqstSeven.CodFechaActualizacionFoto = responseTwo.DatosAfiliado.CodFechaActualizacionFoto;
                                            //rqstSeven.CodTipoMoneda = responseTwo.DatosAfiliado.CodMoneda.ToString();
                                            rqstSeven.CodTipoMoneda = cobertura.CodTipoMoneda;
                                            Debug.WriteLine("Request");
                                            Debug.WriteLine(JsonConvert.SerializeObject(rqstSeven).ToString());
                                            var contentSeven = new StringContent(JsonConvert.SerializeObject(rqstSeven).ToString(), Encoding.UTF8, "application/json");
                                            urlMetodo = "Sistema/ConsultaNumeroAutorizacion";
                                            //fnRegistrarCitaLog(idCita, "", "12[" + indiceCobertura.ToString() + "] - Request de ConsultaNumeroAutorizacion", JsonConvert.SerializeObject(rqstSeven).ToString(), urlBase + urlMetodo);
                                            lLog.Add("LOG" + sepCampos + idCita + sepCampos + "" + sepCampos + ("12[" + indiceCobertura.ToString() + "] - Request de ConsultaNumeroAutorizacion") + sepCampos + JsonConvert.SerializeObject(rqstSeven).ToString() + sepCampos + (urlBase + urlMetodo));
                                            var responseTaskSeven = client.PostAsync(urlMetodo, contentSeven);
                                            responseTaskSeven.Wait();

                                            var resultSeven = responseTaskSeven.Result;
                                            Debug.WriteLine("Result cod Auth");
                                            Debug.WriteLine(resultSeven.StatusCode);

                                            if (resultSeven.IsSuccessStatusCode)
                                            {
                                                estados.wsObtenerNumeroAutorizacion = true;

                                                var readTaskSeven = resultSeven.Content.ReadAsStringAsync();
                                                readTaskSeven.Wait();

                                                Debug.WriteLine("Response");
                                                rptaTaskSeven = readTaskSeven.Result;
                                                Debug.WriteLine(rptaTaskSeven);
                                                //fnRegistrarCitaLog(idCita, "", "12[" + indiceCobertura.ToString() + "] - Response de ConsultaNumeroAutorizacion", rptaTaskSeven, urlBase + urlMetodo);
                                                lLog.Add("LOG" + sepCampos + idCita + sepCampos + "" + sepCampos + ("12[" + indiceCobertura.ToString() + "] - Response de ConsultaNumeroAutorizacion") + sepCampos + rptaTaskSeven + sepCampos + (urlBase + urlMetodo));
                                                if (rptaTaskSeven.Length > 2 && rptaTaskSeven != "[]")
                                                {
                                                    responseSeven = JsonConvert.DeserializeObject<ObtenerNumeroAutorizacionResponse>(rptaTaskSeven);

                                                    //Debug.WriteLine(responseTwo.Coberturas[0].CodCopagoFijo);

                                                }
                                                else
                                                {
                                                    //fnRegistrarCitaLog(idCita, "No puede generar autorización SITEDS - 01", JsonConvert.SerializeObject(rqstSeven).ToString(), rptaTaskSeven);
                                                    lLog.Add("LOG" + sepCampos + idCita + sepCampos + "No puede generar autorización SITEDS - 01" + sepCampos + JsonConvert.SerializeObject(rqstSeven).ToString() + sepCampos + rptaTaskSeven + sepCampos + "");
                                                }
                                                estados.wsObtenerNumeroAutorizacion = true;

                                            }
                                            else //web api sent error response 
                                            {
                                                estados.wsObtenerNumeroAutorizacion = false;
                                                //fnRegistrarCitaLog(idCita, "No puede generar autorización SITEDS - 02", JsonConvert.SerializeObject(rqstSeven).ToString(), rptaTaskSeven);
                                                lLog.Add("LOG" + sepCampos + idCita + sepCampos + "No puede generar autorización SITEDS - 02" + sepCampos + JsonConvert.SerializeObject(rqstSeven).ToString() + sepCampos + rptaTaskSeven + sepCampos + "");
                                            }
                                        }
                                    }
                                    if (responseOne != null)
                                    {
                                        if (responseOne.DesEstado == "VIGENTE" || responseOne.DesEstado == "LATENTE")
                                        {
                                            //var seg = responseOne.CodProducto;
                                            ConsultaProcedimientosEspecialesRequest rqstEight = new ConsultaProcedimientosEspecialesRequest();
                                            rqstEight.SUNASA = preDatos.codigoSunasa;
                                            rqstEight.IAFAS = preDatos.iafas;
                                            rqstEight.RUC = preDatos.rucClinica;
                                            rqstEight.NombresAfiliado = responseTwo.DatosAfiliado.NombresAfiliado;
                                            rqstEight.ApellidoMaternoAfiliado = responseTwo.DatosAfiliado.ApellidoMaternoAfiliado;
                                            rqstEight.ApellidoPaternoAfiliado = responseTwo.DatosAfiliado.ApellidoPaternoAfiliado;
                                            rqstEight.BeneficioMaximoInicial = cobertura.BeneficioMaximoInicial;
                                            rqstEight.CodigoAfiliado = responseTwo.DatosAfiliado.CodigoAfiliado;
                                            rqstEight.CodTipoDocumentoAfiliado = responseTwo.DatosAfiliado.CodTipoDocumentoAfiliado;
                                            rqstEight.NumeroDocumentoAfiliado = responseTwo.DatosAfiliado.NumeroDocumentoAfiliado;
                                            rqstEight.CodProducto = responseTwo.DatosAfiliado.CodProducto;
                                            rqstEight.DesProducto = responseTwo.DatosAfiliado.DesProducto;
                                            rqstEight.NumeroPlan = responseTwo.DatosAfiliado.NumeroPlan;
                                            rqstEight.CodTipoDocumentoContratante = responseTwo.DatosAfiliado.CodTipoDocumentoContratante;
                                            rqstEight.NumeroDocumentoContratante = responseTwo.DatosAfiliado.NumeroDocumentoContratante;
                                            rqstEight.NombreContratante = responseTwo.DatosAfiliado.NombreContratante;
                                            rqstEight.CodParentesco = responseTwo.DatosAfiliado.CodParentesco;
                                            rqstEight.NumeroCobertura = cobertura.NumeroCobertura;
                                            rqstEight.BeneficioMaximoInicial = cobertura.BeneficioMaximoInicial;
                                            rqstEight.CodigoTipoCobertura = cobertura.CodigoTipoCobertura;
                                            rqstEight.CodigoSubTipoCobertura = cobertura.CodigoSubTipoCobertura;
                                            rqstEight.CodEspecialidad = preDatos.iafas.Equals("30004") ? "028" : "";
                                            Debug.WriteLine("Request");
                                            Debug.WriteLine(JsonConvert.SerializeObject(rqstEight).ToString());
                                            var contentEight = new StringContent(JsonConvert.SerializeObject(rqstEight).ToString(), Encoding.UTF8, "application/json");
                                            urlMetodo = "Sistema/ConsultaProcedimientosEspeciales";
                                            //fnRegistrarCitaLog(idCita, "", "12[" + indiceCobertura.ToString() + "] - Request de ConsultaProcedimientosEspeciales", JsonConvert.SerializeObject(rqstEight).ToString(), urlBase + urlMetodo);
                                            lLog.Add("LOG" + sepCampos + idCita + sepCampos + "" + sepCampos + ("12[" + indiceCobertura.ToString() + "] - Request de ConsultaProcedimientosEspeciales") + sepCampos + JsonConvert.SerializeObject(rqstEight).ToString() + sepCampos + (urlBase + urlMetodo));
                                            var responseTaskEight = client.PostAsync(urlMetodo, contentEight);
                                            responseTaskEight.Wait();

                                            var resultEight = responseTaskEight.Result;
                                            if (resultEight.IsSuccessStatusCode)
                                            {
                                                estados.wsConsultaProcedimientosEspeciales = true;

                                                var readTaskEight = resultEight.Content.ReadAsStringAsync();
                                                readTaskEight.Wait();
                                                Debug.WriteLine("Response");
                                                Debug.WriteLine(readTaskEight.Result);
                                                //fnRegistrarCitaLog(idCita, "", "12[" + indiceCobertura.ToString() + "] - Response de ConsultaProcedimientosEspeciales", readTaskEight.Result, urlBase + urlMetodo);
                                                lLog.Add("LOG" + sepCampos + idCita + sepCampos + "" + sepCampos + ("12[" + indiceCobertura.ToString() + "] - Response de ConsultaProcedimientosEspeciales") + sepCampos + readTaskEight.Result + sepCampos + (urlBase + urlMetodo));
                                                if (readTaskEight.Result.Length > 2 && readTaskEight.Result != "[]")
                                                {
                                                    responseEight = JsonConvert.DeserializeObject<ConsultaProcedimientosEspecialesResponse>(readTaskEight.Result);

                                                }
                                                estados.wsConsultaProcedimientosEspeciales = true;

                                            }
                                            else //web api sent error response 
                                            {
                                                estados.wsConsultaProcedimientosEspeciales = false;

                                            }
                                        }
                                    }

                                    numeroAutorizacionTemporal = responseSeven.NumeroAutorizacion;
                                    if (String.IsNullOrEmpty(numeroAutorizacionTemporal))
                                    {
                                        numeroAutorizacionTemporal = responseSeven.NumeroAutorizacionExistente;
                                    }

                                    if (cobertura.CodigoCobertura.Equals("4902") || (cobertura.CondicionesEspeciales == "Farmacia" && cobertura.CodigoCobertura.Equals("4100")))
                                    {
                                        numeroAutorizacionFarmacia = numeroAutorizacionTemporal;
                                        monto = cobertura.CodCopagoFijo;
                                    }
                                    else
                                    {
                                        numeroAutorizacionCabecera = numeroAutorizacionTemporal;
                                        monto = preDatos.monto;
                                    }

                                    if (!String.IsNullOrEmpty(numeroAutorizacionTemporal))
                                    {
                                        if (responseOne != null && responseTwo != null)
                                        {
                                            if (responseOne.DesEstado == "VIGENTE" || responseOne.DesEstado == "LATENTE")
                                            {
                                                //try
                                                //{
                                                    Debug.WriteLine("Insert 1");
                                                    //Almacenando datos Generales

                                                    //var grabarGenerales = new RoyalDA().GrabarDatosGenerales(numeroAutorizacionTemporal, responseTwo.DatosAfiliado.ApellidoMaternoAfiliado, responseTwo.DatosAfiliado.ApellidoMaternoTitular
                                                    //    , responseTwo.DatosAfiliado.ApellidoPaternoAfiliado, responseTwo.DatosAfiliado.ApellidoPaternoTitular, responseTwo.DatosAfiliado.CodEstado, responseTwo.DatosAfiliado.CodEstadoCivil,
                                                    //    responseTwo.DatosAfiliado.CodFechaActualizacionFoto, responseTwo.DatosAfiliado.CodGenero, responseTwo.DatosAfiliado.CodMoneda, responseTwo.DatosAfiliado.CodProducto, responseTwo.DatosAfiliado.CodTipoAfiliacion,
                                                    //    responseTwo.DatosAfiliado.CodTipoDocumentoAfiliado, responseTwo.DatosAfiliado.CodTipoDocumentoContratante, responseTwo.DatosAfiliado.CodTipoDocumentoTitular, responseTwo.DatosAfiliado.CodigoAfiliado,
                                                    //    responseTwo.DatosAfiliado.CodigoTitular, responseTwo.DatosAfiliado.DesEstado, responseTwo.DatosAfiliado.DesProducto, responseTwo.DatosAfiliado.Edad, responseTwo.DatosAfiliado.FechaFinVigencia,
                                                    //    responseTwo.DatosAfiliado.FechaInicioVigencia, responseTwo.DatosAfiliado.FechaNacimiento, responseTwo.DatosAfiliado.NombreContratante, responseTwo.DatosAfiliado.NombresAfiliado, responseTwo.DatosAfiliado.NombresTitular,
                                                    //    responseTwo.DatosAfiliado.NumeroCertificado, responseTwo.DatosAfiliado.NumeroDocumentoAfiliado, responseTwo.DatosAfiliado.NumeroDocumentoContratante, responseTwo.DatosAfiliado.NumeroDocumentoTitular, responseTwo.DatosAfiliado.NumeroPlan, responseTwo.DatosAfiliado.NumeroPoliza, "", configIAFA/*preDatos.iafas*/,
                                                    //    responseTwo.DatosAfiliado.CodParentesco, preDatos.rucClinica, responseTwo.DatosAfiliado.FechaAfiliacion, tarjeta, responseTwo.DatosAfiliado.NumeroContrato, cobertura.CondicionesEspeciales, cobertura.Observaciones, preDatos.idClinica);
                                                    lDataRoyal.Add("DG" + sepCampos + numeroAutorizacionTemporal + sepCampos + responseTwo.DatosAfiliado.ApellidoMaternoAfiliado + sepCampos + responseTwo.DatosAfiliado.ApellidoMaternoTitular + sepCampos + 
                                                        responseTwo.DatosAfiliado.ApellidoPaternoAfiliado + sepCampos + responseTwo.DatosAfiliado.ApellidoPaternoTitular + sepCampos + responseTwo.DatosAfiliado.CodEstado + sepCampos + responseTwo.DatosAfiliado.CodEstadoCivil + sepCampos +
                                                        responseTwo.DatosAfiliado.CodFechaActualizacionFoto + sepCampos + responseTwo.DatosAfiliado.CodGenero + sepCampos + responseTwo.DatosAfiliado.CodMoneda + sepCampos + responseTwo.DatosAfiliado.CodProducto + sepCampos + responseTwo.DatosAfiliado.CodTipoAfiliacion + sepCampos +
                                                        responseTwo.DatosAfiliado.CodTipoDocumentoAfiliado + sepCampos + responseTwo.DatosAfiliado.CodTipoDocumentoContratante + sepCampos + responseTwo.DatosAfiliado.CodTipoDocumentoTitular + sepCampos + responseTwo.DatosAfiliado.CodigoAfiliado + sepCampos +
                                                        responseTwo.DatosAfiliado.CodigoTitular + sepCampos + responseTwo.DatosAfiliado.DesEstado + sepCampos + responseTwo.DatosAfiliado.DesProducto + sepCampos + responseTwo.DatosAfiliado.Edad + sepCampos + responseTwo.DatosAfiliado.FechaFinVigencia + sepCampos +
                                                        responseTwo.DatosAfiliado.FechaInicioVigencia + sepCampos + responseTwo.DatosAfiliado.FechaNacimiento + sepCampos + responseTwo.DatosAfiliado.NombreContratante + sepCampos + responseTwo.DatosAfiliado.NombresAfiliado + sepCampos + responseTwo.DatosAfiliado.NombresTitular + sepCampos +
                                                        responseTwo.DatosAfiliado.NumeroCertificado + sepCampos + responseTwo.DatosAfiliado.NumeroDocumentoAfiliado + sepCampos + responseTwo.DatosAfiliado.NumeroDocumentoContratante + sepCampos + responseTwo.DatosAfiliado.NumeroDocumentoTitular + sepCampos + responseTwo.DatosAfiliado.NumeroPlan + sepCampos + responseTwo.DatosAfiliado.NumeroPoliza + sepCampos + "" + sepCampos + configIAFA/*preDatos.iafas*/ + sepCampos +
                                                        responseTwo.DatosAfiliado.CodParentesco + sepCampos + preDatos.rucClinica + sepCampos + responseTwo.DatosAfiliado.FechaAfiliacion + sepCampos + tarjeta + sepCampos + responseTwo.DatosAfiliado.NumeroContrato + sepCampos + cobertura.CondicionesEspeciales + sepCampos + cobertura.Observaciones + sepCampos + preDatos.idClinica);
                                                    //estados.insertOne = grabarGenerales;
                                                //}
                                                //catch (Exception ex)
                                                //{
                                                //    estados.insertOne = false;
                                                //}

                                                //try
                                                //{
                                                    Debug.WriteLine("Insert 2");
                                                    //Almacenanado cobertura acreditacion

                                                    //var grabarCoberturaAc = new RoyalDA().GrabarCoberturaAcreditacion(responseSeven.NumeroAutorizacion, cobertura.Beneficios, cobertura.CodIndicadorRestriccion, cobertura.BeneficioMaximoInicial,
                                                    //    cobertura.Observaciones, cobertura.CodigoTipoCobertura, cobertura.CodigoSubTipoCobertura, monto, cobertura.CodCopagoVariable, cobertura.CodCalificacionServicio, cobertura.CodTipoMoneda, configIAFA/*preDatos.iafas*/, preDatos.idClinica);
                                                    lDataRoyal.Add("CA" + sepCampos + responseSeven.NumeroAutorizacion + sepCampos + cobertura.Beneficios + sepCampos + cobertura.CodIndicadorRestriccion + sepCampos + cobertura.BeneficioMaximoInicial + sepCampos +
                                                        cobertura.Observaciones + sepCampos + cobertura.CodigoTipoCobertura + sepCampos + cobertura.CodigoSubTipoCobertura + sepCampos + monto + sepCampos + cobertura.CodCopagoVariable + sepCampos + cobertura.CodCalificacionServicio + sepCampos + cobertura.CodTipoMoneda + sepCampos + configIAFA/*preDatos.iafas*/ + sepCampos + preDatos.idClinica);
                                                    //estados.insertTwo = grabarCoberturaAc;
                                                //}
                                                //catch (Exception ex)
                                                //{
                                                //    estados.insertTwo = false;
                                                //}

                                                //try
                                                //{
                                                    Debug.WriteLine("Insert 3");
                                                    //Almacenanado Preexistencia

                                                    //Debug.WriteLine(JsonConvert.SerializeObject(responseFive).ToString());
                                                    if (responseFive.Preexistencia != null)
                                                    {
                                                        foreach (var pre in responseFive.Preexistencia.Condicion)
                                                        {
                                                            //var grabarPreexistencia = new RoyalDA().GrabarCondicionesMedicaPreexistencia(numeroAutorizacionTemporal, pre.Codigo, pre.Diagnostico, pre.Observaciones, configIAFA/*preDatos.iafas*/, preDatos.idClinica);
                                                            lDataRoyal.Add("CMP" + sepCampos + numeroAutorizacionTemporal + sepCampos + pre.Codigo + sepCampos + pre.Diagnostico + sepCampos + pre.Observaciones + sepCampos + configIAFA/*preDatos.iafas*/ + sepCampos + preDatos.idClinica);
                                                            //estados.insertThree = grabarPreexistencia;
                                                        }
                                                    }
                                                //}
                                                //catch (Exception ex)
                                                //{
                                                //    estados.insertThree = false;
                                                //}

                                                //try
                                                //{
                                                    Debug.WriteLine("Insert 4");
                                                    //Almacenanado Exclusiones

                                                    if (responseFive.Exclusiones != null)
                                                    {
                                                        foreach (var ex in responseFive.Exclusiones.Condicion)
                                                        {
                                                            //var grabarExclusion = new RoyalDA().GrabarCondicionesMedicaExclusiones(numeroAutorizacionTemporal, ex.Codigo, ex.Diagnostico, ex.Observaciones, configIAFA/*preDatos.iafas*/, preDatos.idClinica);
                                                            lDataRoyal.Add("CMEX" + sepCampos + numeroAutorizacionTemporal + sepCampos + ex.Codigo + sepCampos + ex.Diagnostico + sepCampos + ex.Observaciones + sepCampos + configIAFA/*preDatos.iafas*/ + sepCampos + preDatos.idClinica);
                                                            //estados.insertFour = grabarExclusion;
                                                        }
                                                    }
                                                //}
                                                //catch (Exception ex)
                                                //{
                                                //    estados.insertFour = false;
                                                //}

                                                //try
                                                //{
                                                    Debug.WriteLine("Insert 5");
                                                    //Almacenanado Carencias

                                                    if (responseFive.Carencia != null)
                                                    {
                                                        foreach (var car in responseFive.Carencia.Condicion)
                                                        {
                                                            //var grabarCarencia = new RoyalDA().GrabarCondicionesMedicaCarencia(numeroAutorizacionTemporal, car.Codigo, car.Diagnostico, car.Observaciones, configIAFA/*preDatos.iafas*/, preDatos.idClinica);                                                            
                                                            lDataRoyal.Add("CMC" + sepCampos + numeroAutorizacionTemporal + sepCampos + car.Codigo + sepCampos + car.Diagnostico + sepCampos + car.Observaciones + sepCampos + configIAFA/*preDatos.iafas*/ + sepCampos + preDatos.idClinica);
                                                            //estados.insertFive = grabarCarencia;
                                                        }
                                                    }
                                                //}
                                                //catch (Exception ex)
                                                //{
                                                //    estados.insertFive = false;
                                                //}

                                                //try
                                                //{
                                                    Debug.WriteLine("Insert 6");
                                                    //Almacenanado Antecedentes

                                                    if (responseFive.Antecedentes != null)
                                                    {
                                                        foreach (var ant in responseFive.Antecedentes.Condicion)
                                                        {
                                                            //var grabarAntecedente = new RoyalDA().GrabarCondicionesMedicaAntecedentes(numeroAutorizacionTemporal, ant.Codigo, ant.Diagnostico, ant.Observaciones, configIAFA/*preDatos.iafas*/, preDatos.idClinica);
                                                            lDataRoyal.Add("CMA" + sepCampos + numeroAutorizacionTemporal + sepCampos + ant.Codigo + sepCampos + ant.Diagnostico + sepCampos + ant.Observaciones + sepCampos + configIAFA/*preDatos.iafas*/ + sepCampos + preDatos.idClinica);
                                                            //estados.insertSix = grabarAntecedente;
                                                        }
                                                    }
                                                //}
                                                //catch (Exception ex)
                                                //{
                                                //    estados.insertSix = false;
                                                //}


                                                //try
                                                //{
                                                    Debug.WriteLine("Insert 7");
                                                    //Almacenando Enfermedad
                                                    if (responseFive.Enfermedad != null)
                                                    {
                                                        foreach (var enf in responseFive.Enfermedad.Condicion)
                                                        {
                                                            //var grabarEnfermedad = new RoyalDA().GrabarCondicionesMedicaEnfermedad(numeroAutorizacionTemporal, enf.Codigo, enf.Diagnostico, enf.Observaciones, configIAFA/*preDatos.iafas*/, preDatos.idClinica);
                                                            lDataRoyal.Add("CME" + sepCampos + numeroAutorizacionTemporal + sepCampos + enf.Codigo + sepCampos + enf.Diagnostico + sepCampos + enf.Observaciones + sepCampos + configIAFA/*preDatos.iafas*/ + sepCampos + preDatos.idClinica);
                                                            //estados.insertSeven = grabarEnfermedad;
                                                        }
                                                    }
                                                //}
                                                //catch (Exception ex)
                                                //{
                                                //    estados.insertSeven = false;
                                                //}

                                                //try
                                                //{
                                                    Debug.WriteLine("Insert 8");
                                                    //Almacenando Excepcion Car

                                                    if (responseEight.ExcepcionCarencia != null)
                                                    {
                                                        foreach (var exc in responseEight.ExcepcionCarencia.Detalle)
                                                        {
                                                            //var grabarExc = new RoyalDA().GrabarExcepcionCarencia(numeroAutorizacionTemporal, cobertura.CodigoTipoCobertura, cobertura.CodigoSubTipoCobertura, exc.Codigo, exc.GrupoDiagnostico, exc.Observaciones, configIAFA/*preDatos.iafas*/, preDatos.idClinica);
                                                            lDataRoyal.Add("EC" + sepCampos + numeroAutorizacionTemporal + sepCampos + cobertura.CodigoTipoCobertura + sepCampos + cobertura.CodigoSubTipoCobertura + sepCampos + exc.Codigo + sepCampos + exc.GrupoDiagnostico + sepCampos + exc.Observaciones + sepCampos + configIAFA/*preDatos.iafas*/ + sepCampos + preDatos.idClinica);
                                                            //estados.insertEigth = grabarExc;
                                                        }
                                                    }
                                                //}
                                                //catch (Exception ex)
                                                //{
                                                //    estados.insertEigth = false;
                                                //}

                                                //try
                                                //{
                                                    Debug.WriteLine("Insert 9");
                                                    // Almacenando Procedimientos

                                                    if (responseEight.Procedimiento != null)
                                                    {
                                                        foreach (var pr in responseEight.Procedimiento.Detalle)
                                                        {
                                                            //var grabarProc = new RoyalDA().GrabarProcedimientos(numeroAutorizacionTemporal, cobertura.CodigoTipoCobertura, cobertura.CodigoSubTipoCobertura, pr.Codigo, pr.Procedimiento, pr.Genero, pr.CodCopagoFijo
                                                            //    , pr.CodCopagoVariable, pr.Frecuencia, pr.Tiempo, pr.Observaciones, configIAFA/*preDatos.iafas*/, preDatos.idClinica);
                                                            lDataRoyal.Add("P" + sepCampos + numeroAutorizacionTemporal + sepCampos + cobertura.CodigoTipoCobertura + sepCampos + cobertura.CodigoSubTipoCobertura + sepCampos + pr.Codigo + sepCampos + pr.Procedimiento + sepCampos + pr.Genero + sepCampos + pr.CodCopagoFijo + sepCampos + 
                                                                 pr.CodCopagoVariable + sepCampos + pr.Frecuencia + sepCampos + pr.Tiempo + sepCampos + pr.Observaciones + sepCampos + configIAFA/*preDatos.iafas*/ + sepCampos + preDatos.idClinica);
                                                            //estados.insertNine = grabarProc;
                                                        }
                                                    }
                                                //}
                                                //catch (Exception ex)
                                                //{
                                                //    estados.insertNine = false;
                                                //}

                                                //try
                                                //{
                                                    Debug.WriteLine("Insert 10");
                                                    // Almacenando Tiempo Espera

                                                    if (responseEight.TiempoEspera != null)
                                                    {
                                                        foreach (var tm in responseEight.TiempoEspera.Detalle)
                                                        {
                                                            //var grabarTiempo = new RoyalDA().GrabarTiempoEspera(numeroAutorizacionTemporal, cobertura.CodigoTipoCobertura, cobertura.CodigoSubTipoCobertura, tm.Codigo, tm.GrupoDiagnostico, tm.Observaciones, configIAFA/*preDatos.iafas*/, preDatos.idClinica);
                                                            lDataRoyal.Add("TE" + sepCampos + numeroAutorizacionTemporal + sepCampos + cobertura.CodigoTipoCobertura + sepCampos + cobertura.CodigoSubTipoCobertura + sepCampos + tm.Codigo + sepCampos + tm.GrupoDiagnostico + sepCampos + tm.Observaciones + sepCampos + configIAFA/*preDatos.iafas*/ + sepCampos + preDatos.idClinica);
                                                            //estados.insertTen = grabarTiempo;
                                                        }
                                                    }
                                                //}
                                                //catch (Exception ex)
                                                //{
                                                //    estados.insertTen = false;
                                                //}
                                            }
                                        }
                                    }
                                    indiceCobertura++;
                                }
                                //fnRegistrarCitaLog(idCita, "", "13 - Fin de iteración de Coberturas (" + lbeCobertura.Count.ToString() + ")", "");
                                lLog.Add("LOG" + sepCampos + idCita + sepCampos + "" + sepCampos + ("13 - Fin de iteración de Coberturas (" + lbeCobertura.Count.ToString() + ")") + sepCampos + "" + sepCampos + "");
                                //if (String.IsNullOrEmpty(numeroAutorizacionCabecera))
                                //{
                                //    numeroAutorizacionCabecera = numeroAutorizacionFarmacia;
                                //}

                                if (!String.IsNullOrEmpty(numeroAutorizacionCabecera))
                                {
                                    //GrabarTransaccion 1
                                    //var grabarTranc = new RoyalDA().GrabarTransaccion(numeroAutorizacionCabecera, preDatos.sucursal, preDatos.tipoSeguro, preDatos.idPaciente, preDatos.idAseguradora, preDatos.idCitaSpring, configIAFA/*preDatos.iafas*/, (preDatos.deseaBoleta) ? "BV" : "FA", "", "", tipoTarjeta, tarjeta, preDatos.monto, preDatos.firma, preDatos.tipo, preDatos.idClinica, (preDatos.hoy) ? 1 : 0, preDatos.ruc, preDatos.razonsocial, preDatos.direccion, preDatos.email, preDatos.numeroOperacion, numeroAutorizacionFarmacia, preDatos.tipoPaciente,
                                    //    preDatos.tipoDocumentoBoleta, preDatos.numeroDocumentoBoleta, preDatos.nombresBoleta, preDatos.apellidoPaternoBoleta,
                                    //    preDatos.apellidoMaternoBoleta, preDatos.direccionBoleta, preDatos.fechaNacimientoBoleta, preDatos.celularBoleta,
                                    //    preDatos.emailBoleta, preDatos.codigoParentesco, preDatos.codigoAfiliado,
                                    //    preDatos.tipoDocumentoContratante, preDatos.numeroDocumentoContratante, idCita);//se agrero entidades 16042021
                                    lDataRoyal.Add("SCT" + sepCampos + numeroAutorizacionCabecera + sepCampos + preDatos.sucursal + sepCampos + preDatos.tipoSeguro + sepCampos + preDatos.idPaciente + sepCampos + preDatos.idAseguradora + sepCampos + preDatos.idCitaSpring + sepCampos + configIAFA/*preDatos.iafas*/ + sepCampos + (preDatos.deseaBoleta ? "BV" : "FA") + sepCampos + "" + sepCampos + "" + sepCampos + tipoTarjeta + sepCampos + tarjeta + sepCampos + preDatos.monto + sepCampos + preDatos.firma + sepCampos + preDatos.tipo + sepCampos + preDatos.idClinica.ToString() + sepCampos + (preDatos.hoy ? 1 : 0).ToString() + sepCampos + preDatos.ruc + sepCampos + preDatos.razonsocial + sepCampos + preDatos.direccion + sepCampos + preDatos.email + sepCampos + preDatos.numeroOperacion + sepCampos + numeroAutorizacionFarmacia + sepCampos + preDatos.tipoPaciente + sepCampos +
                                        preDatos.tipoDocumentoBoleta + sepCampos + preDatos.numeroDocumentoBoleta + sepCampos + preDatos.nombresBoleta + sepCampos + preDatos.apellidoPaternoBoleta + sepCampos +
                                        preDatos.apellidoMaternoBoleta + sepCampos + preDatos.direccionBoleta + sepCampos + preDatos.fechaNacimientoBoleta + sepCampos + preDatos.celularBoleta + sepCampos +
                                        preDatos.emailBoleta + sepCampos + preDatos.codigoParentesco + sepCampos + preDatos.codigoAfiliado + sepCampos +
                                        preDatos.tipoDocumentoContratante + sepCampos + preDatos.numeroDocumentoContratante + sepCampos + idCita);
                                    //estados.insertTranc = grabarTranc;

                                    string estadoString = JsonConvert.SerializeObject(estados).ToString();
                                    //var grabarLog = new CitaDA().LogInserccionRoyal(idCita, estadoString, numeroAutorizacionCabecera, null, numeroAutorizacionFarmacia);
                                    lLogRoyal.Add("LOGR" + sepCampos + idCita + sepCampos + estadoString + sepCampos + numeroAutorizacionCabecera + sepCampos + "" + sepCampos + numeroAutorizacionFarmacia + sepCampos + "");
                                }
                                else
                                {
                                    //fnRegistrarCitaLog(idCita, "No puede generar autorización SITEDS - 03", JsonConvert.SerializeObject(rqstSeven).ToString(), rptaTaskSeven);
                                    lLog.Add("LOG" + sepCampos + idCita + sepCampos + "No puede generar autorización SITEDS - 03" + sepCampos + JsonConvert.SerializeObject(rqstSeven).ToString() + sepCampos + rptaTaskSeven + sepCampos + "");
                                }
                            }

                        }

                        //fnRegistrarCitaLog(idCita, "", "14 - Fin de consulta SITEDS", "");
                        lLog.Add("LOG" + sepCampos + idCita + sepCampos + "" + sepCampos + "14 - Fin de consulta SITEDS" + sepCampos + "" + sepCampos + "");

                        flgRpta = true;

                    }
                    else
                    {

                        //GrabarTransaccion 2
                        //var grabarTranc = new RoyalDA().GrabarTransaccion(responseSeven.NumeroAutorizacion, preDatos.sucursal, preDatos.tipoSeguro, preDatos.idPaciente, preDatos.idAseguradora, preDatos.idCitaSpring, preDatos.iafas, (preDatos.deseaBoleta) ? "BV" : "FA", "", "", tipoTarjeta, tarjeta, preDatos.monto, preDatos.firma, preDatos.tipo, preDatos.idClinica, (preDatos.hoy) ? 1 : 0, preDatos.ruc, preDatos.razonsocial, preDatos.direccion, preDatos.email, preDatos.numeroOperacion, "", preDatos.tipoPaciente,
                        //                preDatos.tipoDocumentoBoleta, preDatos.numeroDocumentoBoleta, preDatos.nombresBoleta, preDatos.apellidoPaternoBoleta,
                        //                preDatos.apellidoMaternoBoleta, preDatos.direccionBoleta, preDatos.fechaNacimientoBoleta, preDatos.celularBoleta,
                        //                preDatos.emailBoleta, preDatos.codigoParentesco, preDatos.codigoAfiliado,
                        //                preDatos.tipoDocumentoContratante, preDatos.numeroDocumentoContratante, idCita);//se agrero entidades 16042021
                        lDataRoyal.Add("SCT" + sepCampos + responseSeven.NumeroAutorizacion + sepCampos + preDatos.sucursal + sepCampos + preDatos.tipoSeguro + sepCampos + preDatos.idPaciente + sepCampos + preDatos.idAseguradora + sepCampos + preDatos.idCitaSpring + sepCampos + preDatos.iafas + sepCampos + (preDatos.deseaBoleta ? "BV" : "FA") + sepCampos + "" + sepCampos + "" + sepCampos + tipoTarjeta + sepCampos + tarjeta + sepCampos + preDatos.monto + sepCampos + preDatos.firma + sepCampos + preDatos.tipo + sepCampos + preDatos.idClinica.ToString() + sepCampos + (preDatos.hoy ? 1 : 0).ToString() + sepCampos + preDatos.ruc + sepCampos + preDatos.razonsocial + sepCampos + preDatos.direccion + sepCampos + preDatos.email + sepCampos + preDatos.numeroOperacion + sepCampos + "" + sepCampos + preDatos.tipoPaciente + sepCampos +
                                        preDatos.tipoDocumentoBoleta + sepCampos + preDatos.numeroDocumentoBoleta + sepCampos + preDatos.nombresBoleta + sepCampos + preDatos.apellidoPaternoBoleta + sepCampos +
                                        preDatos.apellidoMaternoBoleta + sepCampos + preDatos.direccionBoleta + sepCampos + preDatos.fechaNacimientoBoleta + sepCampos + preDatos.celularBoleta + sepCampos +
                                        preDatos.emailBoleta + sepCampos + preDatos.codigoParentesco + sepCampos + preDatos.codigoAfiliado + sepCampos +
                                        preDatos.tipoDocumentoContratante + sepCampos + preDatos.numeroDocumentoContratante + sepCampos + idCita);

                        //estados.insertTranc = grabarTranc;
                        estados.idCitaConSeguro = false;
                        string estadoString = JsonConvert.SerializeObject(estados).ToString();
                        //var grabarLog = new CitaDA().LogInserccionRoyal(idCita, estadoString, null, null);
                        lLogRoyal.Add("LOGR" + sepCampos + idCita + sepCampos + estadoString + sepCampos + "" + sepCampos + "" + sepCampos + "" + sepCampos + "");
                        //fnRegistrarCitaLog(idCita, "", "14 - Fin de consulta SITEDS", "No hubo código de producto para consultar SITEDS");
                        lLog.Add("LOG" + sepCampos + idCita + sepCampos + "" + sepCampos + "14 - Fin de consulta SITEDS" + sepCampos + "No hubo código de producto para consultar SITEDS" + sepCampos + "");
                        flgRpta = false;
                    }
                }
                catch (Exception ex)
                {
                    string estadoString = JsonConvert.SerializeObject(estados).ToString();
                    //var grabarLog = new CitaDA().LogInserccionRoyal(idCita, estadoString, null, ex.Message);
                    lLogRoyal.Add("LOGR" + sepCampos + idCita + sepCampos + estadoString + sepCampos + "" + sepCampos + ex.Message + sepCampos + "" + sepCampos + "");
                    Debug.WriteLine(ex.Message);
                    flgRpta = false;
                }
                finally
                {
                    //SE INSERTA LOS REGISTROS DE LOG E INTERMEDIAS EN EL SERVICIO DE INTRANET
                    var oRequest3 = new
                    {
                        strLog = string.Join("¬", lLog.ToArray()),
                        strDataRoyal = string.Join("¬", lDataRoyal.ToArray()),
                        strLogRoyal = string.Join("¬", lLogRoyal.ToArray())
                    };
                    string strRequest3 = new JavaScriptSerializer().Serialize(oRequest3);
                    string response3 = ClasesGenericas.PostAsyncIntranet("Cita.svc/RegistrarRoyal/", strRequest3, ClasesGenericas.GetHeader(WebOperationContext.Current.IncomingRequest.Headers, "token"));
                    RespuestaSimpleBE varRespuesta3 = new JavaScriptSerializer().Deserialize<RespuestaSimpleBE>(response3);
                }
            }
            return flgRpta;
        }
        public RespuestaSimpleBE RegistroPagoRoyalVirtual(string idCita, string firma)
        {
            RespuestaSimpleBE varRespuesta;
            try
            {
                var oRequest = new
                {
                    idCita = idCita,
                    canal = firma
                };
                string strRequest = new JavaScriptSerializer().Serialize(oRequest);
                string response = ClasesGenericas.PostAsyncIntranet("Cita.svc/RegistroPagoRoyalVirtual/", strRequest, ClasesGenericas.GetHeader(WebOperationContext.Current.IncomingRequest.Headers, "token"));
                varRespuesta = new JavaScriptSerializer().Deserialize<RespuestaSimpleBE>(response);

                if (varRespuesta == null)
                {
                    return new RespuestaSimpleBE()
                    {
                        rpt = -1,
                        mensaje = "No se logró procesar la solicitud",
                        data = null
                    };
                }
            }
            catch (Exception ex)
            {
                return ClasesGenericas.RegistrarErrorIntranet(ex, "WS", "Cita.svc");
            }
            return varRespuesta;
        }
        public RespuestaSimpleBE RegistrarPagoCitaMontoCero(string idCitaPresencial, string idCita)
        {
            try
            {
                string codigo = "000";

                var id = (String.IsNullOrEmpty(idCitaPresencial)) ? idCita : idCitaPresencial;
                var tipo = (String.IsNullOrEmpty(idCitaPresencial)) ? 2 : 1;
                //DateTime now = DateTime.Now;
                //string Archivo = $"{"RegistrarPagoCitaMontoCero"}_{now.Year}_{now.Month.ToString().PadLeft(2, '0')}_{now.Day.ToString().PadLeft(2, '0')}{".txt"}";
                //string rutaArchivo = string.Format("{0}{1}", ConfigurationManager.AppSettings["LogCitaBDSpring"], Archivo);
                //string nombreArchivo = "";
                //using (FileStream stream = new FileStream(rutaArchivo + nombreArchivo, FileMode.Append, FileAccess.Write, FileShare.Write))
                //{
                //    using (StreamWriter streamWriter = new StreamWriter(stream, Encoding.Default))
                //    {
                //        streamWriter.WriteLine("idCitaPresencial = " + idCitaPresencial);
                //        streamWriter.WriteLine("idCita = " + id);
                //        streamWriter.WriteLine("tipo = " + tipo.ToString());
                //        streamWriter.WriteLine(new string('_', 50));
                //    }
                //}
                bool pagoRoyal = false;
                RespuestaSimpleBE pagoRoyalSimple = new RespuestaSimpleBE();
                if (codigo == "000")
                {
                    string numeroTarjeta = "";
                    string tipoTarjeta = "";
                    string firma = "";
                    if (tipo == 1) pagoRoyal = RegistroPagoRoyal(id, numeroTarjeta, tipoTarjeta, tipo);
                    else if (tipo == 2) pagoRoyalSimple = RegistroPagoRoyalVirtual(id, firma);

                }
                if (pagoRoyalSimple.rpt == 0)
                {
                    return new RespuestaSimpleBE()
                    {
                        rpt = 0,
                        mensaje = "Success",
                        data = "true"
                    };
                }
                else
                {
                    return new RespuestaSimpleBE()
                    {
                        rpt = 1,
                        mensaje = "Error, por favor comunicarse con soporte",
                        data = "False"
                    };
                }
            }
            catch (Exception ex)
            {
                //DateTime now = DateTime.Now;
                //string Archivo = $"{"ErrorRegistrarPagoCitaMontoCero"}_{now.Year}_{now.Month.ToString().PadLeft(2, '0')}_{now.Day.ToString().PadLeft(2, '0')}{".txt"}";
                //string rutaArchivo = string.Format("{0}{1}", ConfigurationManager.AppSettings["LogCitaBDSpring"], Archivo);
                //string nombreArchivo = "";
                //using (FileStream stream = new FileStream(rutaArchivo + nombreArchivo, FileMode.Append, FileAccess.Write, FileShare.Write))
                //{
                //    using (StreamWriter streamWriter = new StreamWriter(stream, Encoding.Default))
                //    {
                //        streamWriter.WriteLine("mensaje = " + ex.Message);
                //        streamWriter.WriteLine("StackTrace = " + ex.StackTrace);
                //        streamWriter.WriteLine(new string('_', 50));
                //    }
                //}
                //return new ErrorDA().RegistrarError(ex, "WS", "Cita.svc");
                return ClasesGenericas.RegistrarErrorIntranet(ex, "WS", "Cita.svc");
            }
        }
        public RespuestaBE<TokenIzipayBE> ObtenerTokenPagoIzipayOld(
                string idCitaPresencial, string idCita, string canal,
                string ruc, int formTokenVersion, string idCobertura,
                string monto, string origenMonto, string fechaPago,
                string codigoProducto, string IAFAS, string codigoParentesco,
                string codigoAfiliado, string tipoDocumentoContratante, string numeroDocumentoContratante,
                string deseaBoleta, string rucFactura, string razonSocialFactura, string direccionFactura,
                string tipoDocumentoBoleta, string numeroDocumentoBoleta, string nombresBoleta,
                string apellidoPaternoBoleta, string apellidoMaternoBoleta, string direccionBoleta,
                string fechaNacimientoBoleta, string celularBoleta, string emailBoleta,
                string origen)
        {
            #region Validacion de Parámetros
            int varIDCita;
            if (!string.IsNullOrEmpty(idCitaPresencial))
            {
                if (!int.TryParse(idCitaPresencial, out varIDCita))
                {
                    return new RespuestaBE<TokenIzipayBE>()
                    {
                        rpt = 101,
                        mensaje = "El parámetro idCita debe ser numérico",
                        data = null
                    };
                }
            }
            if (!string.IsNullOrEmpty(idCita))
            {
                if (!int.TryParse(idCita, out varIDCita))
                {
                    return new RespuestaBE<TokenIzipayBE>()
                    {
                        rpt = 101,
                        mensaje = "El parámetro idCitaVirtual debe ser numérico",
                        data = null
                    };
                }
            }
            #endregion
            RespuestaBE<TokenIzipayBE> varRespuesta = new RespuestaBE<TokenIzipayBE>();
            try
            {
                string serializedResult = "", responseWS = "";
                TokenIzipayBE oTokenIzipayBE = new TokenIzipayBE();
                oTokenIzipayBE.token = "";

                var oRequest = new
                {
                    idCitaPresencial = idCitaPresencial,
                    idCita = idCita,
                    canal = canal,
                    ruc = ruc,
                    formTokenVersion = formTokenVersion,
                    idCobertura = idCobertura,
                    monto = monto,
                    origenMonto = origenMonto,
                    fechaPago = fechaPago,
                    codigoProducto = codigoProducto,
                    IAFAS = IAFAS,
                    codigoParentesco = codigoParentesco,
                    codigoAfiliado = codigoAfiliado,
                    tipoDocumentoContratante = tipoDocumentoContratante,
                    numeroDocumentoContratante = numeroDocumentoContratante,
                    deseaBoleta = deseaBoleta,
                    rucFactura = rucFactura,
                    razonSocialFactura = razonSocialFactura,
                    direccionFactura = direccionFactura,
                    tipoDocumentoBoleta = tipoDocumentoBoleta,
                    numeroDocumentoBoleta = numeroDocumentoBoleta,
                    nombresBoleta = nombresBoleta,
                    apellidoPaternoBoleta = apellidoPaternoBoleta,
                    apellidoMaternoBoleta = apellidoMaternoBoleta,
                    direccionBoleta = direccionBoleta,
                    fechaNacimientoBoleta = fechaNacimientoBoleta,
                    celularBoleta = celularBoleta,
                    emailBoleta = emailBoleta,
                    origen = origen
                };
                string strRequest = new JavaScriptSerializer().Serialize(oRequest);
                string response = ClasesGenericas.PostAsyncIntranet("Cita.svc/ObtenerTokenPagoIzipay/", strRequest, ClasesGenericas.GetHeader(WebOperationContext.Current.IncomingRequest.Headers, "token"));
                RespuestaBE<DatosPagoIzipayBE> varRespuesta2 = new JavaScriptSerializer().Deserialize<RespuestaBE<DatosPagoIzipayBE>>(response);

                if (varRespuesta2 == null)
                {
                    return new RespuestaBE<TokenIzipayBE>()
                    {
                        rpt = -1,
                        mensaje = "No se logró procesar la solicitud",
                        data = null
                    };
                }

                if (varRespuesta2.rpt != 0)
                {
                    return new RespuestaBE<TokenIzipayBE>()
                    {
                        rpt = varRespuesta2.rpt,
                        mensaje = varRespuesta2.mensaje,
                        data = null
                    };
                }

                DatosPagoIzipayBE oDatosPagoBE = varRespuesta2.data;

                CookieContainer cookies = new CookieContainer();
                HttpClientHandler handler = new HttpClientHandler();

                handler.CookieContainer = cookies;
                handler.UseCookies = true;
                handler.AllowAutoRedirect = true;

                using (var client = new HttpClient(handler))
                {
                    try
                    {
                        client.DefaultRequestHeaders.Add("User-Agent", "Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36");
                        client.DefaultRequestHeaders.Add("accept", "*/*");
                        client.DefaultRequestHeaders.Add("Connection", "keep-alive");


                        string credentials = Convert.ToBase64String(Encoding.ASCII.GetBytes(oDatosPagoBE.user + ":" + oDatosPagoBE.password));
                        client.DefaultRequestHeaders.Add("Authorization", "Basic " + credentials);

                        System.Net.ServicePointManager.ServerCertificateValidationCallback = (object se, System.Security.Cryptography.X509Certificates.X509Certificate cert, System.Security.Cryptography.X509Certificates.X509Chain chain, System.Net.Security.SslPolicyErrors sslerror) => true;
                        System.Net.ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls;

                        string url = oDatosPagoBE.merchant;

                        var datos = new Dictionary<string, object>();
                        datos["email"] = oDatosPagoBE.correo;
                        datos["reference"] = oDatosPagoBE.tokenEmail;//es el dni paciente

                        var infoCliente = new Dictionary<string, string>();
                        infoCliente["firstName"] = oDatosPagoBE.nombreCompletoPaciente;
                        infoCliente["lastName"] = oDatosPagoBE.apellidoCompletoPaciente;
                        infoCliente["address"] = oDatosPagoBE.direccionPaciente;
                        infoCliente["streetNumber"] = oDatosPagoBE.numeroDireccionPaciente;
                        infoCliente["phoneNumber"] = oDatosPagoBE.telefono;


                        datos["billingDetails"] = infoCliente;

                        int montoIzipay = 0;
                        if (oDatosPagoBE.monto.IndexOf(".") > -1)
                        {
                            montoIzipay = int.Parse(oDatosPagoBE.monto.Replace(".", ""));
                        }
                        else
                        {
                            montoIzipay = int.Parse(oDatosPagoBE.monto + "00");
                        }

                        izipay o = new izipay();
                        o.amount = montoIzipay;
                        o.currency = "PEN";
                        o.orderId = oDatosPagoBE.idCita;//(!string.IsNullOrEmpty(idCitaPresencial) && string.IsNullOrEmpty(idCita) ? idCitaPresencial : idCita); //2023-06-05 => Se modificó para que en la IPN se pueda obtener el idCita de la tabla Cita
                        o.formTokenVersion = formTokenVersion;

                        o.customer = datos;

                        var serializer = new JavaScriptSerializer();
                        serializedResult = serializer.Serialize(o);

                        HttpResponseMessage result = client.PostAsync(new Uri(url), new StringContent(serializedResult, Encoding.UTF8, "application/json")).Result;
                        if (result.IsSuccessStatusCode)
                        {
                            responseWS = result.Content.ReadAsStringAsync().Result;

                            if (!String.IsNullOrEmpty(responseWS))
                            {

                                dynamic obj = serializer.Deserialize<object>(responseWS);

                                if (!String.IsNullOrEmpty(obj["status"]) && obj["status"] == "SUCCESS")
                                {
                                    oTokenIzipayBE.token = obj["answer"]["formToken"];
                                }
                            }

                        }

                    }
                    catch (Exception e)
                    {
                        GrabarLog(e.Message, "WS", "Cita.svc/ObtenerTokenPagoIzipay", e.StackTrace, serializedResult);
                        //RespuestaBE<TokenIzipayBE> er = new ErrorDA().RegistrarError<TokenIzipayBE>(e, "WS", "Cita.svc");
                        RespuestaBE<TokenIzipayBE> er = ClasesGenericas.RegistrarErrorIntranet<TokenIzipayBE>(e, "WS", "Cita.svc");
                        return new RespuestaBE<TokenIzipayBE>()
                        {
                            rpt = 101,
                            mensaje = "Error al obtener token izipay",
                            data = null
                        };

                    }

                }
                if (String.IsNullOrEmpty(oTokenIzipayBE.token))
                {
                    GrabarLog("Valor de token de pago no proporcionado por Izipay", "WS", "Cita.svc/ObtenerTokenPagoIzipay", responseWS, serializedResult);
                    return new RespuestaBE<TokenIzipayBE>()
                    {
                        rpt = 101,
                        mensaje = "Valor de token de pago no proporcionado por Izipay",
                        data = null
                    };
                }

                varRespuesta = new RespuestaBE<TokenIzipayBE>()
                {
                    rpt = 0,
                    mensaje = "",
                    data = oTokenIzipayBE
                };
            }
            catch (Exception ex)
            {
                //return new ErrorDA().RegistrarError<TokenIzipayBE>(ex, "WS", "Cita.svc");
                return ClasesGenericas.RegistrarErrorIntranet<TokenIzipayBE>(ex, "WS", "Cita.svc");
            }
            return varRespuesta;
        }
        public RespuestaBE<TokenIzipayBE> ObtenerTokenPagoIzipay(
                string idCitaPresencial, string idCita, string canal,
                string ruc, int formTokenVersion, string idCobertura,
                string monto, string origenMonto, string fechaPago,
                string codigoProducto, string IAFAS, string codigoParentesco,
                string codigoAfiliado, string tipoDocumentoContratante, string numeroDocumentoContratante,
                string deseaBoleta, string rucFactura, string razonSocialFactura, string direccionFactura,
                string tipoDocumentoBoleta, string numeroDocumentoBoleta, string nombresBoleta,
                string apellidoPaternoBoleta, string apellidoMaternoBoleta, string direccionBoleta,
                string fechaNacimientoBoleta, string celularBoleta, string emailBoleta,
                string origen, string tipoDocumentoUsuario, string numeroDocumentoUsuario,
                string tokenTarjeta, string merchantBuyerId)
        {
            //Nueva pasarela de pago de Izipay
            #region Validacion de Parámetros
            int varIDCita;
            if (!string.IsNullOrEmpty(idCitaPresencial))
            {
                if (!int.TryParse(idCitaPresencial, out varIDCita))
                {
                    return new RespuestaBE<TokenIzipayBE>()
                    {
                        rpt = 101,
                        mensaje = "El parámetro idCita debe ser numérico",
                        data = null
                    };
                }
            }
            if (!string.IsNullOrEmpty(idCita))
            {
                if (!int.TryParse(idCita, out varIDCita))
                {
                    return new RespuestaBE<TokenIzipayBE>()
                    {
                        rpt = 101,
                        mensaje = "El parámetro idCitaVirtual debe ser numérico",
                        data = null
                    };
                }
            }
            #endregion
            RespuestaBE<TokenIzipayBE> varRespuesta = new RespuestaBE<TokenIzipayBE>();
            try
            {
                string serializedResult = "", responseWS = "";
                TokenIzipayBE oTokenIzipayBE = new TokenIzipayBE();
                oTokenIzipayBE.token = "";

                var oRequest = new
                {
                    idCitaPresencial = idCitaPresencial,
                    idCita = idCita,
                    canal = canal,
                    ruc = ruc,
                    formTokenVersion = formTokenVersion,
                    idCobertura = idCobertura,
                    monto = monto,
                    origenMonto = origenMonto,
                    fechaPago = fechaPago,
                    codigoProducto = codigoProducto,
                    IAFAS = IAFAS,
                    codigoParentesco = codigoParentesco,
                    codigoAfiliado = codigoAfiliado,
                    tipoDocumentoContratante = tipoDocumentoContratante,
                    numeroDocumentoContratante = numeroDocumentoContratante,
                    deseaBoleta = deseaBoleta,
                    rucFactura = rucFactura,
                    razonSocialFactura = razonSocialFactura,
                    direccionFactura = direccionFactura,
                    tipoDocumentoBoleta = tipoDocumentoBoleta,
                    numeroDocumentoBoleta = numeroDocumentoBoleta,
                    nombresBoleta = nombresBoleta,
                    apellidoPaternoBoleta = apellidoPaternoBoleta,
                    apellidoMaternoBoleta = apellidoMaternoBoleta,
                    direccionBoleta = direccionBoleta,
                    fechaNacimientoBoleta = fechaNacimientoBoleta,
                    celularBoleta = celularBoleta,
                    emailBoleta = emailBoleta,
                    origen = origen,
                    tipoDocumentoUsuario = tipoDocumentoUsuario,
                    numeroDocumentoUsuario = numeroDocumentoUsuario,
                    tokenTarjeta = tokenTarjeta,
                    merchantBuyerId = merchantBuyerId
                };
                string strRequest = new JavaScriptSerializer().Serialize(oRequest);
                string response = ClasesGenericas.PostAsyncIntranet("Cita.svc/ObtenerTokenPagoIzipay/", strRequest, ClasesGenericas.GetHeader(WebOperationContext.Current.IncomingRequest.Headers, "token"));
                RespuestaBE<DatosPagoIzipayBE> varRespuesta2 = new JavaScriptSerializer().Deserialize<RespuestaBE<DatosPagoIzipayBE>>(response);

                if (varRespuesta2 == null)
                {
                    return new RespuestaBE<TokenIzipayBE>()
                    {
                        rpt = -1,
                        mensaje = "No se logró procesar la solicitud",
                        data = null
                    };
                }
                if (varRespuesta2.rpt != 0)
                {
                    return new RespuestaBE<TokenIzipayBE>()
                    {
                        rpt = varRespuesta2.rpt,
                        mensaje = varRespuesta2.mensaje,
                        data = null
                    };
                }

                DatosPagoIzipayBE oDatosPagoBE = varRespuesta2.data;

                if (!string.IsNullOrEmpty(tipoDocumentoUsuario) &&  !string.IsNullOrEmpty(numeroDocumentoUsuario))
                {
                    //Nueva pasarela
                    System.Net.ServicePointManager.ServerCertificateValidationCallback = (object se, System.Security.Cryptography.X509Certificates.X509Certificate cert, System.Security.Cryptography.X509Certificates.X509Chain chain, System.Net.Security.SslPolicyErrors sslerror) => true;
                    System.Net.ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls;

                    string montoIzipay = oDatosPagoBE.monto,
                        requestSource = oDatosPagoBE.requestSource,
                        merchantCode = oDatosPagoBE.merchantCode,
                        publicKey = oDatosPagoBE.publicKey,
                        url = oDatosPagoBE.urlToken;//"https://sandbox-api-pw.izipay.pe/security/v1/Token/Generate";

                    #region Ambiente temporal
                    //using (var client = new HttpClient())
                    //{
                    //    //client.BaseAddress = new Uri(@"http://localhost:63091/");
                    //    client.BaseAddress = new Uri(@"https://roews.softvanperu.com/APP_DEMO_IZIPAY/");
                    //    var oRequest2 = new
                    //    {
                    //        urlToken = url,
                    //        requestSource = requestSource,
                    //        merchantCode = merchantCode,
                    //        orderNumber = oDatosPagoBE.purchaseNumber,//oDatosPagoBE.idCita,
                    //        publicKey = publicKey,
                    //        amount = montoIzipay,
                    //        transactionId = oDatosPagoBE.purchaseNumber
                    //    };
                    //    var content = new StringContent(JsonConvert.SerializeObject(oRequest2).ToString(), Encoding.UTF8, "application/json");
                    //    string urlMetodo = "Home/GenerarTokenIzipay";
                    //    var responseTaskOne = client.PostAsync(urlMetodo, content);
                    //    responseTaskOne.Wait();
                    //    var resultOne = responseTaskOne.Result;
                    //    string rptaTaskOne = "";
                    //    if (resultOne.IsSuccessStatusCode)
                    //    {
                    //        var readTaskOne = resultOne.Content.ReadAsStringAsync();
                    //        readTaskOne.Wait();
                    //        rptaTaskOne = readTaskOne.Result;
                    //        IzipayTemporalBE oIzipayTemporalBE = JsonConvert.DeserializeObject<IzipayTemporalBE>(rptaTaskOne);
                    //        if (oIzipayTemporalBE != null)
                    //        {
                    //            oTokenIzipayBE.token = oIzipayTemporalBE.token;
                    //            oTokenIzipayBE.purchaseNumber = oDatosPagoBE.purchaseNumber;
                    //            oTokenIzipayBE.merchantCode = merchantCode;
                    //            oTokenIzipayBE.merchantBuyerId = oDatosPagoBE.merchantBuyerId;
                    //            oTokenIzipayBE.action = oDatosPagoBE.action;
                    //            oTokenIzipayBE.orderNumber = oDatosPagoBE.orderNumber;
                    //            oTokenIzipayBE.payMethod = oDatosPagoBE.payMethod;
                    //        }
                    //    }
                    //}
                    #endregion

                    if (origen.ToLower().Equals("portalpaciente"))
                    {
                        #region Integración Izipay
                        CookieContainer cookies = new CookieContainer();
                        HttpClientHandler handler = new HttpClientHandler();

                        handler.CookieContainer = cookies;
                        handler.UseCookies = true;
                        handler.AllowAutoRedirect = true;

                        using (var client = new HttpClient(handler))
                        {
                            try
                            {
                                client.DefaultRequestHeaders.Add("User-Agent", "Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36");
                                client.DefaultRequestHeaders.Add("accept", "*/*");
                                client.DefaultRequestHeaders.Add("Connection", "keep-alive");
                                client.DefaultRequestHeaders.Add("transactionId", oDatosPagoBE.purchaseNumber);

                                //int montoIzipay = 0;
                                //if (oDatosPagoBE.monto.IndexOf(".") > -1)
                                //{
                                //    montoIzipay = int.Parse(oDatosPagoBE.monto.Replace(".", ""));
                                //}
                                //else
                                //{
                                //    montoIzipay = int.Parse(oDatosPagoBE.monto + "00");
                                //}

                                IzipayV2 o = new IzipayV2();
                                o.requestSource = requestSource;
                                o.merchantCode = merchantCode;
                                o.orderNumber = oDatosPagoBE.orderNumber;//oDatosPagoBE.purchaseNumber;//oDatosPagoBE.idCita;//(!string.IsNullOrEmpty(idCitaPresencial) && string.IsNullOrEmpty(idCita) ? idCitaPresencial : idCita); //2023-06-05 => Se modificó para que en la IPN se pueda obtener el idCita de la tabla Cita
                                o.publicKey = publicKey;
                                o.amount = montoIzipay;

                                var serializer = new JavaScriptSerializer();
                                serializedResult = serializer.Serialize(o);

                                HttpResponseMessage result = client.PostAsync(new Uri(url), new StringContent(serializedResult, Encoding.UTF8, "application/json")).Result;
                                if (result.IsSuccessStatusCode)
                                {
                                    responseWS = result.Content.ReadAsStringAsync().Result;

                                    if (!String.IsNullOrEmpty(responseWS))
                                    {

                                        dynamic obj = serializer.Deserialize<object>(responseWS);

                                        if (obj["code"] != null && obj["message"] != null)
                                        {
                                            if (obj["code"] == "00" && obj["message"] == "OK")
                                            {
                                                oTokenIzipayBE.token = obj["response"]["token"];
                                                oTokenIzipayBE.purchaseNumber = oDatosPagoBE.purchaseNumber;
                                                oTokenIzipayBE.merchantCode = merchantCode;
                                                oTokenIzipayBE.merchantBuyerId = oDatosPagoBE.merchantBuyerId;
                                                oTokenIzipayBE.action = oDatosPagoBE.action;
                                                oTokenIzipayBE.orderNumber = oDatosPagoBE.orderNumber;
                                                oTokenIzipayBE.payMethod = oDatosPagoBE.payMethod;
                                                oTokenIzipayBE.street = oDatosPagoBE.street;
                                                oTokenIzipayBE.publicKey = oDatosPagoBE.publicKey;
                                                oTokenIzipayBE.environment = oDatosPagoBE.environment;
                                                oTokenIzipayBE.urlIPN = oDatosPagoBE.urlIPN; // "https://roews.softvanperu.com/CSF_CITASWEB_WS/Cita.svc/ProcesarPagoIzipayV2/";
                                            }
                                            //else mensaje = "Mal";
                                        }
                                        //else mensaje = "Mal";
                                    }

                                }

                            }
                            catch (Exception e)
                            {
                                GrabarLog(e.Message, "WS", "Cita.svc/ObtenerTokenPagoIzipay", e.StackTrace, serializedResult);
                                //RespuestaBE<TokenIzipayBE> er = new ErrorDA().RegistrarError<TokenIzipayBE>(e, "WS", "Cita.svc");
                                RespuestaBE<TokenIzipayBE> er = ClasesGenericas.RegistrarErrorIntranet<TokenIzipayBE>(e, "WS", "Cita.svc");
                                return new RespuestaBE<TokenIzipayBE>()
                                {
                                    rpt = 101,
                                    mensaje = "Error al obtener token izipay",
                                    data = null
                                };

                            }

                        }
                        #endregion

                        if (String.IsNullOrEmpty(oTokenIzipayBE.token))
                        {
                            GrabarLog("Valor de token de pago no proporcionado por Izipay", "WS", "Cita.svc/ObtenerTokenPagoIzipay", responseWS, serializedResult);
                            return new RespuestaBE<TokenIzipayBE>()
                            {
                                rpt = 101,
                                mensaje = "Valor de token de pago no proporcionado por Izipay",
                                data = null
                            };
                        }
                    }
                    else
                    {
                        oTokenIzipayBE.token = "";
                        oTokenIzipayBE.purchaseNumber = oDatosPagoBE.purchaseNumber;
                        oTokenIzipayBE.merchantCode = merchantCode;
                        oTokenIzipayBE.merchantBuyerId = oDatosPagoBE.merchantBuyerId;
                        oTokenIzipayBE.action = oDatosPagoBE.action;
                        oTokenIzipayBE.orderNumber = oDatosPagoBE.orderNumber;
                        oTokenIzipayBE.payMethod = oDatosPagoBE.payMethod;
                        oTokenIzipayBE.street = oDatosPagoBE.street;
                        oTokenIzipayBE.publicKey = oDatosPagoBE.publicKey;
                        oTokenIzipayBE.environment = oDatosPagoBE.environment;
                        oTokenIzipayBE.urlIPN = oDatosPagoBE.urlIPN; // "https://roews.softvanperu.com/CSF_CITASWEB_WS/Cita.svc/ProcesarPagoIzipayV2/";
                    }
                }
                else
                {
                    CookieContainer cookies = new CookieContainer();
                    HttpClientHandler handler = new HttpClientHandler();

                    handler.CookieContainer = cookies;
                    handler.UseCookies = true;
                    handler.AllowAutoRedirect = true;

                    using (var client = new HttpClient(handler))
                    {
                        try
                        {
                            client.DefaultRequestHeaders.Add("User-Agent", "Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36");
                            client.DefaultRequestHeaders.Add("accept", "*/*");
                            client.DefaultRequestHeaders.Add("Connection", "keep-alive");


                            string credentials = Convert.ToBase64String(Encoding.ASCII.GetBytes(oDatosPagoBE.user + ":" + oDatosPagoBE.password));
                            client.DefaultRequestHeaders.Add("Authorization", "Basic " + credentials);

                            System.Net.ServicePointManager.ServerCertificateValidationCallback = (object se, System.Security.Cryptography.X509Certificates.X509Certificate cert, System.Security.Cryptography.X509Certificates.X509Chain chain, System.Net.Security.SslPolicyErrors sslerror) => true;
                            System.Net.ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls;

                            string url = oDatosPagoBE.merchant;

                            var datos = new Dictionary<string, object>();
                            datos["email"] = oDatosPagoBE.correo;
                            datos["reference"] = oDatosPagoBE.tokenEmail;//es el dni paciente

                            var infoCliente = new Dictionary<string, string>();
                            infoCliente["firstName"] = oDatosPagoBE.nombreCompletoPaciente;
                            infoCliente["lastName"] = oDatosPagoBE.apellidoCompletoPaciente;
                            infoCliente["address"] = oDatosPagoBE.direccionPaciente;
                            infoCliente["streetNumber"] = oDatosPagoBE.numeroDireccionPaciente;
                            infoCliente["phoneNumber"] = oDatosPagoBE.telefono;


                            datos["billingDetails"] = infoCliente;

                            int montoIzipay = 0;
                            if (oDatosPagoBE.monto.IndexOf(".") > -1)
                            {
                                montoIzipay = int.Parse(oDatosPagoBE.monto.Replace(".", ""));
                            }
                            else
                            {
                                montoIzipay = int.Parse(oDatosPagoBE.monto + "00");
                            }

                            izipay o = new izipay();
                            o.amount = montoIzipay;
                            o.currency = "PEN";
                            o.orderId = oDatosPagoBE.idCita;//(!string.IsNullOrEmpty(idCitaPresencial) && string.IsNullOrEmpty(idCita) ? idCitaPresencial : idCita); //2023-06-05 => Se modificó para que en la IPN se pueda obtener el idCita de la tabla Cita
                            o.formTokenVersion = formTokenVersion;

                            o.customer = datos;

                            var serializer = new JavaScriptSerializer();
                            serializedResult = serializer.Serialize(o);

                            HttpResponseMessage result = client.PostAsync(new Uri(url), new StringContent(serializedResult, Encoding.UTF8, "application/json")).Result;
                            if (result.IsSuccessStatusCode)
                            {
                                responseWS = result.Content.ReadAsStringAsync().Result;

                                if (!String.IsNullOrEmpty(responseWS))
                                {

                                    dynamic obj = serializer.Deserialize<object>(responseWS);

                                    if (!String.IsNullOrEmpty(obj["status"]) && obj["status"] == "SUCCESS")
                                    {
                                        oTokenIzipayBE.token = obj["answer"]["formToken"];
                                    }
                                }

                            }

                        }
                        catch (Exception e)
                        {
                            GrabarLog(e.Message, "WS", "Cita.svc/ObtenerTokenPagoIzipay", e.StackTrace, serializedResult);
                            //RespuestaBE<TokenIzipayBE> er = new ErrorDA().RegistrarError<TokenIzipayBE>(e, "WS", "Cita.svc");
                            RespuestaBE<TokenIzipayBE> er = ClasesGenericas.RegistrarErrorIntranet<TokenIzipayBE>(e, "WS", "Cita.svc");
                            return new RespuestaBE<TokenIzipayBE>()
                            {
                                rpt = 101,
                                mensaje = "Error al obtener token izipay",
                                data = null
                            };

                        }

                    }
                }

                varRespuesta = new RespuestaBE<TokenIzipayBE>()
                {
                    rpt = 0,
                    mensaje = "",
                    data = oTokenIzipayBE
                };
            }
            catch (Exception ex)
            {
                //return new ErrorDA().RegistrarError<TokenIzipayBE>(ex, "WS", "Cita.svc");
                return ClasesGenericas.RegistrarErrorIntranet<TokenIzipayBE>(ex, "WS", "Cita.svc");
            }
            return varRespuesta;
        }
        public RespuestaBE<IzipaySimpleBE> ObtenerTokenIzipay(
            string tipoDocumento, string numeroDocumento, string origen,
            string idCita, string idCitaVirtual)
        {
            //Nueva pasarela de pago de Izipay
            #region Validacion de Parámetros
            if (string.IsNullOrEmpty(tipoDocumento) || string.IsNullOrEmpty(numeroDocumento))
            {
                throw new WebFaultException(HttpStatusCode.BadRequest);
            }
            #endregion
            //Por el momento el idCita e idCitaVirtual estarán llegando vacíos
            RespuestaBE<IzipaySimpleBE> varRespuesta = new RespuestaBE<IzipaySimpleBE>();
            try
            {
                string serializedResult = "", responseWS = "";
                //TokenIzipayBE oTokenIzipayBE = new TokenIzipayBE();
                //oTokenIzipayBE.token = "";

                var oRequest = new
                {
                    tipoDocumento = tipoDocumento,
                    numeroDocumento = numeroDocumento,
                    origen = origen,
                    idCita = idCita,
                    idCitaVirtual = idCitaVirtual
                };
                string strRequest = new JavaScriptSerializer().Serialize(oRequest);
                string response = ClasesGenericas.PostAsyncIntranet("Cita.svc/ObtenerTokenIzipay/", strRequest, ClasesGenericas.GetHeader(WebOperationContext.Current.IncomingRequest.Headers, "token"));
                RespuestaBE<IzipaySimpleBE> varRespuesta2 = new JavaScriptSerializer().Deserialize<RespuestaBE<IzipaySimpleBE>>(response);

                if (varRespuesta2 == null)
                {
                    return new RespuestaBE<IzipaySimpleBE>()
                    {
                        rpt = -1,
                        mensaje = "No se logró procesar la solicitud",
                        data = null
                    };
                }

                if (varRespuesta2.rpt != 0)
                {
                    return new RespuestaBE<IzipaySimpleBE>()
                    {
                        rpt = varRespuesta2.rpt,
                        mensaje = varRespuesta2.mensaje,
                        data = null
                    };
                }
                IzipaySimpleBE oDatosPagoBE = varRespuesta2.data;

                System.Net.ServicePointManager.ServerCertificateValidationCallback = (object se, System.Security.Cryptography.X509Certificates.X509Certificate cert, System.Security.Cryptography.X509Certificates.X509Chain chain, System.Net.Security.SslPolicyErrors sslerror) => true;
                System.Net.ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls;

                string montoIzipay = oDatosPagoBE.monto,
                        requestSource = oDatosPagoBE.requestSource,
                        merchantCode = oDatosPagoBE.merchantCode,
                        publicKey = oDatosPagoBE.publicKey,
                        url = oDatosPagoBE.urlToken;

                #region Ambiente temporal
                //using (var client = new HttpClient())
                //{
                //    //client.BaseAddress = new Uri(@"http://localhost:63091/");
                //    client.BaseAddress = new Uri(@"https://roews.softvanperu.com/APP_DEMO_IZIPAY/");
                //    var oRequest2 = new
                //    {
                //        urlToken = url,
                //        requestSource = requestSource,
                //        merchantCode = merchantCode,
                //        orderNumber = oDatosPagoBE.orderNumber,
                //        publicKey = publicKey,
                //        amount = montoIzipay,
                //        transactionId = oDatosPagoBE.purchaseNumber
                //    };
                //    var content = new StringContent(JsonConvert.SerializeObject(oRequest2).ToString(), Encoding.UTF8, "application/json");
                //    string urlMetodo = "Home/GenerarTokenIzipay";
                //    var responseTaskOne = client.PostAsync(urlMetodo, content);
                //    responseTaskOne.Wait();
                //    var resultOne = responseTaskOne.Result;
                //    string rptaTaskOne = "";
                //    if (resultOne.IsSuccessStatusCode)
                //    {
                //        var readTaskOne = resultOne.Content.ReadAsStringAsync();
                //        readTaskOne.Wait();
                //        rptaTaskOne = readTaskOne.Result;
                //        IzipayTemporalBE oIzipayTemporalBE = JsonConvert.DeserializeObject<IzipayTemporalBE>(rptaTaskOne);
                //        if (oIzipayTemporalBE != null)
                //        {
                //            oDatosPagoBE.token = oIzipayTemporalBE.token;
                //        }
                //    }
                //}
                #endregion

                if (origen.ToLower().Equals("portalpaciente"))
                {
                    #region Integración Izipay
                    CookieContainer cookies = new CookieContainer();
                    HttpClientHandler handler = new HttpClientHandler();

                    handler.CookieContainer = cookies;
                    handler.UseCookies = true;
                    handler.AllowAutoRedirect = true;

                    using (var client = new HttpClient(handler))
                    {
                        try
                        {
                            //client.BaseAddress = new Uri(@"https://sandbox-api-pw.izipay.pe/");
                            client.DefaultRequestHeaders.Add("User-Agent", "Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36");
                            client.DefaultRequestHeaders.Add("accept", "*/*");
                            client.DefaultRequestHeaders.Add("Connection", "keep-alive");
                            client.DefaultRequestHeaders.Add("transactionId", oDatosPagoBE.purchaseNumber);

                            IzipayV2 o = new IzipayV2();
                            o.requestSource = requestSource;
                            o.merchantCode = merchantCode;
                            o.orderNumber = oDatosPagoBE.orderNumber;//oDatosPagoBE.idCita;//(!string.IsNullOrEmpty(idCitaPresencial) && string.IsNullOrEmpty(idCita) ? idCitaPresencial : idCita); //2023-06-05 => Se modificó para que en la IPN se pueda obtener el idCita de la tabla Cita
                            o.publicKey = publicKey;
                            o.amount = montoIzipay;

                            var serializer = new JavaScriptSerializer();
                            serializedResult = serializer.Serialize(o);

                            HttpResponseMessage result = client.PostAsync(new Uri(url), new StringContent(serializedResult, Encoding.UTF8, "application/json")).Result;

                            if (result.IsSuccessStatusCode)
                            {
                                responseWS = result.Content.ReadAsStringAsync().Result;

                                if (!String.IsNullOrEmpty(responseWS))
                                {

                                    dynamic obj = serializer.Deserialize<object>(responseWS);

                                    if (obj["code"] != null && obj["message"] != null)
                                    {
                                        if (obj["code"] == "00" && obj["message"] == "OK")
                                        {
                                            oDatosPagoBE.token = obj["response"]["token"];
                                        }
                                        //else mensaje = "Mal";
                                    }
                                    //else mensaje = "Mal";
                                }

                            }

                        }
                        catch (Exception e)
                        {
                            GrabarLog(e.Message, "WS", "Cita.svc/ObtenerTokenIzipay", e.StackTrace, serializedResult);//"URL: " + urlBaseWS + "\r\nRequest: " + serializedResult);
                            RespuestaBE<TokenIzipayBE> er = ClasesGenericas.RegistrarErrorIntranet<TokenIzipayBE>(e, "WS", "Cita.svc/ObtenerTokenIzipay");
                            return new RespuestaBE<IzipaySimpleBE>()
                            {
                                rpt = 101,
                                mensaje = "Error al obtener token izipay",
                                data = null
                            };
                        }
                    }
                    #endregion
                    if (String.IsNullOrEmpty(oDatosPagoBE.token))
                    {
                        GrabarLog("Valor de token de pago no proporcionado por Izipay", "WS", "Cita.svc/ObtenerTokenIzipay", responseWS, serializedResult);
                        return new RespuestaBE<IzipaySimpleBE>()
                        {
                            rpt = 101,
                            mensaje = "Valor de token de pago no proporcionado por Izipay",
                            data = null
                        };
                    }
                } 
                else
                {
                    oDatosPagoBE.token = "";
                }
                //oDatosPagoBE.urlIPN = "";//"https://roews.softvanperu.com/CSF_CITASWEB_WS/Cita.svc/ProcesarPagoIzipayV2/";

                varRespuesta = new RespuestaBE<IzipaySimpleBE>()
                {
                    rpt = 0,
                    mensaje = "",
                    data = oDatosPagoBE
                };
            }
            catch (Exception ex)
            {
                return ClasesGenericas.RegistrarErrorIntranet<IzipaySimpleBE>(ex, "WS", "Cita.svc/ObtenerTokenIzipay");
            }
            return varRespuesta;
        }
        public RespuestaBE<IzipaySDKBE> ObtenerDatosIzipaySDK(string idCitaPresencial, string idCita, string canal)
        {
            #region Validacion de Parámetros
            int varIDCita;

            if (!string.IsNullOrEmpty(idCitaPresencial))
            {
                if (!int.TryParse(idCitaPresencial, out varIDCita))
                {
                    return new RespuestaBE<IzipaySDKBE>()
                    {
                        rpt = 101,
                        mensaje = "El parámetro idCitaPresencial debe ser numérico",
                        data = null
                    };
                }
            }

            if (!string.IsNullOrEmpty(idCita))
            {
                if (!int.TryParse(idCita, out varIDCita))
                {
                    return new RespuestaBE<IzipaySDKBE>()
                    {
                        rpt = 101,
                        mensaje = "El parámetro idCita debe ser numérico",
                        data = null
                    };
                }
            }
            #endregion
            RespuestaBE<IzipaySDKBE> varRespuesta = new RespuestaBE<IzipaySDKBE>();
            try
            {
                var oRequest = new
                {
                    idCitaPresencial = idCitaPresencial,
                    idCita = idCita,
                    canal = canal
                };
                string strRequest = new JavaScriptSerializer().Serialize(oRequest);
                string response = ClasesGenericas.PostAsyncIntranet("Cita.svc/ObtenerDatosIzipaySDK/", strRequest, ClasesGenericas.GetHeader(WebOperationContext.Current.IncomingRequest.Headers, "token"));
                varRespuesta = new JavaScriptSerializer().Deserialize<RespuestaBE<IzipaySDKBE>>(response);

                if (varRespuesta == null)
                {
                    return new RespuestaBE<IzipaySDKBE>()
                    {
                        rpt = -1,
                        mensaje = "No se logró procesar la solicitud",
                        data = null
                    };
                }
            }
            catch (Exception ex)
            {
                //return new ErrorDA().RegistrarError<IzipaySDKBE>(ex, "WS", "Cita.svc");
                return ClasesGenericas.RegistrarErrorIntranet<IzipaySDKBE>(ex, "WS", "Cita.svc");
            }
            return varRespuesta;
        }
        public RespuestaBE<CitaVirtualBE> RegistrarCitaVirtual(string tipoDocumento, string numeroDocumento, string idHorarioDetalle,
                                        string fecha, string numeroTurno, string preguntaPaciente1, string respuestaPaciente1,
                                        string preguntaPaciente2, string respuestaPaciente2, string origen,
                                        string tieneAlergia, string descripcionAlergia, string horaInicio,
                                        string origenOpcion)
        {

            preguntaPaciente1 = !String.IsNullOrEmpty(preguntaPaciente1) ? preguntaPaciente1 : "";
            respuestaPaciente1 = !String.IsNullOrEmpty(respuestaPaciente1) ? respuestaPaciente1 : "";
            preguntaPaciente2 = !String.IsNullOrEmpty(preguntaPaciente2) ? preguntaPaciente2 : "";
            respuestaPaciente2 = !String.IsNullOrEmpty(respuestaPaciente2) ? respuestaPaciente2 : "";
            descripcionAlergia = !String.IsNullOrEmpty(descripcionAlergia) ? descripcionAlergia : "";

            #region Validacion de Parámetros
            if (string.IsNullOrEmpty(tipoDocumento) || string.IsNullOrEmpty(numeroDocumento) || string.IsNullOrEmpty(idHorarioDetalle)
                || string.IsNullOrEmpty(fecha) || string.IsNullOrEmpty(numeroTurno)// || string.IsNullOrEmpty(preguntaPaciente1) || string.IsNullOrEmpty(respuestaPaciente1)
                || string.IsNullOrEmpty(origen))
            {
                throw new WebFaultException(HttpStatusCode.BadRequest);
            }
            if (tipoDocumento != "1" && tipoDocumento != "2" && tipoDocumento != "3")
            {
                return new RespuestaBE<CitaVirtualBE>()
                {
                    rpt = 101,
                    mensaje = "Sólo se soportan los valores \"1\" (DNI), \"2\" (CE) o \"3\" (PAS) en el parámetro tipoDocumento",
                    data = null
                };
            }
            if (numeroDocumento.Length > 20)
            {
                return new RespuestaBE<CitaVirtualBE>()
                {
                    rpt = 102,
                    mensaje = "El parámetro numeroDocumento no puede tener más de 20 caracteres",
                    data = null
                };
            }
            int varIDHorarioDetalle;
            if (idHorarioDetalle.Split('|').Length != 2 ||
                !int.TryParse(idHorarioDetalle.Split('|')[0], out varIDHorarioDetalle) ||
                !int.TryParse(idHorarioDetalle.Split('|')[1], out varIDHorarioDetalle))
            {
                return new RespuestaBE<CitaVirtualBE>()
                {
                    rpt = 103,
                    mensaje = "El parámetro idHorarioDetalle debe ser numérico",
                    data = null
                };
            }
            //DateTime varFecha;
            //if (!DateTime.TryParse(fecha, out varFecha))
            //{
            //    return new RespuestaBE<CitaVirtualBE>()
            //    {
            //        rpt = 104,
            //        mensaje = "El parámetro fecha no tiene el formato correcto",
            //        data = null
            //    };
            //}
            int varNumeroTurno;
            if (!int.TryParse(numeroTurno, out varNumeroTurno))
            {
                return new RespuestaBE<CitaVirtualBE>()
                {
                    rpt = 105,
                    mensaje = "El parámetro numeroTurno debe ser numérico",
                    data = null
                };
            }
            //Debug.WriteLine("dayofweek");
            //Debug.WriteLine((int)varFecha.DayOfWeek);
            //if (((int)varFecha.DayOfWeek).ToString() != (idHorarioDetalle.Split('|')[1] == "7" ? "0" : idHorarioDetalle.Split('|')[1]))
            //{
            //    return new RespuestaBE<CitaVirtualBE>()
            //    {
            //        rpt = 106,
            //        mensaje = "La fecha indicada no corresponde al día del horario",
            //        data = null
            //    };
            //}
            if (preguntaPaciente1.Length > 500)
            {
                return new RespuestaBE<CitaVirtualBE>()
                {
                    rpt = 107,
                    mensaje = "El parámetro preguntaPaciente1 no puede tener más de 500 caracteres",
                    data = null
                };
            }
            if (respuestaPaciente1.Length > 500)
            {
                return new RespuestaBE<CitaVirtualBE>()
                {
                    rpt = 108,
                    mensaje = "El parámetro respuestaPaciente1 no puede tener más de 500 caracteres",
                    data = null
                };
            }
            if (!string.IsNullOrEmpty(preguntaPaciente2) && preguntaPaciente2.Length > 500)
            {
                return new RespuestaBE<CitaVirtualBE>()
                {
                    rpt = 109,
                    mensaje = "El parámetro preguntaPaciente2 no puede tener más de 500 caracteres",
                    data = null
                };
            }
            if (!string.IsNullOrEmpty(respuestaPaciente2) && respuestaPaciente2.Length > 500)
            {
                return new RespuestaBE<CitaVirtualBE>()
                {
                    rpt = 110,
                    mensaje = "El parámetro respuestaPaciente2 no puede tener más de 500 caracteres",
                    data = null
                };
            }
            if (string.IsNullOrEmpty(origen))
                origen = "App";
            //origen = origen.ToLower();
            //if (origen != "android" && origen != "ios" && origen != "huawei" && origen != "web")
            //{
            //    return new RespuestaBE<CitaVirtualBE>()
            //    {
            //        rpt = 111,
            //        mensaje = "Sólo se soportan los valores \"android\", \"ios\", \"huawei\" o \"web\" en el parámetro origen",
            //        data = null
            //    };
            //}
            //beOrigenResponse obeOrigen = fnValidarOrigen(origen.ToLower());
            //if (!obeOrigen.IndValido)
            //{
            //    return new RespuestaBE<CitaVirtualBE>()
            //    {
            //        rpt = 111,
            //        mensaje = obeOrigen.Mensaje,
            //        data = null
            //    };
            //}

            if (string.IsNullOrEmpty(tieneAlergia))
                tieneAlergia = "false";

            bool varTieneAlergia;
            if (!bool.TryParse(tieneAlergia, out varTieneAlergia))
            {
                return new RespuestaBE<CitaVirtualBE>()
                {
                    rpt = 112,
                    mensaje = "El parámetro tieneAlergia sólo acepta true o false",
                    data = null
                };
            }
            if (!string.IsNullOrEmpty(descripcionAlergia) && descripcionAlergia.Length > 500)
            {
                return new RespuestaBE<CitaVirtualBE>()
                {
                    rpt = 113,
                    mensaje = "El parámetro descripcionAlergia no puede tener más de 500 caracteres",
                    data = null
                };
            }
            #endregion
            RespuestaBE<CitaVirtualBE> varRespuesta;
            try
            {

                var oRequest = new
                {
                    tipoDocumento = tipoDocumento,
                    numeroDocumento = numeroDocumento,
                    idHorarioDetalle = idHorarioDetalle,
                    fecha = fecha,
                    numeroTurno = numeroTurno,
                    preguntaPaciente1 = preguntaPaciente1,
                    respuestaPaciente1 = respuestaPaciente1,
                    preguntaPaciente2 = preguntaPaciente2,
                    respuestaPaciente2 = respuestaPaciente2,
                    origen = origen,
                    tieneAlergia = tieneAlergia,
                    descripcionAlergia = descripcionAlergia,
                    horaInicio = horaInicio,
                    origenOpcion = origenOpcion
                };
                string strRequest = new JavaScriptSerializer().Serialize(oRequest);
                string response = ClasesGenericas.PostAsyncIntranet("Cita.svc/RegistrarCitaVirtual/", strRequest, ClasesGenericas.GetHeader(WebOperationContext.Current.IncomingRequest.Headers, "token"));
                varRespuesta = new JavaScriptSerializer().Deserialize<RespuestaBE<CitaVirtualBE>>(response);

                if (varRespuesta == null)
                {
                    return new RespuestaBE<CitaVirtualBE>()
                    {
                        rpt = -1,
                        mensaje = "No se logró procesar la solicitud",
                        data = null
                    };
                }

                if (varRespuesta.rpt == 0)
                {
                    if (varRespuesta.data.strEsMontoCero.Equals("SI"))
                    {
                        RespuestaSimpleBE rpta = RegistrarPagoCitaMontoCero("", varRespuesta.data.idCitaVirtual);
                    }

                    try
                    {

                        bool statusEnvioEmail = false;
                        string emailNotificacion = varRespuesta.data.emailNotificacion;
                        if (!string.IsNullOrEmpty(emailNotificacion))
                        {
                            //statusEnvioEmail = (varParametrosCorreo["TipoPago"] == "PrePago") ? ClasesGenericas.EnviarCorreo(varParametrosCorreo["Email"], "Cita_RegistrarCitaVirtualPrePago", varParametrosCorreo, null, "SMTPVirtual") : ClasesGenericas.EnviarCorreo(varParametrosCorreo["Email"], "Cita_RegistrarCitaVirtualPostPago", varParametrosCorreo, null, "SMTPVirtual");
                            var oRequest2 = new
                            {
                                idCitaVirtual = varRespuesta.data.idCitaVirtual
                            };
                            strRequest = new JavaScriptSerializer().Serialize(oRequest2);
                            response = ClasesGenericas.PostAsyncIntranet("Cita.svc/DatosCitaVirtual/", strRequest, ClasesGenericas.GetHeader(WebOperationContext.Current.IncomingRequest.Headers, "token"));
                            RespuestaBE<DatosCitaVirtualBE> varRespuesta2 = new JavaScriptSerializer().Deserialize<RespuestaBE<DatosCitaVirtualBE>>(response);

                            if (varRespuesta2.rpt == 0)
                            {
                                Dictionary<string, string> varParametrosCorreo = DatosCitaVirtualDct(varRespuesta2.data);
                                statusEnvioEmail = ClasesGenericas.EnviarCorreo(emailNotificacion, "Cita_RegistrarCitaVirtualPrePago", varParametrosCorreo, null, "SMTPVirtual");
                            }
                        }
                        varRespuesta.data.emailNotificacion = statusEnvioEmail ? emailNotificacion : "";
                    }
                    catch (Exception)
                    {
                    }
                }
            }
            catch (Exception ex)
            {
                //return new ErrorDA().RegistrarError<CitaVirtualBE>(ex, "WS", "Cita.svc");
                return ClasesGenericas.RegistrarErrorIntranet<CitaVirtualBE>(ex, "WS", "Cita.svc");
            }
            return varRespuesta;
        }
        public RespuestaBE<EnviarOTPBE> EnviarOTP(string tipoDocumento, string numeroDocumento, string correo, bool indicadorReenvio,
            string tipo)
        {
            #region Validación de parámetros
            if (string.IsNullOrEmpty(tipoDocumento) || string.IsNullOrEmpty(numeroDocumento) ||
                string.IsNullOrEmpty(correo))
            {
                throw new WebFaultException(HttpStatusCode.BadRequest);
            }
            if (tipoDocumento != "1" && tipoDocumento != "2" && tipoDocumento != "3")
            {
                return new RespuestaBE<EnviarOTPBE>()
                {
                    rpt = 101,
                    mensaje = "Sólo se soportan los valores \"1\" (DNI), \"2\" (CE) o \"3\" (PAS) en el parámetro tipoDocumento",
                    data = null
                };
            }
            if (numeroDocumento.Length > 20)
            {
                return new RespuestaBE<EnviarOTPBE>()
                {
                    rpt = 102,
                    mensaje = "El parámetro numeroDocumento no puede tener más de 20 caracteres",
                    data = null
                };
            }
            #endregion

            //var resultados = new ResponseLaboratorio();
            WebOperationContext oContext = WebOperationContext.Current;
            tipo = !string.IsNullOrWhiteSpace(tipo) ? tipo.Trim() : "generico"; //registro, recuperar-contrasenia, cambiar-contrasenia, politica-contrasenia o generico
            if (tipo != "registro" && tipo != "recuperar-contrasenia" && tipo != "cambiar-contrasenia" && tipo != "politica-contrasenia" && tipo != "generico")
            {
                oContext.OutgoingResponse.StatusCode = HttpStatusCode.BadRequest;
                return null;
            }
            RespuestaBE<EnviarOTPBE> varRespuesta;
            try
            {
                var oRequest = new
                {
                    tipoDocumento = tipoDocumento,
                    numeroDocumento = numeroDocumento,
                    correo = correo,
                    indicadorReenvio = indicadorReenvio,
                    tipo = tipo
                };
                string strRequest = new JavaScriptSerializer().Serialize(oRequest);
                string response = ClasesGenericas.PostAsyncIntranet("Cita.svc/EnviarOTP/", strRequest, ClasesGenericas.GetHeader(WebOperationContext.Current.IncomingRequest.Headers, "token"));
                varRespuesta = new JavaScriptSerializer().Deserialize<RespuestaBE<EnviarOTPBE>>(response);
                if (varRespuesta.rpt == 0)
                {
                    string asunto = ConfigurationManager.AppSettings["asuntoCorreoOTP"];
                    string contenido = ConfigurationManager.AppSettings["asuntoContenidoOTP"].ToString().Replace("@codigo", varRespuesta.data.CodigoOTP);

                    bool exito = ClasesGenericas.EnviarCorreoPlantillaHTML(correo, asunto, contenido, null, "SMTP", "", ';', "", ';', "", "");

                    if (!exito)
                    {
                        var oRequest2 = new
                        {
                            idOTP = varRespuesta.data.IdOTP
                        };
                        string strRequest2 = new JavaScriptSerializer().Serialize(oRequest2);
                        string response2 = ClasesGenericas.PostAsyncIntranet("Cita.svc/AnularOTP/", strRequest2, ClasesGenericas.GetHeader(WebOperationContext.Current.IncomingRequest.Headers, "token"));
                        RespuestaSimpleBE varRespuesta2 = new JavaScriptSerializer().Deserialize<RespuestaSimpleBE>(response2);
                        varRespuesta.rpt = 104;
                        varRespuesta.mensaje = "No se logró enviar correo";
                        varRespuesta.data = null;
                    }
                }
                else
                {
                    varRespuesta.rpt = varRespuesta.rpt;
                    varRespuesta.mensaje = varRespuesta.mensaje;
                    varRespuesta.data = null;
                }
            }
            catch (Exception ex)
            {
                return ClasesGenericas.RegistrarErrorIntranet<EnviarOTPBE>(ex, "WS", "Cita.svc");
            }
            return varRespuesta;
        }
        public RespuestaBE<ActualizarOTPBE> ActualizarOTP(string tipoDocumento, string numeroDocumento, string codigoOTP)
        {
            #region Validación de parámetros
            if (string.IsNullOrEmpty(tipoDocumento) || string.IsNullOrEmpty(numeroDocumento) || string.IsNullOrEmpty(codigoOTP))
            {
                throw new WebFaultException(HttpStatusCode.BadRequest);
            }
            if (tipoDocumento != "1" && tipoDocumento != "2" && tipoDocumento != "3")
            {
                return new RespuestaBE<ActualizarOTPBE>()
                {
                    rpt = 101,
                    mensaje = "Sólo se soportan los valores \"1\" (DNI), \"2\" (CE) o \"3\" (PAS) en el parámetro tipoDocumento",
                    data = null
                };
            }
            if (numeroDocumento.Length > 20)
            {
                return new RespuestaBE<ActualizarOTPBE>()
                {
                    rpt = 102,
                    mensaje = "El parámetro numeroDocumento no puede tener más de 20 caracteres",
                    data = null
                };
            }
            #endregion
            try
            {
                var oRequest = new
                {
                    tipoDocumento = tipoDocumento,
                    numeroDocumento = numeroDocumento,
                    codigoOTP = codigoOTP
                };
                string strRequest = new JavaScriptSerializer().Serialize(oRequest);
                string response = ClasesGenericas.PostAsyncIntranet("Cita.svc/ActualizarOTP/", strRequest, ClasesGenericas.GetHeader(WebOperationContext.Current.IncomingRequest.Headers, "token"));
                RespuestaBE<ActualizarOTPBE> varRespuesta = new JavaScriptSerializer().Deserialize<RespuestaBE<ActualizarOTPBE>>(response);
                if (varRespuesta == null)
                {
                    return new RespuestaBE<ActualizarOTPBE>()
                    {
                        rpt = -1,
                        mensaje = "No se logró procesar la solicitud",
                        data = null
                    };
                }
                return varRespuesta;

            }
            catch (Exception ex)
            {
                //return new ErrorDA().RegistrarError<ActualizarOTPBE>(ex, "WS", "Cita.svc");
                return ClasesGenericas.RegistrarErrorIntranet<ActualizarOTPBE>(ex, "WS", "Cita.svc");
            }
        }
        public RespuestaSimpleBE ValidarOTP(string tipoDocumento, string numeroDocumento, string codigoOTP,
            string tipo)
        {
            #region Validación de parámetros
            if (string.IsNullOrEmpty(tipoDocumento) || string.IsNullOrEmpty(numeroDocumento) || string.IsNullOrEmpty(codigoOTP))
            {
                throw new WebFaultException(HttpStatusCode.BadRequest);
            }
            if (tipoDocumento != "1" && tipoDocumento != "2" && tipoDocumento != "3")
            {
                return new RespuestaSimpleBE()
                {
                    rpt = 101,
                    mensaje = "Sólo se soportan los valores \"1\" (DNI), \"2\" (CE) o \"3\" (PAS) en el parámetro tipoDocumento",
                    data = null
                };
            }
            if (numeroDocumento.Length > 20)
            {
                return new RespuestaSimpleBE()
                {
                    rpt = 102,
                    mensaje = "El parámetro numeroDocumento no puede tener más de 20 caracteres",
                    data = null
                };
            }
            #endregion
            //var resultados = new ResponseLaboratorio();
            tipo = !string.IsNullOrWhiteSpace(tipo) ? tipo.Trim() : "generico"; //registro, recuperar-contrasenia, cambiar-contrasenia, politica-contrasenia o generico
            if (tipo != "registro" && tipo != "recuperar-contrasenia" && tipo != "cambiar-contrasenia" && tipo != "politica-contrasenia" && tipo != "generico")
            {
                throw new WebFaultException(HttpStatusCode.BadRequest);
            }
            try
            {
                string ipCliente = GetClientAddress();
                var oRequest = new
                {
                    tipoDocumento = tipoDocumento,
                    numeroDocumento = numeroDocumento,
                    codigoOTP = codigoOTP,
                    tipo = tipo,
                    ipCliente = ipCliente
                };
                string strRequest = new JavaScriptSerializer().Serialize(oRequest);
                string response = ClasesGenericas.PostAsyncIntranet("Cita.svc/ValidarOTP/", strRequest, ClasesGenericas.GetHeader(WebOperationContext.Current.IncomingRequest.Headers, "token"));
                RespuestaSimpleBE varRespuesta = new JavaScriptSerializer().Deserialize<RespuestaSimpleBE>(response);
                if (varRespuesta == null)
                {
                    return new RespuestaSimpleBE()
                    {
                        rpt = -1,
                        mensaje = "No se logró procesar la solicitud",
                        data = null
                    };
                }
                return varRespuesta;
            }
            catch (Exception ex)
            {
                return ClasesGenericas.RegistrarErrorIntranet(ex, "WS", "Cita.svc");
            }
        }
        public RespuestaBE<ClinicaConsultorioBE> ObtenerDatosPorHorario(string idHorario, string tipoAtencion, bool esAdicional,
            string idServicioHorario, bool esProcedimiento)
        {
            #region Validacion de Parámetros
            if ((string.IsNullOrEmpty(idHorario) && string.IsNullOrEmpty(idServicioHorario)))
            {
                throw new WebFaultException(HttpStatusCode.BadRequest);
            }
            if (!string.IsNullOrEmpty(idHorario) && !string.IsNullOrEmpty(idServicioHorario))
            {
                return new RespuestaBE<ClinicaConsultorioBE>()
                {
                    rpt = 100,
                    mensaje = "Solo enviar el parámetro idHorario o idServicioHorario",
                    data = null
                };
            }
            if (!string.IsNullOrEmpty(idHorario))
            {
                int varIdHorario;
                if (!int.TryParse(idHorario, out varIdHorario))
                {
                    return new RespuestaBE<ClinicaConsultorioBE>()
                    {
                        rpt = 101,
                        mensaje = "El parámetro idHorario debe ser numérico",
                        data = null
                    };
                }
            }
            if (!string.IsNullOrEmpty(idServicioHorario))
            {
                int varIdServicioHorario;
                if (!int.TryParse(idServicioHorario, out varIdServicioHorario))
                {
                    return new RespuestaBE<ClinicaConsultorioBE>()
                    {
                        rpt = 102,
                        mensaje = "El parámetro idServicioHorario debe ser numérico",
                        data = null
                    };
                }
            }
            if (string.IsNullOrEmpty(tipoAtencion))
            {
                tipoAtencion = "2"; // 1 Virtual | 2 Presencial (por defecto)
            }
            #endregion
            try
            {
                var oRequest = new
                {
                    idHorario = idHorario,
                    tipoAtencion = tipoAtencion,
                    esAdicional = esAdicional,
                    idServicioHorario = idServicioHorario,
                    esProcedimiento = esProcedimiento
                };
                string strRequest = new JavaScriptSerializer().Serialize(oRequest);
                string response = ClasesGenericas.PostAsyncIntranet("Cita.svc/ObtenerDatosPorHorario/", strRequest, ClasesGenericas.GetHeader(WebOperationContext.Current.IncomingRequest.Headers, "token"));
                RespuestaBE<ClinicaConsultorioBE> varRespuesta = new JavaScriptSerializer().Deserialize<RespuestaBE<ClinicaConsultorioBE>>(response);
                if (varRespuesta == null)
                {
                    return new RespuestaBE<ClinicaConsultorioBE>()
                    {
                        rpt = -1,
                        mensaje = "No se logró procesar la solicitud",
                        data = null
                    };
                }
                return varRespuesta;
            }
            catch (Exception ex)
            {
                //return new ErrorDA().RegistrarError<ClinicaConsultorioBE>(ex, "WS", "Cita.svc");
                return ClasesGenericas.RegistrarErrorIntranet<ClinicaConsultorioBE>(ex, "WS", "Cita.svc");
            }
        }
        public RespuestaSimpleBE ValidarAccionCita(string idCitaPresencial, string idCita, string tipoAccion, string origen)
        {
            #region Validacion de Parámetros
            //Al menos uno debe tener valor
            if (string.IsNullOrEmpty(idCitaPresencial) && string.IsNullOrEmpty(idCita))
            {
                throw new WebFaultException(HttpStatusCode.BadRequest);
            }
            //Solo uno puede tener valor
            if (!string.IsNullOrEmpty(idCitaPresencial) && !string.IsNullOrEmpty(idCita))
            {
                throw new WebFaultException(HttpStatusCode.BadRequest);
            }
            if (string.IsNullOrEmpty(tipoAccion))
            {
                throw new WebFaultException(HttpStatusCode.BadRequest);
            }
            if (!string.IsNullOrEmpty(idCitaPresencial))
            {
                int varIdCitaPresencial;
                if (!int.TryParse(idCitaPresencial, out varIdCitaPresencial))
                {
                    return new RespuestaSimpleBE()
                    {
                        rpt = 100,
                        mensaje = "El parámetro idCitaPresencial debe ser numérico",
                        data = null
                    };
                }
            }
            if (!String.IsNullOrEmpty(idCita))
            {
                int varIdCita;
                if (!int.TryParse(idCita, out varIdCita))
                {
                    return new RespuestaSimpleBE()
                    {
                        rpt = 101,
                        mensaje = "El parámetro idCita debe ser numérico",
                        data = null
                    };
                }
            }
            if (tipoAccion != "ANU" && tipoAccion != "REP")
            {
                return new RespuestaSimpleBE()
                {
                    rpt = 102,
                    mensaje = "El parámetro tipoAccion debe ser ANU (Anulación) o REP (Reprogramación)",
                    data = null
                };
            }
            //beOrigenResponse obeOrigen = fnValidarOrigen(origen);
            //if (!obeOrigen.IndValido)
            //{
            //    return new RespuestaSimpleBE()
            //    {
            //        rpt = 103,
            //        mensaje = obeOrigen.Mensaje,
            //        data = null
            //    };
            //}
            #endregion
            try
            {
                var oRequest = new
                {
                    idCitaPresencial = idCitaPresencial,
                    idCita = idCita,
                    tipoAccion = tipoAccion,
                    origen = origen
                };
                string strRequest = new JavaScriptSerializer().Serialize(oRequest);
                string response = ClasesGenericas.PostAsyncIntranet("Cita.svc/ValidarAccionCita/", strRequest, ClasesGenericas.GetHeader(WebOperationContext.Current.IncomingRequest.Headers, "token"));
                RespuestaSimpleBE varRespuesta = new JavaScriptSerializer().Deserialize<RespuestaSimpleBE>(response);
                if (varRespuesta == null)
                {
                    return new RespuestaSimpleBE()
                    {
                        rpt = -1,
                        mensaje = "No se logró procesar la solicitud",
                        data = null
                    };
                }
                return varRespuesta;
            }
            catch (Exception ex)
            {
                //return new ErrorDA().RegistrarError(ex, "WS", "Cita.svc/ValidarAccionCita");
                return ClasesGenericas.RegistrarErrorIntranet(ex, "WS", "Cita.svc/ValidarAccionCita");
            }
        }
        public RespuestaBE<VideollamadaBE> ObtenerDatosVideollamada(string idCita)
        {
            #region Validacion de Parámetros
            if (string.IsNullOrEmpty(idCita))
            {
                throw new WebFaultException(HttpStatusCode.BadRequest);
            }
            int varIDCitaVirtual;
            if (!int.TryParse(idCita, out varIDCitaVirtual))
            {
                return new RespuestaBE<VideollamadaBE>()
                {
                    rpt = 100,
                    mensaje = "El parámetro idCita debe ser numérico"
                };
            }
            #endregion
            try
            {
                //string tipoAmbienteTwilio = ConfigurationManager.AppSettings["TipoAmbienteTwilio"] != null ? ConfigurationManager.AppSettings["TipoAmbienteTwilio"].ToString() : "DESA";
                //VideollamadaBE oVideollamadaBE = new CitaDA().ObtenerDatosVideollamada(idCita, tipoAmbienteTwilio);
                var oRequest = new
                {
                    idCita = idCita
                };
                string strRequest = new JavaScriptSerializer().Serialize(oRequest);
                string response = ClasesGenericas.PostAsyncIntranet("Cita.svc/ObtenerDatosVideollamada/", strRequest, ClasesGenericas.GetHeader(WebOperationContext.Current.IncomingRequest.Headers, "token"));
                RespuestaBE<VideollamadaBE> varRespuesta = new JavaScriptSerializer().Deserialize<RespuestaBE<VideollamadaBE>>(response);
                if (varRespuesta == null)
                {
                    return new RespuestaBE<VideollamadaBE>()
                    {
                        rpt = -1,
                        mensaje = "No se logró procesar la solicitud",
                        data = null
                    };
                }
                VideollamadaBE oVideollamadaBE = varRespuesta.data;
                if (oVideollamadaBE != null)
                {
                    System.Net.ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls;
                    // These values are necessary for any access token
                    // To set up environmental variables, see http://twil.io/secure
                    string twilioAccountSid = oVideollamadaBE.AccountSid;//Environment.GetEnvironmentVariable("TWILIO_ACCOUNT_SID");
                    string twilioApiKey = oVideollamadaBE.ApiKey;//Environment.GetEnvironmentVariable("TWILIO_API_KEY");
                    string twilioApiSecret = oVideollamadaBE.ApiSecret;//Environment.GetEnvironmentVariable("TWILIO_API_SECRET");

                    // These are specific to Video
                    string identity = oVideollamadaBE.paciente;

                    // Create a Video grant for this token
                    var grant = new VideoGrant();
                    grant.Room = oVideollamadaBE.room_name;

                    var grants = new HashSet<IGrant> { grant };

                    // Create an Access Token generator
                    var token = new Token(
                        twilioAccountSid,
                        twilioApiKey,
                        twilioApiSecret,
                        identity: identity,
                        grants: grants);

                    //string token_ = token.ToJwt();
                    //Guid g = Guid.NewGuid();
                    //string gui = g.ToString();

                    //Console.WriteLine(token.ToJwt());
                    oVideollamadaBE.token = token.ToJwt();
                    return new RespuestaBE<VideollamadaBE>()
                    {
                        data = oVideollamadaBE,
                        mensaje = "",
                        rpt = 0
                    };
                }
                else
                {
                    return new RespuestaBE<VideollamadaBE>()
                    {
                        data = oVideollamadaBE,
                        mensaje = "No se encontraron datos",
                        rpt = 1
                    };
                }
            }
            catch (Exception ex)
            {
                //return new ErrorDA().RegistrarError<VideollamadaBE>(ex, "WS", "Cita.svc/ObtenerDatosVideollamada");
                return ClasesGenericas.RegistrarErrorIntranet<VideollamadaBE>(ex, "WS", "Cita.svc/ObtenerDatosVideollamada");
            }
        }
        public RespuestaBE<VideollamadaMedicoBE> ObtenerDatosVideollamadaMedico(string room_name)
        {
            #region Validacion de Parámetros
            if (string.IsNullOrEmpty(room_name))
            {
                throw new WebFaultException(HttpStatusCode.BadRequest);
            }
            #endregion
            try
            {
                //string tipoAmbienteTwilio = ConfigurationManager.AppSettings["TipoAmbienteTwilio"] != null ? ConfigurationManager.AppSettings["TipoAmbienteTwilio"].ToString() : "DESA";
                //VideollamadaMedicoBE oVideollamadaMedicoBE = new CitaDA().ObtenerDatosVideollamadaMedico(room_name, tipoAmbienteTwilio);
                var oRequest = new
                {
                    room_name = room_name
                };
                string strRequest = new JavaScriptSerializer().Serialize(oRequest);
                string response = ClasesGenericas.PostAsyncIntranet("Cita.svc/ObtenerDatosVideollamadaMedico/", strRequest, ClasesGenericas.GetHeader(WebOperationContext.Current.IncomingRequest.Headers, "token"));
                RespuestaBE<VideollamadaMedicoBE> varRespuesta = new JavaScriptSerializer().Deserialize<RespuestaBE<VideollamadaMedicoBE>>(response);
                if (varRespuesta == null)
                {
                    return new RespuestaBE<VideollamadaMedicoBE>()
                    {
                        rpt = -1,
                        mensaje = "No se logró procesar la solicitud",
                        data = null
                    };
                }
                VideollamadaMedicoBE oVideollamadaMedicoBE = varRespuesta.data;
                if (oVideollamadaMedicoBE != null)
                {
                    System.Net.ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls;
                    // These values are necessary for any access token
                    // To set up environmental variables, see http://twil.io/secure
                    string twilioAccountSid = oVideollamadaMedicoBE.AccountSid;//Environment.GetEnvironmentVariable("TWILIO_ACCOUNT_SID");
                    string twilioApiKey = oVideollamadaMedicoBE.ApiKey;//Environment.GetEnvironmentVariable("TWILIO_API_KEY");
                    string twilioApiSecret = oVideollamadaMedicoBE.ApiSecret;//Environment.GetEnvironmentVariable("TWILIO_API_SECRET");

                    // These are specific to Video
                    string identity = oVideollamadaMedicoBE.medico;

                    // Create a Video grant for this token
                    var grant = new VideoGrant();
                    grant.Room = room_name;

                    var grants = new HashSet<IGrant> { grant };

                    // Create an Access Token generator
                    var token = new Token(
                        twilioAccountSid,
                        twilioApiKey,
                        twilioApiSecret,
                        identity: identity,
                        grants: grants);

                    //string token_ = token.ToJwt();
                    //Guid g = Guid.NewGuid();
                    //string gui = g.ToString();

                    //Console.WriteLine(token.ToJwt());
                    oVideollamadaMedicoBE.token = token.ToJwt();
                    return new RespuestaBE<VideollamadaMedicoBE>()
                    {
                        data = oVideollamadaMedicoBE,
                        mensaje = "",
                        rpt = 0
                    };
                }
                else
                {
                    return new RespuestaBE<VideollamadaMedicoBE>()
                    {
                        data = oVideollamadaMedicoBE,
                        mensaje = "No se encontraron datos",
                        rpt = 1
                    };
                }
            }
            catch (Exception ex)
            {
                //return new ErrorDA().RegistrarError<VideollamadaMedicoBE>(ex, "WS", "Cita.svc/ObtenerDatosVideollamadaMedico");
                return ClasesGenericas.RegistrarErrorIntranet<VideollamadaMedicoBE>(ex, "WS", "Cita.svc/ObtenerDatosVideollamadaMedico");
            }
        }
        public RespuestaBE<List<NovedadesBE>> ListarNovedades(string tipoDocumento, string numeroDocumento)
        {
            #region Validacion de Parámetros
            //if (string.IsNullOrEmpty(tipoDocumento) || string.IsNullOrEmpty(numeroDocumento))
            //{
            //    throw new WebFaultException(HttpStatusCode.BadRequest);
            //}
            //if (tipoDocumento != "1" && tipoDocumento != "2" && tipoDocumento != "3")
            //{
            //    return new RespuestaBE<List<NovedadesBE>>()
            //    {
            //        rpt = 101,
            //        mensaje = "Sólo se soportan los valores \"1\" (DNI), \"2\" (CE) o \"3\" (PAS) en el parámetro tipoDocumento",
            //        data = null
            //    };
            //}
            //if (numeroDocumento.Length > 20)
            //{
            //    return new RespuestaBE<List<NovedadesBE>>()
            //    {
            //        rpt = 102,
            //        mensaje = "El parámetro numeroDocumento no puede tener más de 20 caracteres",
            //        data = null
            //    };
            //}
            #endregion

            try
            {
                var oRequest = new
                {
                    tipoDocumento = tipoDocumento,
                    numeroDocumento = numeroDocumento
                };
                string strRequest = new JavaScriptSerializer().Serialize(oRequest);
                string response = ClasesGenericas.PostAsyncIntranet("Usuario.svc/ObtenerDatosUsuario/", strRequest, ClasesGenericas.GetHeader(WebOperationContext.Current.IncomingRequest.Headers, "token"));
                RespuestaBE<UsuarioBE> varRespuesta = new JavaScriptSerializer().Deserialize<RespuestaBE<UsuarioBE>>(response);
                if (varRespuesta == null)
                {
                    return new RespuestaBE<List<NovedadesBE>>()
                    {
                        rpt = -1,
                        mensaje = "No se logró procesar la solicitud",
                        data = null
                    };
                }
                if (varRespuesta.rpt != 0)
                {
                    new RespuestaBE<List<NovedadesBE>>()
                    {
                        rpt = varRespuesta.rpt,
                        mensaje = varRespuesta.mensaje,
                        data = null
                    };
                }
                UsuarioBE oUsuario = varRespuesta.data;

                var oRequest2 = new
                {
                    tipoDocumento = oUsuario.tipoDocumento,
                    numeroDocumento = oUsuario.numeroDocumento
                };
                string strRequest2 = new JavaScriptSerializer().Serialize(oRequest2);
                string response2 = ClasesGenericas.PostAsyncIntranet("Cita.svc/ListarNovedades/", strRequest2, ClasesGenericas.GetHeader(WebOperationContext.Current.IncomingRequest.Headers, "token"));
                RespuestaBE<List<NovedadesBE>> varRespuesta2 = new JavaScriptSerializer().Deserialize<RespuestaBE<List<NovedadesBE>>>(response2);
                if (varRespuesta2 == null)
                {
                    return new RespuestaBE<List<NovedadesBE>>()
                    {
                        rpt = -1,
                        mensaje = "No se logró procesar la solicitud",
                        data = null
                    };
                }
                List<NovedadesBE> lNovedadesBE = new List<NovedadesBE>();
                if (varRespuesta2.rpt == 0)
                {
                    lNovedadesBE = varRespuesta2.data;
                    //lNovedadesBE.Add(new NovedadesBE()
                    //{
                    //    sexoMedico = "M",
                    //    fechaAtencion = "25/03/2023",
                    //    horaInicio = "13:00",
                    //    fechaOrdenamiento = new DateTime(2023, 3, 25, 13, 0, 0),
                    //    estado = "Pendiente",
                    //    abreviaturaMedico = "Dr.",
                    //    nombreMedico = "Raúl David Alegre Chang",
                    //    especialidad = "Cardiología",
                    //    nombrePaciente = oUsuario.nombres + " " + oUsuario.apellidoPaterno,
                    //    indicadorHospitalizacion = true,
                    //    cantidadPersonasDelante = "",
                    //    subEspecialidad = ""
                    //});

                    //Hospitalización
                    bool indHospitalizacion = ConfigurationManager.AppSettings["indicadorConectar_Hospitalizacion"].ToString().Equals("1");
                    if (indHospitalizacion)
                    {
                        string urlBaseHospitalizacion = ConfigurationManager.AppSettings["WS_Hospitalizacion"].ToString();
                        string apiKeyHospitalizacion = ConfigurationManager.AppSettings["ApiKey_Hospitalizacion"].ToString();
                        string urlMetodo = "api/ConsultarDatosHospitalizacion";

                        using (var client = new HttpClient())
                        {
                            System.Net.ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls;
                            client.BaseAddress = new Uri(urlBaseHospitalizacion);
                            //HTTP POST
                            RequestHospitalizacionBE oRequestNovedadesBE = new RequestHospitalizacionBE();
                            oRequestNovedadesBE.idAmbulatorio = oUsuario.idAmbulatorio;
                            oRequestNovedadesBE.ApiKey = apiKeyHospitalizacion;

                            string contenidoJson = new JavaScriptSerializer().Serialize(oRequestNovedadesBE);
                            var content = new StringContent(contenidoJson, Encoding.UTF8, "application/json");
                            var responseWS = client.PostAsync(urlMetodo, content);
                            responseWS.Wait();

                            var responseHospitalizacion = responseWS.Result;

                            var response3 = responseHospitalizacion.Content.ReadAsStringAsync();
                            response3.Wait();
                            string strResponse = response3.Result;

                            if (responseHospitalizacion.IsSuccessStatusCode)
                            {
                                List<ResponseHospitalizacionBE> lResponseNovedadesBE = new JavaScriptSerializer().Deserialize<List<ResponseHospitalizacionBE>>(strResponse);
                                string[] aFecha, aHora;
                                if (lResponseNovedadesBE != null)
                                {
                                    NovedadesBE oNovedadesBE;
                                    ResponseHospitalizacionBE oHospitalizacionBE;
                                    string[] aFechaHoraHospitalizacion;
                                    int i = 0, nHospitalizacion = lResponseNovedadesBE.Count;
                                    for (; i < nHospitalizacion; i++)
                                    {
                                        oHospitalizacionBE = lResponseNovedadesBE[i];
                                        oNovedadesBE = new NovedadesBE();

                                        oNovedadesBE.sexoMedico = oHospitalizacionBE.sexo;
                                        aFechaHoraHospitalizacion = oHospitalizacionBE.fechaHora.Split(' ');
                                        oNovedadesBE.fechaAtencion = aFechaHoraHospitalizacion[0];
                                        oNovedadesBE.horaInicio = aFechaHoraHospitalizacion[1];
                                        if (!string.IsNullOrEmpty(oNovedadesBE.fechaAtencion))
                                        {
                                            aFecha = oNovedadesBE.fechaAtencion.Split('/');
                                            aHora = oNovedadesBE.horaInicio.Split(':');
                                            oNovedadesBE.fechaOrdenamiento = new DateTime(int.Parse(aFecha[2]), int.Parse(aFecha[1]), int.Parse(aFecha[0]), int.Parse(aHora[0]), int.Parse(aHora[1]), 0);
                                        }
                                        oNovedadesBE.estado = oHospitalizacionBE.desEstado;
                                        oNovedadesBE.abreviaturaMedico = oNovedadesBE.sexoMedico.Equals("M") ? "Dr." : "Dra.";
                                        oNovedadesBE.nombreMedico = oHospitalizacionBE.nomMedico;
                                        oNovedadesBE.especialidad = oHospitalizacionBE.desEspecialidad;
                                        oNovedadesBE.nombrePaciente = oHospitalizacionBE.nombres + " " + oHospitalizacionBE.apellidoPaterno;
                                        oNovedadesBE.indicadorHospitalizacion = true;
                                        oNovedadesBE.cantidadPersonasDelante = "";
                                        oNovedadesBE.subEspecialidad = "";
                                        oNovedadesBE.descripcionPago = "Admisión Hospitalaria";
                                        oNovedadesBE.codAtencion = oHospitalizacionBE.codAtencion;
                                        oNovedadesBE.idAmbulatorio = oHospitalizacionBE.idAmbulatorio;
                                        oNovedadesBE.ultimoPaso = oHospitalizacionBE.ultimoPaso;

                                        lNovedadesBE.Add(oNovedadesBE);
                                    }
                                }
                            }
                        }
                    }
                }

                return new RespuestaBE<List<NovedadesBE>>()
                {
                    rpt = 0,
                    mensaje = "",
                    data = lNovedadesBE.OrderBy(p => p.fechaOrdenamiento).ToList()
                };
            }
            catch (Exception ex)
            {
                //return new ErrorDA().RegistrarError<List<NovedadesBE>>(ex, "WS", "Cita.svc");
                return ClasesGenericas.RegistrarErrorIntranet<List<NovedadesBE>>(ex, "WS", "Cita.svc/ListarNovedades");
            }
        }
        public RespuestaSimpleBE CrearTurnoPaciente(string idCitaPresencial, string idCitaVirtual, string origen, string origenBMatic, string idUsuario, string observaciones)
        {
            #region Validacion de Parámetros
            if (string.IsNullOrEmpty(idCitaPresencial) && string.IsNullOrEmpty(idCitaVirtual))
            {
                throw new WebFaultException(HttpStatusCode.BadRequest);
            }
            if (!string.IsNullOrEmpty(idCitaPresencial) && !string.IsNullOrEmpty(idCitaVirtual))
            {
                return new RespuestaSimpleBE()
                {
                    rpt = 100,
                    mensaje = "Solo enviar el parámetro idCitaPresencial o idCitaVirtual",
                    data = null
                };
            }
            int varIDCita;
            if (!string.IsNullOrEmpty(idCitaPresencial))
            {
                if (!int.TryParse(idCitaPresencial, out varIDCita))
                {
                    return new RespuestaSimpleBE()
                    {
                        rpt = 101,
                        mensaje = "El parámetro idCitaPresencial debe ser numérico",
                        data = null
                    };
                }
            }
            if (!string.IsNullOrEmpty(idCitaVirtual))
            {
                if (!int.TryParse(idCitaVirtual, out varIDCita))
                {
                    return new RespuestaSimpleBE()
                    {
                        rpt = 102,
                        mensaje = "El parámetro idCitaVirtual debe ser numérico",
                        data = null
                    };
                }
            }
            //beOrigenResponse obeOrigen = fnValidarOrigen(origen);
            //if (!obeOrigen.IndValido)
            //{
            //    return new RespuestaSimpleBE()
            //    {
            //        rpt = 103,
            //        mensaje = obeOrigen.Mensaje,
            //        data = null
            //    };
            //}

            if (String.IsNullOrEmpty(origenBMatic)) 
                origenBMatic = "EXT";

            if (origenBMatic != "EXT" && origenBMatic != "INT")
            {
                //,
                return new RespuestaSimpleBE()
                {
                    rpt = 104,
                    mensaje = "Sólo se soportan los valores EXT o INT en el parámetro origenBMatic", //INT => Interno (CitasWeb/BMatic), EXT => Externo (Portal y App)
                    data = null
                };
            }
            #endregion
            try
            {
                RespuestaBE<TurnoPacienteBE> varRespuesta = new RespuestaBE<TurnoPacienteBE>();
                string idCita = !String.IsNullOrEmpty(idCitaPresencial) ? idCitaPresencial : "";
                if (String.IsNullOrEmpty(idCita))
                {
                    idCita = !String.IsNullOrEmpty(idCitaVirtual) ? idCitaVirtual : "";
                }

                var oRequest = new
                {
                    idCitaPresencial = idCitaPresencial,
                    idCitaVirtual = idCitaVirtual,
                    origen = origen,
                    origenBMatic = origenBMatic,
                    idUsuario = idUsuario,
                    observaciones = observaciones
                };
                string strRequest = new JavaScriptSerializer().Serialize(oRequest);
                string response = ClasesGenericas.PostAsyncIntranet("Cita.svc/CrearTurnoPaciente/", strRequest, ClasesGenericas.GetHeader(WebOperationContext.Current.IncomingRequest.Headers, "token"));
                varRespuesta = new JavaScriptSerializer().Deserialize<RespuestaBE<TurnoPacienteBE>>(response);

                if (varRespuesta == null)
                {
                    return new RespuestaSimpleBE()
                    {
                        rpt = -1,
                        mensaje = "No se logró procesar la solicitud",
                        data = null
                    };
                }

                TurnoPacienteBE oTurnoPacienteBE = varRespuesta.data;
                if (oTurnoPacienteBE.indGestorColasWS)
                {
                    string urlBase = ConfigurationManager.AppSettings["WS_GestorColas"].ToString();
                    string urlMetodo = "";
                    string apiKey = ConfigurationManager.AppSettings["ApiKey_GestorColas"] != null ? ConfigurationManager.AppSettings["ApiKey_GestorColas"].ToString() : "";
                    string codigoError = "", descripcionError = "";
                    try
                    {
                        using (var client = new HttpClient())
                        {
                            string idCitaCifrada = CifradoAES256.EncryptStringAES256(oTurnoPacienteBE.idCita);
                            client.BaseAddress = new Uri(urlBase);
                            client.DefaultRequestHeaders.Add("AuthorizationSoftvan", apiKey);
                            //HTTP GET
                            urlMetodo = "CrearTurnoPaciente?id_cita=" + idCitaCifrada;
                            var responseTaskOne = client.GetAsync(urlMetodo);
                            responseTaskOne.Wait();
                            var resultOne = responseTaskOne.Result;
                            if (!resultOne.IsSuccessStatusCode)
                            {
                                codigoError = resultOne.StatusCode.ToString();
                                descripcionError = resultOne.ReasonPhrase;
                                //new CitaDA().CrearTurnoPaciente_Log(oTurnoPacienteBE.idCita, codigoError, descripcionError, origenBMatic);
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        //HttpRequestException
                        descripcionError = ex.Message + "\r\n";
                        descripcionError += "URL: " + urlBase + urlMetodo + "\r\n";
                        descripcionError += "Header: [AuthorizationSoftvan: " + apiKey + "]";
                        //new CitaDA().CrearTurnoPaciente_Log(oTurnoPacienteBE.idCita, "", descripcionError, origenBMatic);
                    }
                    finally
                    {
                        var oRequest2 = new
                        {
                            idCita = idCita,
                            codigoError = codigoError,
                            descripcionError = descripcionError,
                            origenBMatic = origenBMatic
                        };
                        string strRequest2 = new JavaScriptSerializer().Serialize(oRequest2);
                        string response2 = ClasesGenericas.PostAsyncIntranet("Cita.svc/CrearTurnoPaciente_Log/", strRequest2, ClasesGenericas.GetHeader(WebOperationContext.Current.IncomingRequest.Headers, "token"));
                        RespuestaSimpleBE varRespuesta2 = new JavaScriptSerializer().Deserialize<RespuestaSimpleBE>(response2);
                    }
                }
                return new RespuestaSimpleBE()
                {
                    rpt = varRespuesta.rpt,
                    mensaje = varRespuesta.mensaje,
                    data = null
                };
            }
            catch (Exception ex)
            {
                //return new ErrorDA().RegistrarError(ex, "WS", "Cita.svc/CrearTurnoPaciente");
                return ClasesGenericas.RegistrarErrorIntranet(ex, "WS", "Cita.svc/CrearTurnoPaciente");
            }
        }
        public RespuestaSimpleBE RegistrarRoomSid(string idCitaVirtual, string origen, string room_sid, bool esMedico)
        {
            #region Validacion de Parámetros
            if (string.IsNullOrEmpty(idCitaVirtual) || string.IsNullOrEmpty(room_sid))
            {
                throw new WebFaultException(HttpStatusCode.BadRequest);
            }
            int varIDCita;
            if (!string.IsNullOrEmpty(idCitaVirtual))
            {
                if (!int.TryParse(idCitaVirtual, out varIDCita))
                {
                    return new RespuestaSimpleBE()
                    {
                        rpt = 100,
                        mensaje = "El parámetro idCitaVirtual debe ser numérico",
                        data = null
                    };
                }
            }
            //beOrigenResponse obeOrigen = fnValidarOrigen(origen);
            //if (!obeOrigen.IndValido)
            //{
            //    return new RespuestaSimpleBE()
            //    {
            //        rpt = 101,
            //        mensaje = obeOrigen.Mensaje,
            //        data = null
            //    };
            //}
            #endregion
            try
            {
                var oRequest = new
                {
                    idCitaVirtual = idCitaVirtual,
                    origen = origen,
                    room_sid = room_sid,
                    esMedico = esMedico
                };
                string strRequest = new JavaScriptSerializer().Serialize(oRequest);
                string response = ClasesGenericas.PostAsyncIntranet("Cita.svc/RegistrarRoomSid/", strRequest, ClasesGenericas.GetHeader(WebOperationContext.Current.IncomingRequest.Headers, "token"));
                RespuestaSimpleBE varRespuesta = new JavaScriptSerializer().Deserialize<RespuestaSimpleBE>(response);

                if (varRespuesta == null)
                {
                    return new RespuestaSimpleBE()
                    {
                        rpt = -1,
                        mensaje = "No se logró procesar la solicitud",
                        data = null
                    };
                }

                return varRespuesta;
            }
            catch (Exception ex)
            {
                //return new ErrorDA().RegistrarError(ex, "WS", "Cita.svc/RegistrarRoomSid");
                return ClasesGenericas.RegistrarErrorIntranet(ex, "WS", "Cita.svc/RegistrarRoomSid");
            }
        }
        public RespuestaSimpleBE ActualizarEstadoVideollamada(string type, string status, string room_name, List<VideollamadaTwilioSidBE> twilio_room_sid)
        {
            #region Validacion de Parámetros
            if (string.IsNullOrEmpty(type) || string.IsNullOrEmpty(status) || string.IsNullOrEmpty(room_name))
            {
                throw new WebFaultException(HttpStatusCode.BadRequest);
            }
            int varStatus;
            if (!string.IsNullOrEmpty(status))
            {
                if (!int.TryParse(status, out varStatus))
                {
                    return new RespuestaSimpleBE()
                    {
                        rpt = 100,
                        mensaje = "El parámetro status debe ser numérico",
                        data = null
                    };
                }
            }
            #endregion
            try
            {

                var oRequest = new
                {
                    type = type,
                    status = status,
                    room_name = room_name,
                    twilio_room_sid = twilio_room_sid
                };
                string strRequest = new JavaScriptSerializer().Serialize(oRequest);
                string response = ClasesGenericas.PostAsyncIntranet("Cita.svc/ActualizarEstadoVideollamada/", strRequest, ClasesGenericas.GetHeader(WebOperationContext.Current.IncomingRequest.Headers, "token"));
                RespuestaSimpleBE varRespuesta = new JavaScriptSerializer().Deserialize<RespuestaSimpleBE>(response);

                if (varRespuesta == null)
                {
                    return new RespuestaSimpleBE()
                    {
                        rpt = -1,
                        mensaje = "No se logró procesar la solicitud",
                        data = null
                    };
                }
                return varRespuesta;
            }
            catch (Exception ex)
            {
                return ClasesGenericas.RegistrarErrorIntranet(ex, "WS", "Cita.svc/ActualizarEstadoVideollamada");
            }
        }
        public RespuestaBE<ListarOpcionesPagoBE> ListarOpcionesPago(string tipoDocumento, string numeroDocumento, string idCitaPresencial, string idCitaVirtual, string tipoPaciente,
            string requierePasarela, string nuevaPasarela)
        {
            #region Validacion de Parámetros
            if (string.IsNullOrEmpty(tipoDocumento) || string.IsNullOrEmpty(numeroDocumento))
            {
                throw new WebFaultException(HttpStatusCode.BadRequest);
            }
            if (string.IsNullOrEmpty(idCitaPresencial) && string.IsNullOrEmpty(idCitaVirtual))
            {
                throw new WebFaultException(HttpStatusCode.BadRequest);
            }
            if (tipoDocumento != "1" && tipoDocumento != "2" && tipoDocumento != "3")
            {
                return new RespuestaBE<ListarOpcionesPagoBE>()
                {
                    rpt = 100,
                    mensaje = "Sólo se soportan los valores \"1\" (DNI), \"2\" (CE) o \"3\" (PAS) en el parámetro tipoDocumento",
                    data = null
                };
            }
            if (numeroDocumento.Length > 20)
            {
                return new RespuestaBE<ListarOpcionesPagoBE>()
                {
                    rpt = 101,
                    mensaje = "El parámetro numeroDocumento no puede tener más de 20 caracteres",
                    data = null
                };
            }
            if (!string.IsNullOrEmpty(idCitaPresencial) && !string.IsNullOrEmpty(idCitaVirtual))
            {
                return new RespuestaBE<ListarOpcionesPagoBE>()
                {
                    rpt = 102,
                    mensaje = "Solo enviar el parámetro idCitaPresencial o idCitaVirtual",
                    data = null
                };
            }
            int varIDCita;
            if (!string.IsNullOrEmpty(idCitaPresencial))
            {
                if (!int.TryParse(idCitaPresencial, out varIDCita))
                {
                    return new RespuestaBE<ListarOpcionesPagoBE>()
                    {
                        rpt = 103,
                        mensaje = "El parámetro idCitaPresencial debe ser numérico",
                        data = null
                    };
                }
            }
            if (!string.IsNullOrEmpty(idCitaVirtual))
            {
                if (!int.TryParse(idCitaVirtual, out varIDCita))
                {
                    return new RespuestaBE<ListarOpcionesPagoBE>()
                    {
                        rpt = 104,
                        mensaje = "El parámetro idCitaVirtual debe ser numérico",
                        data = null
                    };
                }
            }
            if (!String.IsNullOrEmpty(tipoPaciente) && tipoPaciente != "1" && tipoPaciente != "2" && tipoPaciente != "3")
            {
                return new RespuestaBE<ListarOpcionesPagoBE>()
                {
                    rpt = 105,
                    mensaje = "Sólo se soportan los valores \"1\" (Asegurado), \"2\" (Particular) o \"3\" (Asegurado y Particular) en el parámetro tipoPaciente",
                    data = null
                };
            }
            #endregion
            try
            {
                requierePasarela = string.IsNullOrEmpty(requierePasarela) ? "1" : requierePasarela;
                //nuevoFormulario: Nuevo formulario Izipay => 0: Antiguo formulario y 1: Nuevo formulario
                nuevaPasarela = !string.IsNullOrEmpty(nuevaPasarela) ? nuevaPasarela : "0";
                var oRequest = new
                {
                    tipoDocumento = tipoDocumento,
                    numeroDocumento = numeroDocumento,
                    idCitaPresencial = idCitaPresencial,
                    idCitaVirtual = idCitaVirtual,
                    tipoPaciente = tipoPaciente,
                    requierePasarela = requierePasarela,
                    nuevaPasarela = nuevaPasarela
                };
                string strRequest = new JavaScriptSerializer().Serialize(oRequest);
                string response = ClasesGenericas.PostAsyncIntranet("Cita.svc/ListarOpcionesPago/", strRequest, ClasesGenericas.GetHeader(WebOperationContext.Current.IncomingRequest.Headers, "token"));
                RespuestaBE<ListarOpcionesPagoBE> varRespuesta = new JavaScriptSerializer().Deserialize<RespuestaBE<ListarOpcionesPagoBE>>(response);

                if (varRespuesta == null)
                {
                    return new RespuestaBE<ListarOpcionesPagoBE>()
                    {
                        rpt = -1,
                        mensaje = "No se logró procesar la solicitud",
                        data = null
                    };
                }

                return varRespuesta;
            }
            catch (Exception ex)
            {
                return new RespuestaBE<ListarOpcionesPagoBE>()
                {
                    rpt = 81,
                    mensaje = "Lo sentimos, no se pudo procesar el pago en estos momentos. Por favor vuelve a intentarlo en unos minutos; de lo contrario puedes llamar a nuestro Contact Center al (01) 219-0000.",
                    data = new ListarOpcionesPagoBE()
                };
            }
        }
        public RespuestaSimpleBE ReprogramarCitaAdicional(string tipoDocumento, string numeroDocumento, string idCita,
                                        string idHorarioDetalle, string fecha, string horaInicio, string origen,
                                        string observaciones, string tipoCita, string esChequeo, string tipoCobertura,
                                        string origenOpcion)
        {
            #region Validacion de Parámetros
            if (string.IsNullOrEmpty(tipoDocumento) || string.IsNullOrEmpty(numeroDocumento) || string.IsNullOrEmpty(idCita) ||
                string.IsNullOrEmpty(idHorarioDetalle) || string.IsNullOrEmpty(fecha) || string.IsNullOrEmpty(horaInicio) ||
                string.IsNullOrEmpty(origen))
            {
                throw new WebFaultException(HttpStatusCode.BadRequest);
            }
            if (tipoDocumento != "1" && tipoDocumento != "2" && tipoDocumento != "3")
            {
                return new RespuestaSimpleBE()
                {
                    rpt = 101,
                    mensaje = "Sólo se soportan los valores \"1\" (DNI), \"2\" (CE) o \"3\" (PAS) en el parámetro tipoDocumento",
                    data = null
                };
            }
            if (numeroDocumento.Length > 20)
            {
                return new RespuestaSimpleBE()
                {
                    rpt = 102,
                    mensaje = "El parámetro numeroDocumento no puede tener más de 20 caracteres",
                    data = null
                };
            }
            int varIDCita;
            if (!int.TryParse(idCita, out varIDCita))
            {
                return new RespuestaSimpleBE()
                {
                    rpt = 103,
                    mensaje = "El parámetro idCita debe ser numérico",
                    data = null
                };
            }
            int varIDHorarioDetalle;
            if (idHorarioDetalle.Split('|').Length != 2 ||
                !int.TryParse(idHorarioDetalle.Split('|')[0], out varIDHorarioDetalle) ||
                !int.TryParse(idHorarioDetalle.Split('|')[1], out varIDHorarioDetalle))
            {
                return new RespuestaSimpleBE()
                {
                    rpt = 104,
                    mensaje = "El parámetro idHorarioDetalle debe ser numérico",
                    data = null
                };
            }

            TimeSpan varHoraInicio;
            if (!TimeSpan.TryParse(horaInicio, out varHoraInicio))
            {
                return new RespuestaSimpleBE()
                {
                    rpt = 105,
                    mensaje = "El parámetro horaInicio debe ser de tipo hora (hh:mm)",
                    data = null
                };
            }

            //beOrigenResponse obeOrigen = fnValidarOrigen(origen);
            //if (!obeOrigen.IndValido)
            //{
            //    return new RespuestaSimpleBE()
            //    {
            //        rpt = 106,
            //        mensaje = obeOrigen.Mensaje,
            //        data = null
            //    };
            //}

            if (string.IsNullOrEmpty(observaciones))
                observaciones = "";

            if (string.IsNullOrEmpty(tipoCita))
                tipoCita = "1";

            int varTipoCita;
            if (!int.TryParse(tipoCita, out varTipoCita))
            {
                return new RespuestaSimpleBE()
                {
                    rpt = 107,
                    mensaje = "El parámetro TipoCita debe ser numérico",
                    data = null
                };
            }

            if (string.IsNullOrEmpty(esChequeo))
                esChequeo = "false";
            bool varEsChequeo;
            if (!bool.TryParse(esChequeo, out varEsChequeo))
            {
                return new RespuestaSimpleBE()
                {
                    rpt = 108,
                    mensaje = "El parámetro esChequeo debe ser True o False",
                    data = null
                };
            }

            if (string.IsNullOrEmpty(tipoCobertura))
            {
                tipoCobertura = "0";
            }

            int varTipoCobertura;
            if (!int.TryParse(tipoCobertura, out varTipoCobertura))
            {
                return new RespuestaSimpleBE()
                {
                    rpt = 109,
                    mensaje = "El parámetro TipoCobertura debe ser numérico",
                    data = null
                };
            }
            #endregion
            RespuestaSimpleBE varRespuesta = new RespuestaSimpleBE();
            try
            {
                var oRequest = new
                {
                    tipoDocumento = tipoDocumento,
                    numeroDocumento = numeroDocumento,
                    idCita = idCita,
                    idHorarioDetalle = idHorarioDetalle,
                    fecha = fecha,
                    horaInicio = horaInicio,
                    origen = origen,
                    observaciones = observaciones,
                    tipoCita = tipoCita,
                    esChequeo = esChequeo,
                    tipoCobertura = tipoCobertura,
                    origenOpcion = origenOpcion
                };
                string strRequest = new JavaScriptSerializer().Serialize(oRequest);
                string response = ClasesGenericas.PostAsyncIntranet("Cita.svc/ReprogramarCitaAdicional/", strRequest, ClasesGenericas.GetHeader(WebOperationContext.Current.IncomingRequest.Headers, "token"));
                RespuestaBE<ReprogramarCitaBE> varRespuesta2 = new JavaScriptSerializer().Deserialize<RespuestaBE<ReprogramarCitaBE>>(response);

                if (varRespuesta2 == null)
                {
                    return new RespuestaSimpleBE()
                    {
                        rpt = -1,
                        mensaje = "No se logró procesar la solicitud",
                        data = null
                    };
                }

                if (varRespuesta2.rpt == 0)
                {
                    string idCitaRpt = varRespuesta2.data.idCita;
                    varRespuesta.data = idCitaRpt;
                    varRespuesta.mensaje = varRespuesta2.mensaje; //Correo del paciente
                    bool statusEnvioEmail = false;
                    if (varRespuesta2.data.enviarCorreo)
                    {
                        statusEnvioEmail = enviarCorreoCitaPresencial(idCitaRpt, origen);
                    }
                    varRespuesta.mensaje = statusEnvioEmail ? varRespuesta.mensaje : "";
                    if (varRespuesta2.data.procesarPago)
                    {
                        bool pagoRoyal = RegistroPagoRoyal(idCitaRpt, varRespuesta2.data.tarjeta, varRespuesta2.data.tipoTarjeta, 1);
                    }
                }
            }
            catch (Exception ex)
            {
                //return new ErrorDA().RegistrarError(ex, "WS", "Cita.svc");
                return ClasesGenericas.RegistrarErrorIntranet(ex, "WS", "Cita.svc");
            }
            return varRespuesta;
        }
        public RespuestaBE<List<ObjetoQRBE>> ListarQR(string tipoDocumento, string numeroDocumento)
        {
            #region Validacion de Parámetros
            
            #endregion
            try
            {
                RespuestaBE<List<ObjetoQRBE>> oResponse = new RespuestaBE<List<ObjetoQRBE>>();
                List<ObjetoQRBE> lQR = new List<ObjetoQRBE>();
                string tokenSesion = ClasesGenericas.GetHeader(WebOperationContext.Current.IncomingRequest.Headers, "token");

                var oRequestTmp = new
                {
                    tokenSesion = tokenSesion,
                    tipoDocumento = tipoDocumento,
                    numeroDocumento = numeroDocumento,
                    validarFamiliar = false
                };
                string strRequestTmp = new JavaScriptSerializer().Serialize(oRequestTmp);
                string responseTmp = ClasesGenericas.PostAsyncIntranet("Usuario.svc/ObtenerPorToken/", strRequestTmp, ClasesGenericas.GetHeader(WebOperationContext.Current.IncomingRequest.Headers, "token"));
                RespuestaBE<UsuarioDocumentoBE> varRespuestaTmp = new JavaScriptSerializer().Deserialize<RespuestaBE<UsuarioDocumentoBE>>(responseTmp);

                if (varRespuestaTmp == null)
                {
                    return new RespuestaBE<List<ObjetoQRBE>>()
                    {
                        rpt = -1,
                        mensaje = "No se logró procesar la solicitud",
                        data = null
                    };
                }
                if (varRespuestaTmp.rpt != 0)
                {
                    return new RespuestaBE<List<ObjetoQRBE>>()
                    {
                        rpt = varRespuestaTmp.rpt,
                        mensaje = varRespuestaTmp.mensaje,
                        data = null
                    };
                }
                UsuarioDocumentoBE oUsuario = varRespuestaTmp.data;

                #region Integración
                QR_RespuestaSimpleBE oRespuestaSimpleBE = new QR_RespuestaSimpleBE();
                QR_RespuestaBE<List<QR_ObjetoQRResponseBE>> oRespuestaQRBE = new QR_RespuestaBE<List<QR_ObjetoQRResponseBE>>();

                string urlBase = "", urlMetodo = "";
                string token = "";
                System.Net.ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls;
                using (var client = new HttpClient())
                {
                    urlBase = ClasesGenericas.GetSetting("WS_QR").ToString();
                    client.BaseAddress = new Uri(urlBase);
                    QR_LoginBE oRequest = new QR_LoginBE();
                    oRequest.usuario = ClasesGenericas.GetSetting("WS_QR_Usuario");
                    oRequest.password = ClasesGenericas.GetSetting("WS_QR_Clave");
                    var content = new StringContent(JsonConvert.SerializeObject(oRequest).ToString(), Encoding.UTF8, "application/json");
                    urlMetodo = "usuario/login";
                    client.DefaultRequestHeaders.Accept.Clear();
                    client.DefaultRequestHeaders.Add("User-Agent", "CSF_WS/" + ClasesGenericas.GetSetting("_VersionApp"));
                    client.DefaultRequestHeaders.Add("Accept", "*/*");
                    client.DefaultRequestHeaders.Add("Connection", "keep-alive");
                    var responseTaskOne = client.PostAsync(urlMetodo, content);
                    responseTaskOne.Wait();

                    var resultOne = responseTaskOne.Result;

                    string rptaTaskOne = "";
                    if (resultOne.IsSuccessStatusCode)
                    {
                        var readTaskOne = resultOne.Content.ReadAsStringAsync();
                        readTaskOne.Wait();
                        rptaTaskOne = readTaskOne.Result;
                        oRespuestaSimpleBE = JsonConvert.DeserializeObject<QR_RespuestaSimpleBE>(rptaTaskOne);
                        if (oRespuestaSimpleBE.success)
                        {
                            token = oRespuestaSimpleBE.result;
                            client.DefaultRequestHeaders.Add("Authorization", "Bearer " + token);
                            QR_ListarQRBE oListarQRBE = new QR_ListarQRBE();
                            oListarQRBE.tipoDocumento = oUsuario.tipoDocumento;
                            oListarQRBE.numeroDocumento = oUsuario.numeroDocumento;
                            content = new StringContent(JsonConvert.SerializeObject(oListarQRBE).ToString(), Encoding.UTF8, "application/json");
                            urlMetodo = "AgendaCita/ObtenerQR";
                            var responseTaskTwo = client.PostAsync(urlMetodo, content);
                            responseTaskTwo.Wait();

                            var resultTwo = responseTaskTwo.Result;

                            string rptaTaskTwo = "";
                            if (resultTwo.IsSuccessStatusCode)
                            {
                                var readTaskTwo = resultTwo.Content.ReadAsStringAsync();
                                readTaskTwo.Wait();
                                rptaTaskTwo = readTaskTwo.Result;
                                oRespuestaQRBE = JsonConvert.DeserializeObject<QR_RespuestaBE<List<QR_ObjetoQRResponseBE>>>(rptaTaskTwo);
                                if (oRespuestaQRBE.success)
                                {
                                    int i = 0, nRegistros = oRespuestaQRBE.result.Count;
                                    ObjetoQRBE oQR;
                                    for (; i < nRegistros; i++)
                                    {
                                        oQR = new ObjetoQRBE();
                                        oQR.paciente = oRespuestaQRBE.result[i].paciente;
                                        oQR.fecha = oRespuestaQRBE.result[i].fecha;
                                        oQR.hora = oRespuestaQRBE.result[i].hora;
                                        oQR.doctor = oRespuestaQRBE.result[i].doctor;
                                        oQR.nombreEspecialidad = oRespuestaQRBE.result[i].nombreEspecialidad;
                                        oQR.url_qr = oRespuestaQRBE.result[i].url_qr;
                                        oQR.cod_atencion = oRespuestaQRBE.result[i].cod_atencion;
                                        oQR.tipoServicio = oRespuestaQRBE.result[i].tipoServicio;
                                        lQR.Add(oQR);
                                    }
                                    oResponse.rpt = 0;
                                    oResponse.data = lQR;
                                }
                                else
                                {
                                    oResponse.rpt = 4;
                                    oResponse.mensaje = oRespuestaQRBE.message;
                                }
                            }
                            else
                            {
                                oResponse.rpt = 3;
                                oResponse.mensaje = "QR: Error en comunicación";
                            }
                        }
                        else
                        {
                            oResponse.rpt = 2;
                            oResponse.mensaje = oRespuestaSimpleBE.message;
                        }
                    }
                    else
                    {
                        oResponse.rpt = 1;
                        oResponse.mensaje = "Autenticación: Error en comunicación";
                    }
                }
                #endregion

                #region Data de prueba
                //ObjetoQRBE oObjetoQRBE = new ObjetoQRBE();
                //oObjetoQRBE.paciente = "MONGE COMBÉ CAMILA";
                //oObjetoQRBE.fecha = "16/02/2024";
                //oObjetoQRBE.hora = "20:10";
                //oObjetoQRBE.doctor = "DR.QUIROZ SANCHEZ AMADO FABRIZIO";
                //oObjetoQRBE.nombreEspecialidad = "CARDIOLOGIA";
                //oObjetoQRBE.url_qr = "https://pruebas.clinicasanfelipe.com/File/qr/20240216124554c9888f5-a6A5465380.jpg";
                //oObjetoQRBE.cod_atencion = "A5465380";
                //oObjetoQRBE.tipoServicio = "C";
                //lQR.Add(oObjetoQRBE);
                //oObjetoQRBE = new ObjetoQRBE();
                //oObjetoQRBE.paciente = "BENITES MORENO MIREYA MILAGROS";
                //oObjetoQRBE.fecha = "16/02/2024";
                //oObjetoQRBE.hora = "20:00";
                //oObjetoQRBE.doctor = "DR.QUIROZ SANCHEZ AMADO FABRIZIO";
                //oObjetoQRBE.nombreEspecialidad = "CARDIOLOGIA";
                //oObjetoQRBE.url_qr = "https://pruebas.clinicasanfelipe.com/File/qr/2024021609391315d4831-17A5465379.jpg";
                //oObjetoQRBE.cod_atencion = "A5465379";
                //oObjetoQRBE.tipoServicio = "C";
                //lQR.Add(oObjetoQRBE);
                //oObjetoQRBE = new ObjetoQRBE();
                //oObjetoQRBE.paciente = "BENITES MORENO MIREYA MILAGROS";
                //oObjetoQRBE.fecha = "16/02/2024";
                //oObjetoQRBE.hora = "18:00";
                //oObjetoQRBE.doctor = "DR.QUIROZ SANCHEZ AMADO FABRIZIO";
                //oObjetoQRBE.nombreEspecialidad = "DERMATOLOGIA";
                //oObjetoQRBE.url_qr = "https://pruebas.clinicasanfelipe.com/File/qr/2024021617212906afd60-f9A5465382.jpg";
                //oObjetoQRBE.cod_atencion = "A5465382";
                //oObjetoQRBE.tipoServicio = "C";
                //lQR.Add(oObjetoQRBE);
                //oObjetoQRBE = new ObjetoQRBE();
                //oObjetoQRBE.paciente = "BENITES MORENO MIREYA MILAGROS";
                //oObjetoQRBE.fecha = "16/02/2024";
                //oObjetoQRBE.hora = "12:28";
                //oObjetoQRBE.doctor = "DR.QUIROZ SANCHEZ AMADO FABRIZIO";
                //oObjetoQRBE.nombreEspecialidad = "EN ATENCION";
                //oObjetoQRBE.url_qr = "https://pruebas.clinicasanfelipe.com/File/qr/202402161229008f82ae0-b4H0196030.jpg";
                //oObjetoQRBE.cod_atencion = "H0196030";
                //oObjetoQRBE.tipoServicio = "H";
                //lQR.Add(oObjetoQRBE);
                //oObjetoQRBE = new ObjetoQRBE();
                //oObjetoQRBE.paciente = "MONGE COMBÉ CAMILA";
                //oObjetoQRBE.fecha = "16/02/2024";
                //oObjetoQRBE.hora = "09:54";
                //oObjetoQRBE.doctor = "DR.QUIROZ SANCHEZ AMADO FABRIZIO";
                //oObjetoQRBE.nombreEspecialidad = "EN ATENCION";
                //oObjetoQRBE.url_qr = "https://pruebas.clinicasanfelipe.com/File/qr/2024021519113644a891b-52H0196028.jpg";
                //oObjetoQRBE.cod_atencion = "H0196029";
                //oObjetoQRBE.tipoServicio = "H";
                //lQR.Add(oObjetoQRBE);
                ////oResponse.data = lQR;
                #endregion

                return oResponse;
            }
            catch (Exception ex)
            {
                //return new ErrorDA().RegistrarError<List<ObjetoQRBE>>(ex, "WS", "Cita.svc/ListarQR");
                return ClasesGenericas.RegistrarErrorIntranet<List<ObjetoQRBE>>(ex, "WS", "Cita.svc/ListarQR");
            }
        }

        public RespuestaSimpleBE ObtenerReporte(string tipoDocumento, string numeroDocumento, string codigoAtencion, string codigoPaciente, string tipoReporte, string codigoCpt)
        {
            #region Validacion de Parámetros
            if (string.IsNullOrEmpty(codigoAtencion) || (string.IsNullOrEmpty(codigoPaciente) && string.IsNullOrEmpty(codigoCpt)) || string.IsNullOrEmpty(tipoReporte))
            {
                throw new WebFaultException(HttpStatusCode.BadRequest);
            }
            //if (tipoReporte != "Receta" && tipoReporte != "HojaDeRuta")
            //{
            //    return new RespuestaSimpleBE()
            //    {
            //        rpt = 100,
            //        mensaje = "Sólo se soportan los valores \"1\" (Receta) o \"2\" (HojaDeRuta) en el parámetro tipoReporte",
            //        data = null
            //    };
            //}
            if (!string.IsNullOrEmpty(codigoPaciente) && !string.IsNullOrEmpty(codigoCpt))
            {
                return new RespuestaSimpleBE()
                {
                    rpt = 101,
                    mensaje = "Solo enviar el parámetro codigoPaciente o codigoCpt",
                    data = null
                };
            }
            int varCodigoPaciente;
            if (!string.IsNullOrEmpty(codigoPaciente))
            {
                if (!int.TryParse(codigoPaciente, out varCodigoPaciente))
                {
                    return new RespuestaSimpleBE()
                    {
                        rpt = 102,
                        mensaje = "El parámetro codigoPaciente debe ser numérico",
                        data = null
                    };
                }
            }
            int varCodigoCpt;
            if (!string.IsNullOrEmpty(codigoCpt))
            {
                if (!int.TryParse(codigoCpt, out varCodigoCpt))
                {
                    return new RespuestaSimpleBE()
                    {
                        rpt = 103,
                        mensaje = "El parámetro codigoCpt debe ser numérico",
                        data = null
                    };
                }
            }
            #endregion
            try
            {
                RespuestaSimpleBE oResponse = new RespuestaSimpleBE();
                string tokenSesion = ClasesGenericas.GetHeader(WebOperationContext.Current.IncomingRequest.Headers, "token");
                var oRequestTmp = new
                {
                    tokenSesion = tokenSesion,
                    tipoDocumento = tipoDocumento,
                    numeroDocumento = numeroDocumento,
                    validarFamiliar = true
                };
                string strRequestTmp = new JavaScriptSerializer().Serialize(oRequestTmp);
                string responseTmp = ClasesGenericas.PostAsyncIntranet("Usuario.svc/ObtenerPorToken/", strRequestTmp, ClasesGenericas.GetHeader(WebOperationContext.Current.IncomingRequest.Headers, "token"));
                RespuestaBE<UsuarioDocumentoBE> varRespuestaTmp = new JavaScriptSerializer().Deserialize<RespuestaBE<UsuarioDocumentoBE>>(responseTmp);

                if (varRespuestaTmp == null)
                {
                    return new RespuestaSimpleBE()
                    {
                        rpt = -1,
                        mensaje = "No se logró procesar la solicitud",
                        data = null
                    };
                }
                if (varRespuestaTmp.rpt != 0)
                {
                    return new RespuestaSimpleBE()
                    {
                        rpt = varRespuestaTmp.rpt,
                        mensaje = varRespuestaTmp.mensaje,
                        data = null
                    };
                }
                UsuarioDocumentoBE oUsuario = varRespuestaTmp.data;

                WebOperationContext oContext = WebOperationContext.Current;
                if (!(oUsuario.tipoDocumento == tipoDocumento
                    && oUsuario.numeroDocumento == numeroDocumento))
                {
                    return new RespuestaSimpleBE()
                    {
                        rpt = 104,
                        mensaje = "Usuario inválido",
                        data = null
                    };
                    //oContext.OutgoingResponse.StatusCode = HttpStatusCode.BadRequest;
                    //return null;
                }
                #region Integración con San Felipe
                QR_RespuestaSimpleBE oRespuestaSimpleBE = new QR_RespuestaSimpleBE();
                QR_RespuestaBE<REHR_ReporteByteResponseBE> oRespuestaQRBE = new QR_RespuestaBE<REHR_ReporteByteResponseBE>();

                string urlBase = "", urlMetodo = "";
                string token = "";
                System.Net.ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls;
                using (var client = new HttpClient())
                {
                    urlBase = ClasesGenericas.GetSetting("WS_QR").ToString();
                    client.BaseAddress = new Uri(urlBase);
                    QR_LoginBE oRequest = new QR_LoginBE();
                    oRequest.usuario = ClasesGenericas.GetSetting("WS_QR_Usuario");
                    oRequest.password = ClasesGenericas.GetSetting("WS_QR_Clave");
                    var content = new StringContent(JsonConvert.SerializeObject(oRequest).ToString(), Encoding.UTF8, "application/json");
                    urlMetodo = "usuario/login";
                    client.DefaultRequestHeaders.Accept.Clear();
                    client.DefaultRequestHeaders.Add("User-Agent", "CSF_WS/" + ClasesGenericas.GetSetting("_VersionApp"));
                    client.DefaultRequestHeaders.Add("Accept", "*/*");
                    client.DefaultRequestHeaders.Add("Connection", "keep-alive");
                    var responseTaskOne = client.PostAsync(urlMetodo, content);
                    responseTaskOne.Wait();

                    var resultOne = responseTaskOne.Result;

                    string rptaTaskOne = "";
                    if (resultOne.IsSuccessStatusCode)
                    {
                        var readTaskOne = resultOne.Content.ReadAsStringAsync();
                        readTaskOne.Wait();
                        rptaTaskOne = readTaskOne.Result;
                        oRespuestaSimpleBE = JsonConvert.DeserializeObject<QR_RespuestaSimpleBE>(rptaTaskOne);
                        if (oRespuestaSimpleBE.success)
                        {
                            token = oRespuestaSimpleBE.result;
                            client.DefaultRequestHeaders.Add("Authorization", "Bearer " + token);
                            REHR_ReporteByteBE oReporteByte = new REHR_ReporteByteBE();
                            oReporteByte.cod_atencion = codigoAtencion;
                            oReporteByte.cod_paciente = !string.IsNullOrEmpty(codigoPaciente) ? int.Parse(codigoPaciente) : 0;
                            oReporteByte.tipo_reporte = tipoReporte;
                            oReporteByte.cod_cpt = !string.IsNullOrEmpty(codigoCpt) ? int.Parse(codigoCpt) : 0;
                            content = new StringContent(JsonConvert.SerializeObject(oReporteByte).ToString(), Encoding.UTF8, "application/json");
                            urlMetodo = "AgendaCita/ReporteByte";
                            var responseTaskTwo = client.PostAsync(urlMetodo, content);
                            responseTaskTwo.Wait();

                            var resultTwo = responseTaskTwo.Result;

                            string rptaTaskTwo = "";
                            if (resultTwo.IsSuccessStatusCode)
                            {
                                var readTaskTwo = resultTwo.Content.ReadAsStringAsync();
                                readTaskTwo.Wait();
                                rptaTaskTwo = readTaskTwo.Result;
                                oRespuestaQRBE = JsonConvert.DeserializeObject<QR_RespuestaBE<REHR_ReporteByteResponseBE>>(rptaTaskTwo);
                                if (oRespuestaQRBE.success)
                                {
                                    oResponse.rpt = 0;
                                    oResponse.data = oRespuestaQRBE.result.archivoByte;
                                }
                                else
                                {
                                    oResponse.rpt = 4;
                                    oResponse.mensaje = oRespuestaQRBE.message;
                                }
                            }
                            else
                            {
                                oResponse.rpt = 3;
                                oResponse.mensaje = "ReporteByte: Error en comunicación";
                            }
                        }
                        else
                        {
                            oResponse.rpt = 2;
                            oResponse.mensaje = oRespuestaSimpleBE.message;
                        }
                    }
                    else
                    {
                        oResponse.rpt = 1;
                        oResponse.mensaje = "Autenticación: Error en comunicación";
                    }
                }
                #endregion

                #region Data de prueba
                //oResponse.rpt = 0;
                //oResponse.mensaje = "";
                //if (tipoReporte.Equals("Receta"))
                //{
                //    oResponse.data = "";
                //}
                //else if (tipoReporte.Equals("HojaDeRuta"))
                //{
                //    oResponse.data = "";
                //}
                #endregion
                
                return oResponse;
            }
            catch (Exception ex)
            {
                //return new ErrorDA().RegistrarError(ex, "WS", "Cita.svc/ObtenerReporte");
                return ClasesGenericas.RegistrarErrorIntranet(ex, "WS", "Cita.svc/ObtenerReporte");
            }
        }

        public RespuestaBE<IndicadorFlyerBE> ObtenerFlyer(string idCita, string idCitaVirtual)
        {
            #region Validación de parámetros
            if (String.IsNullOrEmpty(idCita) && String.IsNullOrEmpty(idCitaVirtual))
            {
                return new RespuestaBE<IndicadorFlyerBE>()
                {
                    rpt = 100,
                    mensaje = "Debe ingresar por lo menos un cita presencial o virtual",
                    data = null
                };
            }
            if (!String.IsNullOrEmpty(idCita))
            {
                int varIdCita;
                if (!int.TryParse(idCita, out varIdCita))
                {
                    return new RespuestaBE<IndicadorFlyerBE>()
                    {
                        rpt = 101,
                        mensaje = "El parámetro idCita debe ser numérico"
                    };
                }
            }
            if (!String.IsNullOrEmpty(idCitaVirtual))
            {
                int varIdCitaVirtual;
                if (!int.TryParse(idCitaVirtual, out varIdCitaVirtual))
                {
                    return new RespuestaBE<IndicadorFlyerBE>()
                    {
                        rpt = 102,
                        mensaje = "El parámetro idCitaVirtual debe ser numérico"
                    };
                }
            }
            #endregion
            try
            {
                var oRequestTmp = new
                {
                    idCita = idCita,
                    idCitaVirtual = idCitaVirtual
                };
                string strRequestTmp = new JavaScriptSerializer().Serialize(oRequestTmp);
                string responseTmp = ClasesGenericas.PostAsyncIntranet("Cita.svc/ObtenerFlyer/", strRequestTmp, ClasesGenericas.GetHeader(WebOperationContext.Current.IncomingRequest.Headers, "token"));
                RespuestaBE<IndicadorFlyerBE> varRespuestaTmp = new JavaScriptSerializer().Deserialize<RespuestaBE<IndicadorFlyerBE>>(responseTmp);

                if (varRespuestaTmp == null)
                {
                    return new RespuestaBE<IndicadorFlyerBE>()
                    {
                        rpt = -1,
                        mensaje = "No se logró procesar la solicitud",
                        data = null
                    };
                }

                return varRespuestaTmp;
            }
            catch (Exception ex)
            {
                //return new ErrorDA().RegistrarError<IndicadorFlyerBE>(ex, "WS", "Cita.svc/ObtenerFlyer");
                return ClasesGenericas.RegistrarErrorIntranet<IndicadorFlyerBE>(ex, "WS", "Cita.svc/ObtenerFlyer");
            }
        }

        private string GetClientAddress()
        {
            // creating object of service when request comes   
            OperationContext context = OperationContext.Current;
            //Getting Incoming Message details   
            chn.MessageProperties prop = context.IncomingMessageProperties;
            //Getting client endpoint details from message header   
            chn.RemoteEndpointMessageProperty endpoint = prop[chn.RemoteEndpointMessageProperty.Name] as chn.RemoteEndpointMessageProperty;
            return endpoint.Address;
        }

        public RespuestaSimpleBE ActualizarEstado(string tipoDocumento, string numeroDocumento, string idCita, string idCitaVirtual, string origen,
            string estado, string idUsuario, string observaciones)
        {
            #region Validacion de Parámetros
            if (string.IsNullOrEmpty(tipoDocumento) || string.IsNullOrEmpty(numeroDocumento))
            {
                throw new WebFaultException(HttpStatusCode.BadRequest);
            }
            if (string.IsNullOrEmpty(idCita) && string.IsNullOrEmpty(idCitaVirtual))
            {
                throw new WebFaultException(HttpStatusCode.BadRequest);
            }
            if (!string.IsNullOrEmpty(idCita) && !string.IsNullOrEmpty(idCitaVirtual))
            {
                return new RespuestaSimpleBE()
                {
                    rpt = 100,
                    mensaje = "Solo enviar el parámetro idCita o idCitaVirtual",
                    data = null
                };
            }
            int varIDCita;
            if (!string.IsNullOrEmpty(idCita))
            {
                if (!int.TryParse(idCita, out varIDCita))
                {
                    return new RespuestaSimpleBE()
                    {
                        rpt = 101,
                        mensaje = "El parámetro idCita debe ser numérico",
                        data = null
                    };
                }
            }
            if (!string.IsNullOrEmpty(idCitaVirtual))
            {
                if (!int.TryParse(idCitaVirtual, out varIDCita))
                {
                    return new RespuestaSimpleBE()
                    {
                        rpt = 102,
                        mensaje = "El parámetro idCitaVirtual debe ser numérico",
                        data = null
                    };
                }
            }
            estado = "11";//!string.IsNullOrEmpty(estado) ? estado : "11"; //Confirmado
            //int varEstado;
            //if (!string.IsNullOrEmpty(estado))
            //{
            //    if (!int.TryParse(estado, out varEstado))
            //    {
            //        return new RespuestaSimpleBE()
            //        {
            //            rpt = 103,
            //            mensaje = "El parámetro estado debe ser numérico",
            //            data = null
            //        };
            //    }
            //}
            //beOrigenResponse obeOrigen = fnValidarOrigen(origen);
            //if (!obeOrigen.IndValido)
            //{
            //    return new RespuestaSimpleBE()
            //    {
            //        rpt = 103,
            //        mensaje = obeOrigen.Mensaje,
            //        data = null
            //    };
            //}
            #endregion
            try
            {
                var oRequestTmp = new
                {
                    tipoDocumento = tipoDocumento,
                    numeroDocumento = numeroDocumento,
                    idCita = idCita,
                    idCitaVirtual = idCitaVirtual,
                    origen = origen,
                    estado = estado,
                    idUsuario = idUsuario,
                    observaciones = observaciones
                };
                string strRequestTmp = new JavaScriptSerializer().Serialize(oRequestTmp);
                string responseTmp = ClasesGenericas.PostAsyncIntranet("Cita.svc/ActualizarEstado/", strRequestTmp, ClasesGenericas.GetHeader(WebOperationContext.Current.IncomingRequest.Headers, "token"));
                RespuestaSimpleBE varRespuestaTmp = new JavaScriptSerializer().Deserialize<RespuestaSimpleBE>(responseTmp);

                if (varRespuestaTmp == null)
                {
                    return new RespuestaSimpleBE()
                    {
                        rpt = -1,
                        mensaje = "No se logró procesar la solicitud",
                        data = null
                    };
                }

                return varRespuestaTmp;
            }
            catch (Exception ex)
            {
                //return new ErrorDA().RegistrarError(ex, "WS", "Cita.svc/ActualizarEstado");
                return ClasesGenericas.RegistrarErrorIntranet(ex, "WS", "Cita.svc/ActualizarEstado");
            }
        }

        public RespuestaBE<CitaChatBotBE> ObtenerPorId(string tipoDocumento, string numeroDocumento, string idCita, string idCitaVirtual)
        {
            #region Validacion de Parámetros
            if (string.IsNullOrEmpty(tipoDocumento) || string.IsNullOrEmpty(numeroDocumento))
            {
                throw new WebFaultException(HttpStatusCode.BadRequest);
            }
            if (string.IsNullOrEmpty(idCita) && string.IsNullOrEmpty(idCitaVirtual))
            {
                throw new WebFaultException(HttpStatusCode.BadRequest);
            }
            if (tipoDocumento != "1" && tipoDocumento != "2" && tipoDocumento != "3")
            {
                return new RespuestaBE<CitaChatBotBE>()
                {
                    rpt = 100,
                    mensaje = "Sólo se soportan los valores \"1\" (DNI), \"2\" (CE) o \"3\" (PAS) en el parámetro tipoDocumento",
                    data = null
                };
            }
            if (numeroDocumento.Length > 20)
            {
                return new RespuestaBE<CitaChatBotBE>()
                {
                    rpt = 101,
                    mensaje = "El parámetro numeroDocumento no puede tener más de 20 caracteres",
                    data = null
                };
            }
            if (!string.IsNullOrEmpty(idCita) && !string.IsNullOrEmpty(idCitaVirtual))
            {
                return new RespuestaBE<CitaChatBotBE>()
                {
                    rpt = 102,
                    mensaje = "Solo enviar el parámetro idCita o idCitaVirtual",
                    data = null
                };
            }
            int varIDCita;
            if (!string.IsNullOrEmpty(idCita))
            {
                if (!int.TryParse(idCita, out varIDCita))
                {
                    return new RespuestaBE<CitaChatBotBE>()
                    {
                        rpt = 103,
                        mensaje = "El parámetro idCita debe ser numérico",
                        data = null
                    };
                }
            }
            if (!string.IsNullOrEmpty(idCitaVirtual))
            {
                if (!int.TryParse(idCitaVirtual, out varIDCita))
                {
                    return new RespuestaBE<CitaChatBotBE>()
                    {
                        rpt = 104,
                        mensaje = "El parámetro idCitaVirtual debe ser numérico",
                        data = null
                    };
                }
            }
            #endregion
            try
            {
                var oRequestTmp = new
                {
                    tipoDocumento = tipoDocumento,
                    numeroDocumento = numeroDocumento,
                    idCita = idCita,
                    idCitaVirtual = idCitaVirtual
                };
                string strRequestTmp = new JavaScriptSerializer().Serialize(oRequestTmp);
                string responseTmp = ClasesGenericas.PostAsyncIntranet("Cita.svc/ObtenerPorId/", strRequestTmp, ClasesGenericas.GetHeader(WebOperationContext.Current.IncomingRequest.Headers, "token"));
                RespuestaBE<CitaChatBotBE> varRespuestaTmp = new JavaScriptSerializer().Deserialize<RespuestaBE<CitaChatBotBE>>(responseTmp);

                if (varRespuestaTmp == null)
                {
                    return new RespuestaBE<CitaChatBotBE>()
                    {
                        rpt = -1,
                        mensaje = "No se logró procesar la solicitud",
                        data = null
                    };
                }

                return varRespuestaTmp;
            }
            catch (Exception ex)
            {
                //return new ErrorDA().RegistrarError<CitaChatBotBE>(ex, "WS", "Cita.svc/ObtenerPorId");
                return ClasesGenericas.RegistrarErrorIntranet<CitaChatBotBE>(ex, "WS", "Cita.svc/ObtenerPorId");
            }
        }

        public RespuestaBE<List<IM_ListarPeriodoResPresentacionBE>> ObtenerPeriodos(string tipoDocumento, string numeroDocumento, string idAmbulatorio)
        {
            #region Validacion de Parámetros
            if (string.IsNullOrEmpty(idAmbulatorio))
            {
                throw new WebFaultException(HttpStatusCode.BadRequest);
            }
            int varIdAmbulatorio;
            if (!int.TryParse(idAmbulatorio, out varIdAmbulatorio))
            {
                return new RespuestaBE<List<IM_ListarPeriodoResPresentacionBE>>()
                {
                    rpt = 101,
                    mensaje = "El parámetro idAmbulatorio debe ser numérico",
                    data = null
                };
            }
            #endregion
            try
            {
                RespuestaBE<List<IM_ListarPeriodoResPresentacionBE>> oResponse = new RespuestaBE<List<IM_ListarPeriodoResPresentacionBE>>();
                oResponse.data = new List<IM_ListarPeriodoResPresentacionBE>();

                WebOperationContext oContext = WebOperationContext.Current;
                string tokenSesion = ClasesGenericas.GetHeader(WebOperationContext.Current.IncomingRequest.Headers, "token");
                var oRequestTmp = new
                {
                    tokenSesion = tokenSesion,
                    tipoDocumento = tipoDocumento,
                    numeroDocumento = numeroDocumento,
                    validarFamiliar = true
                };
                string strRequestTmp = new JavaScriptSerializer().Serialize(oRequestTmp);
                string responseTmp = ClasesGenericas.PostAsyncIntranet("Usuario.svc/ObtenerPorToken/", strRequestTmp, ClasesGenericas.GetHeader(WebOperationContext.Current.IncomingRequest.Headers, "token"));
                RespuestaBE<UsuarioDocumentoBE> varRespuestaTmp = new JavaScriptSerializer().Deserialize<RespuestaBE<UsuarioDocumentoBE>>(responseTmp);

                if (varRespuestaTmp == null)
                {
                    return new RespuestaBE<List<IM_ListarPeriodoResPresentacionBE>>()
                    {
                        rpt = -1,
                        mensaje = "No se logró procesar la solicitud",
                        data = null
                    };
                }
                if (varRespuestaTmp.rpt != 0)
                {
                    return new RespuestaBE<List<IM_ListarPeriodoResPresentacionBE>>()
                    {
                        rpt = varRespuestaTmp.rpt,
                        mensaje = varRespuestaTmp.mensaje,
                        data = null
                    };
                }
                UsuarioDocumentoBE oUsuarioDocumento = varRespuestaTmp.data;

                if (!(oUsuarioDocumento.tipoDocumento == tipoDocumento
                    && oUsuarioDocumento.numeroDocumento == numeroDocumento))
                {
                    oContext.OutgoingResponse.StatusCode = HttpStatusCode.BadRequest;
                    return null;
                }
                
                DateTime oFechaHoraActual = DateTime.Now;
                int anioLimiteInferior = 2018,
                    cantidadMaximaAnios = 10,
                    anioActual = oFechaHoraActual.Year;
                int anioIteracion = anioActual;
                IM_ListarPeriodoResPresentacionBE oPeriodoBE;
                for (int i = 0; i < cantidadMaximaAnios; i++)
                {
                    if (anioIteracion < anioLimiteInferior)
                    {
                        break;
                    }
                    oPeriodoBE = new IM_ListarPeriodoResPresentacionBE();
                    oPeriodoBE.periodo = anioIteracion.ToString();
                    oResponse.data.Add(oPeriodoBE);
                    anioIteracion--;
                }
                return oResponse;
            }
            catch (Exception ex)
            {
                //return new ErrorDA().RegistrarError<List<IM_ListarPeriodoResPresentacionBE>>(ex, "WS", "Cita.svc/ObtenerPeriodos");
                return ClasesGenericas.RegistrarErrorIntranet<List<IM_ListarPeriodoResPresentacionBE>>(ex, "WS", "Cita.svc/ObtenerPeriodos");
            }
        }

        public RespuestaBE<List<IM_ListarImagenesResPresentacionBE>> ListarImagenes(string data)
        {
            #region Validacion de Parámetros
            if (string.IsNullOrEmpty(data))
            {
                throw new WebFaultException(HttpStatusCode.BadRequest);
            }
            //if (string.IsNullOrEmpty(idAmbulatorio) || string.IsNullOrEmpty(periodo))
            //{
            //    throw new WebFaultException(HttpStatusCode.BadRequest);
            //}
            //int varIdAmbulatorio;
            //if (!int.TryParse(idAmbulatorio, out varIdAmbulatorio))
            //{
            //    return new RespuestaBE<List<IM_ListarImagenesResPresentacionBE>>()
            //    {
            //        rpt = 101,
            //        mensaje = "El parámetro idAmbulatorio debe ser numérico",
            //        data = null
            //    };
            //}
            #endregion
            try
            {
                WebOperationContext oContext = WebOperationContext.Current;
                #region AES
                if (ClasesGenericas.GetSetting("DescifrarAES").Equals("1"))
                {
                    data = ClasesGenericas.DecryptStringAES(data, ClasesGenericas.GetSetting("KeyAES"));
                }
                if (String.IsNullOrEmpty(data))
                {
                    oContext.OutgoingResponse.StatusCode = HttpStatusCode.BadRequest;
                    return null;
                }
                String[] aData = data.Split('|');//yyyy-MM-dd HH:mm:ss.fff|tipoDocumento|numeroDocumento|idAmbulatorio|periodo
                if (aData.Length != 5)
                {
                    oContext.OutgoingResponse.StatusCode = HttpStatusCode.BadRequest;
                    return null;
                }
                string tiempoVigenciaSolicitudAES = ClasesGenericas.GetSetting("VigenciaSolicitudAES");
                double varTiempoVigenciaSolicitudAES;
                bool esTiempoValido = double.TryParse(tiempoVigenciaSolicitudAES, out varTiempoVigenciaSolicitudAES);
                varTiempoVigenciaSolicitudAES = esTiempoValido ? varTiempoVigenciaSolicitudAES : 5; //La consulta tendrá una vigencia del parámetro configurado, donde por defecto es 5 segundos como máximo
                DateTime oFechaHoraActual = DateTime.Now.AddSeconds(-varTiempoVigenciaSolicitudAES);
                DateTime oFechaHoraConsulta;
                if (DateTime.TryParse(aData[0], out oFechaHoraConsulta))
                {
                    if (oFechaHoraConsulta <= oFechaHoraActual)
                    {
                        oContext.OutgoingResponse.StatusCode = HttpStatusCode.BadRequest;
                        return null;
                    }
                }
                else
                {
                    oContext.OutgoingResponse.StatusCode = HttpStatusCode.BadRequest;
                    return null;
                }
                string tipoDocumento = aData[1],
                    numeroDocumento = aData[2],
                    idAmbulatorio = aData[3],
                    periodo = aData[4];
                #endregion

                RespuestaBE<List<IM_ListarImagenesResPresentacionBE>> oResponse = new RespuestaBE<List<IM_ListarImagenesResPresentacionBE>>();
                oResponse.data = new List<IM_ListarImagenesResPresentacionBE>();

                string tokenSesion = ClasesGenericas.GetHeader(WebOperationContext.Current.IncomingRequest.Headers, "token");
                var oRequestTmp = new
                {
                    tokenSesion = tokenSesion,
                    tipoDocumento = tipoDocumento,
                    numeroDocumento = numeroDocumento,
                    validarFamiliar = true
                };
                string strRequestTmp = new JavaScriptSerializer().Serialize(oRequestTmp);
                string responseTmp = ClasesGenericas.PostAsyncIntranet("Usuario.svc/ObtenerPorToken/", strRequestTmp, ClasesGenericas.GetHeader(WebOperationContext.Current.IncomingRequest.Headers, "token"));
                RespuestaBE<UsuarioDocumentoBE> varRespuestaTmp = new JavaScriptSerializer().Deserialize<RespuestaBE<UsuarioDocumentoBE>>(responseTmp);

                if (varRespuestaTmp == null)
                {
                    return new RespuestaBE<List<IM_ListarImagenesResPresentacionBE>>()
                    {
                        rpt = -1,
                        mensaje = "No se logró procesar la solicitud",
                        data = null
                    };
                }
                if (varRespuestaTmp.rpt != 0)
                {
                    return new RespuestaBE<List<IM_ListarImagenesResPresentacionBE>>()
                    {
                        rpt = varRespuestaTmp.rpt,
                        mensaje = varRespuestaTmp.mensaje,
                        data = null
                    };
                }
                UsuarioDocumentoBE oUsuarioDocumento = varRespuestaTmp.data;
                if (!(oUsuarioDocumento.tipoDocumento == tipoDocumento
                    && oUsuarioDocumento.numeroDocumento == numeroDocumento))
                {
                    oContext.OutgoingResponse.StatusCode = HttpStatusCode.BadRequest;
                    return null;
                }

                #region Integración con San Felipe
                QR_RespuestaSimpleBE oRespuestaSimpleBE = new QR_RespuestaSimpleBE(); //Token
                QR_RespuestaBE<List<IM_ListarImagenesResponseBE>> oRespuestaQRBE = new QR_RespuestaBE<List<IM_ListarImagenesResponseBE>>();

                string urlBase = "", urlMetodo = "";
                string token = "";
                System.Net.ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls;
                using (var client = new HttpClient())
                {
                    urlBase = ClasesGenericas.GetSetting("WS_QR").ToString();
                    client.BaseAddress = new Uri(urlBase);
                    QR_LoginBE oRequest = new QR_LoginBE();
                    oRequest.usuario = ClasesGenericas.GetSetting("WS_QR_Usuario");
                    oRequest.password = ClasesGenericas.GetSetting("WS_QR_Clave");
                    var content = new StringContent(JsonConvert.SerializeObject(oRequest).ToString(), Encoding.UTF8, "application/json");
                    urlMetodo = "usuario/login";
                    client.DefaultRequestHeaders.Accept.Clear();
                    client.DefaultRequestHeaders.Add("User-Agent", "CSF_WS/" + ClasesGenericas.GetSetting("_VersionApp"));
                    client.DefaultRequestHeaders.Add("Accept", "*/*");
                    client.DefaultRequestHeaders.Add("Connection", "keep-alive");
                    var responseTaskOne = client.PostAsync(urlMetodo, content);
                    responseTaskOne.Wait();

                    var resultOne = responseTaskOne.Result;

                    string rptaTaskOne = "";
                    if (resultOne.IsSuccessStatusCode)
                    {
                        var readTaskOne = resultOne.Content.ReadAsStringAsync();
                        readTaskOne.Wait();
                        rptaTaskOne = readTaskOne.Result;
                        oRespuestaSimpleBE = JsonConvert.DeserializeObject<QR_RespuestaSimpleBE>(rptaTaskOne);
                        if (oRespuestaSimpleBE.success)
                        {
                            token = oRespuestaSimpleBE.result;
                            client.DefaultRequestHeaders.Add("Authorization", "Bearer " + token);
                            //idAmbulatorio = "235085"; //Quitar esta línea
                            //periodo = "2024"; //Quitar esta línea
                            urlMetodo = String.Format("ImagenRisPacs/ListarImagenes?codPaciente={0}&periodo={1}", idAmbulatorio, periodo);
                            var responseTaskTwo = client.GetAsync(urlMetodo);
                            responseTaskTwo.Wait();

                            var resultTwo = responseTaskTwo.Result;

                            string rptaTaskTwo = "";
                            if (resultTwo.IsSuccessStatusCode)
                            {
                                var readTaskTwo = resultTwo.Content.ReadAsStringAsync();
                                readTaskTwo.Wait();
                                rptaTaskTwo = readTaskTwo.Result;
                                oRespuestaQRBE = JsonConvert.DeserializeObject<QR_RespuestaBE<List<IM_ListarImagenesResponseBE>>>(rptaTaskTwo);
                                if (oRespuestaQRBE.success)
                                {
                                    oResponse.rpt = 0;
                                    IM_ListarImagenesResPresentacionBE oImagen = new IM_ListarImagenesResPresentacionBE();
                                    int nPeriodos = oRespuestaQRBE.result.Count;
                                    for (int i = 0; i < nPeriodos; i++)
                                    {
                                        oImagen = new IM_ListarImagenesResPresentacionBE();
                                        oImagen.codigoAtencion = oRespuestaQRBE.result[i].codatencion;
                                        oImagen.fechaHoraAtencion = oRespuestaQRBE.result[i].fec_registra;
                                        oImagen.nombrePaciente = oRespuestaQRBE.result[i].nombrePaciente;
                                        oImagen.numeroDocumentoPaciente = oRespuestaQRBE.result[i].numDocumento;
                                        oImagen.nombreExamen = oRespuestaQRBE.result[i].nombreExamen;
                                        oImagen.esInformeResultado = oRespuestaQRBE.result[i].esInformeResultado;
                                        oImagen.esImagenResultado = oRespuestaQRBE.result[i].esImagenResultado;
                                        oImagen.idImagenResultado = oRespuestaQRBE.result[i].idImagenResultado;
                                        oImagen.idInformeResultado = oRespuestaQRBE.result[i].idInformeResultado;
                                        oResponse.data.Add(oImagen);
                                    }
                                    //oResponse.data = oRespuestaSimpleBE.result;
                                }
                                else
                                {
                                    oResponse.rpt = 4;
                                    oResponse.mensaje = oRespuestaSimpleBE.message;
                                }
                            }
                            else
                            {
                                oResponse.rpt = 3;
                                oResponse.mensaje = "ListarImagenes: Error en comunicación";
                            }
                        }
                        else
                        {
                            oResponse.rpt = 2;
                            oResponse.mensaje = oRespuestaSimpleBE.message;
                        }
                    }
                    else
                    {
                        oResponse.rpt = 1;
                        oResponse.mensaje = "Autenticación: Error en comunicación";
                    }
                }
                #endregion

                #region Data constante
                //List<IM_ListarImagenesResPresentacionBE> lImagenes = new List<IM_ListarImagenesResPresentacionBE>();
                //IM_ListarImagenesResPresentacionBE oCitaImagenBE = new IM_ListarImagenesResPresentacionBE();
                //oCitaImagenBE.codigoAtencion = "H0202123";
                //oCitaImagenBE.fechaHoraAtencion = DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss");
                //oCitaImagenBE.nombrePaciente = "CHAVEZ ALTAMIRANO ALEXIA MILAGRO";
                //oCitaImagenBE.numeroDocumentoPaciente = "10139904";
                //oCitaImagenBE.nombreExamen = "1 TORAX";
                //oCitaImagenBE.esInformeResultado = false;
                //oCitaImagenBE.esImagenResultado = true;
                //oCitaImagenBE.idImagenResultado = "9275007641008";
                //oCitaImagenBE.idInformeResultado = "";
                //lImagenes.Add(oCitaImagenBE);

                //oCitaImagenBE = new IM_ListarImagenesResPresentacionBE();
                //oCitaImagenBE.codigoAtencion = "H0202123";
                //oCitaImagenBE.fechaHoraAtencion = DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss");
                //oCitaImagenBE.nombrePaciente = "CHAVEZ ALTAMIRANO ALEXIA MILAGRO";
                //oCitaImagenBE.numeroDocumentoPaciente = "10139904";
                //oCitaImagenBE.nombreExamen = "ECO DOPPLER CORAZON - CLINICA";
                //oCitaImagenBE.esInformeResultado = true;
                //oCitaImagenBE.esImagenResultado = true;
                //oCitaImagenBE.idImagenResultado = "9275007641008";
                //oCitaImagenBE.idInformeResultado = "H02021231264";
                //lImagenes.Add(oCitaImagenBE);

                //oCitaImagenBE = new IM_ListarImagenesResPresentacionBE();
                //oCitaImagenBE.codigoAtencion = "H0202123";
                //oCitaImagenBE.fechaHoraAtencion = DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss");
                //oCitaImagenBE.nombrePaciente = "CHAVEZ ALTAMIRANO ALEXIA MILAGRO";
                //oCitaImagenBE.numeroDocumentoPaciente = "10139904";
                //oCitaImagenBE.nombreExamen = "1 TORAX";
                //oCitaImagenBE.esInformeResultado = true;
                //oCitaImagenBE.esImagenResultado = true;
                //oCitaImagenBE.idImagenResultado = "9275007641008";
                //oCitaImagenBE.idInformeResultado = "H02021231228";
                //lImagenes.Add(oCitaImagenBE);

                //oResponse = new RespuestaBE<List<IM_ListarImagenesResPresentacionBE>>()
                //{
                //    rpt = 0,
                //    mensaje = "",
                //    data = lImagenes
                //};
                #endregion

                return oResponse;
            }
            catch (Exception ex)
            {
                //return new ErrorDA().RegistrarError<List<IM_ListarImagenesResPresentacionBE>>(ex, "WS", "Cita.svc/ListarImagenes");
                return ClasesGenericas.RegistrarErrorIntranet<List<IM_ListarImagenesResPresentacionBE>>(ex, "WS", "Cita.svc/ListarImagenes");
            }
        }

        public RespuestaSimpleBE ObtenerResultadosImagenes(string data)
        {
            #region Validacion de Parámetros
            if (string.IsNullOrEmpty(data))
            {
                throw new WebFaultException(HttpStatusCode.BadRequest);
            }
            //if (string.IsNullOrEmpty(idAmbulatorio) || string.IsNullOrEmpty(idInformeResultado))
            //{
            //    throw new WebFaultException(HttpStatusCode.BadRequest);
            //}
            //int varIdAmbulatorio;
            //if (!int.TryParse(idAmbulatorio, out varIdAmbulatorio))
            //{
            //    return new RespuestaSimpleBE()
            //    {
            //        rpt = 101,
            //        mensaje = "El parámetro idAmbulatorio debe ser numérico",
            //        data = null
            //    };
            //}
            #endregion
            try
            {
                RespuestaSimpleBE oResponse = new RespuestaSimpleBE();

                WebOperationContext oContext = WebOperationContext.Current;
                #region AES
                if (ClasesGenericas.GetSetting("DescifrarAES").Equals("1"))
                {
                    data = ClasesGenericas.DecryptStringAES(data, ClasesGenericas.GetSetting("KeyAES"));
                }
                if (String.IsNullOrEmpty(data))
                {
                    oContext.OutgoingResponse.StatusCode = HttpStatusCode.BadRequest;
                    return null;
                }
                String[] aData = data.Split('|');//yyyy-MM-dd HH:mm:ss.fff|tipoDocumento|numeroDocumento|idAmbulatorio|idInformeResultado
                if (aData.Length != 5)
                {
                    oContext.OutgoingResponse.StatusCode = HttpStatusCode.BadRequest;
                    return null;
                }
                string tiempoVigenciaSolicitudAES = ClasesGenericas.GetSetting("VigenciaSolicitudAES");
                double varTiempoVigenciaSolicitudAES;
                bool esTiempoValido = double.TryParse(tiempoVigenciaSolicitudAES, out varTiempoVigenciaSolicitudAES);
                varTiempoVigenciaSolicitudAES = esTiempoValido ? varTiempoVigenciaSolicitudAES : 5; //La consulta tendrá una vigencia del parámetro configurado, donde por defecto es 5 segundos como máximo
                DateTime oFechaHoraActual = DateTime.Now.AddSeconds(-varTiempoVigenciaSolicitudAES);
                DateTime oFechaHoraConsulta;
                if (DateTime.TryParse(aData[0], out oFechaHoraConsulta))
                {
                    if (oFechaHoraConsulta <= oFechaHoraActual)
                    {
                        oContext.OutgoingResponse.StatusCode = HttpStatusCode.BadRequest;
                        return null;
                    }
                }
                else
                {
                    oContext.OutgoingResponse.StatusCode = HttpStatusCode.BadRequest;
                    return null;
                }
                string tipoDocumento = aData[1],
                    numeroDocumento = aData[2],
                    idAmbulatorio = aData[3],
                    idInformeResultado = aData[4];
                #endregion

                string tokenSesion = ClasesGenericas.GetHeader(WebOperationContext.Current.IncomingRequest.Headers, "token");
                var oRequestTmp = new
                {
                    tokenSesion = tokenSesion,
                    tipoDocumento = tipoDocumento,
                    numeroDocumento = numeroDocumento,
                    validarFamiliar = true
                };
                string strRequestTmp = new JavaScriptSerializer().Serialize(oRequestTmp);
                string responseTmp = ClasesGenericas.PostAsyncIntranet("Usuario.svc/ObtenerPorToken/", strRequestTmp, ClasesGenericas.GetHeader(WebOperationContext.Current.IncomingRequest.Headers, "token"));
                RespuestaBE<UsuarioDocumentoBE> varRespuestaTmp = new JavaScriptSerializer().Deserialize<RespuestaBE<UsuarioDocumentoBE>>(responseTmp);

                if (varRespuestaTmp == null)
                {
                    return new RespuestaSimpleBE()
                    {
                        rpt = -1,
                        mensaje = "No se logró procesar la solicitud",
                        data = null
                    };
                }
                if (varRespuestaTmp.rpt != 0)
                {
                    return new RespuestaSimpleBE()
                    {
                        rpt = varRespuestaTmp.rpt,
                        mensaje = varRespuestaTmp.mensaje,
                        data = null
                    };
                }
                UsuarioDocumentoBE oUsuarioDocumento = varRespuestaTmp.data;
                if (!(oUsuarioDocumento.tipoDocumento == tipoDocumento
                    && oUsuarioDocumento.numeroDocumento == numeroDocumento))
                {
                    oContext.OutgoingResponse.StatusCode = HttpStatusCode.BadRequest;
                    return null;
                }

                #region Integración con San Felipe
                QR_RespuestaSimpleBE oRespuestaSimpleBE = new QR_RespuestaSimpleBE();
                QR_RespuestaBE<IM_ObtenerResultadoResponseBE> oRespuestaQRBE = new QR_RespuestaBE<IM_ObtenerResultadoResponseBE>();

                string urlBase = "", urlMetodo = "";
                string token = "";
                System.Net.ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls;
                using (var client = new HttpClient())
                {
                    urlBase = ClasesGenericas.GetSetting("WS_QR").ToString();
                    client.BaseAddress = new Uri(urlBase);
                    QR_LoginBE oRequest = new QR_LoginBE();
                    oRequest.usuario = ClasesGenericas.GetSetting("WS_QR_Usuario");
                    oRequest.password = ClasesGenericas.GetSetting("WS_QR_Clave");
                    var content = new StringContent(JsonConvert.SerializeObject(oRequest).ToString(), Encoding.UTF8, "application/json");
                    urlMetodo = "usuario/login";
                    client.DefaultRequestHeaders.Accept.Clear();
                    client.DefaultRequestHeaders.Add("User-Agent", "CSF_WS/" + ClasesGenericas.GetSetting("_VersionApp"));
                    client.DefaultRequestHeaders.Add("Accept", "*/*");
                    client.DefaultRequestHeaders.Add("Connection", "keep-alive");
                    var responseTaskOne = client.PostAsync(urlMetodo, content);
                    responseTaskOne.Wait();

                    var resultOne = responseTaskOne.Result;

                    string rptaTaskOne = "";
                    if (resultOne.IsSuccessStatusCode)
                    {
                        var readTaskOne = resultOne.Content.ReadAsStringAsync();
                        readTaskOne.Wait();
                        rptaTaskOne = readTaskOne.Result;
                        oRespuestaSimpleBE = JsonConvert.DeserializeObject<QR_RespuestaSimpleBE>(rptaTaskOne);
                        if (oRespuestaSimpleBE.success)
                        {
                            token = oRespuestaSimpleBE.result;
                            client.DefaultRequestHeaders.Add("Authorization", "Bearer " + token);
                            IM_ObtenerResultadoBE oObtenerResultado = new IM_ObtenerResultadoBE();
                            oObtenerResultado.idInformeResultado = idInformeResultado;//"H02021231343";
                            oObtenerResultado.codPaciente = idAmbulatorio;//"235085";
                            content = new StringContent(JsonConvert.SerializeObject(oObtenerResultado).ToString(), Encoding.UTF8, "application/json");
                            urlMetodo = "ImagenRisPacs/ObtenerResultado";
                            var responseTaskTwo = client.PostAsync(urlMetodo, content);
                            responseTaskTwo.Wait();

                            var resultTwo = responseTaskTwo.Result;

                            string rptaTaskTwo = "";
                            if (resultTwo.IsSuccessStatusCode)
                            {
                                var readTaskTwo = resultTwo.Content.ReadAsStringAsync();
                                readTaskTwo.Wait();
                                rptaTaskTwo = readTaskTwo.Result;
                                oRespuestaQRBE = JsonConvert.DeserializeObject<QR_RespuestaBE<IM_ObtenerResultadoResponseBE>>(rptaTaskTwo);
                                if (oRespuestaSimpleBE.success)
                                {
                                    oResponse.rpt = 0;
                                    oResponse.data = oRespuestaQRBE.result.archivoByte;
                                }
                                else
                                {
                                    oResponse.rpt = 4;
                                    oResponse.mensaje = oRespuestaSimpleBE.message;
                                }
                            }
                            else
                            {
                                oResponse.rpt = 3;
                                oResponse.mensaje = "ObtenerResultadosImagenes: Error en comunicación";
                            }
                        }
                        else
                        {
                            oResponse.rpt = 2;
                            oResponse.mensaje = oRespuestaSimpleBE.message;
                        }
                    }
                    else
                    {
                        oResponse.rpt = 1;
                        oResponse.mensaje = "Autenticación: Error en comunicación";
                    }
                }
                #endregion

                //oResponse.rpt = 0;
                //oResponse.mensaje = "";
                //oResponse.data = "";
                //oResponse.data = "";

                return oResponse;
            }
            catch (Exception ex)
            {
                //return new ErrorDA().RegistrarError(ex, "WS", "Cita.svc/ObtenerResultadosImagenes");
                return ClasesGenericas.RegistrarErrorIntranet(ex, "WS", "Cita.svc/ObtenerResultadosImagenes");
            }
        }

        public RespuestaSimpleBE ObtenerVueMotion(string data)
        {
            #region Validacion de Parámetros
            if (string.IsNullOrEmpty(data))
            {
                throw new WebFaultException(HttpStatusCode.BadRequest);
            }
            //if (string.IsNullOrEmpty(idAmbulatorio) || string.IsNullOrEmpty(idImagenResultado) || string.IsNullOrEmpty(numeroDocumentoPaciente))
            //{
            //    throw new WebFaultException(HttpStatusCode.BadRequest);
            //}
            //int varIdAmbulatorio;
            //if (!int.TryParse(idAmbulatorio, out varIdAmbulatorio))
            //{
            //    return new RespuestaSimpleBE()
            //    {
            //        rpt = 101,
            //        mensaje = "El parámetro idAmbulatorio debe ser numérico",
            //        data = null
            //    };
            //}
            #endregion
            try
            {
                RespuestaSimpleBE oResponse = new RespuestaSimpleBE();

                WebOperationContext oContext = WebOperationContext.Current;

                #region AES
                if (ClasesGenericas.GetSetting("DescifrarAES").Equals("1"))
                {
                    data = ClasesGenericas.DecryptStringAES(data, ClasesGenericas.GetSetting("KeyAES"));
                }
                if (String.IsNullOrEmpty(data))
                {
                    oContext.OutgoingResponse.StatusCode = HttpStatusCode.BadRequest;
                    return null;
                }
                String[] aData = data.Split('|');//yyyy-MM-dd HH:mm:ss.fff|tipoDocumento|numeroDocumento|idAmbulatorio|idImagenResultado|numeroDocumentoPaciente
                if (aData.Length != 6)
                {
                    oContext.OutgoingResponse.StatusCode = HttpStatusCode.BadRequest;
                    return null;
                }
                string tiempoVigenciaSolicitudAES = ClasesGenericas.GetSetting("VigenciaSolicitudAES");
                double varTiempoVigenciaSolicitudAES;
                bool esTiempoValido = double.TryParse(tiempoVigenciaSolicitudAES, out varTiempoVigenciaSolicitudAES);
                varTiempoVigenciaSolicitudAES = esTiempoValido ? varTiempoVigenciaSolicitudAES : 5; //La consulta tendrá una vigencia del parámetro configurado, donde por defecto es 5 segundos como máximo
                DateTime oFechaHoraActual = DateTime.Now.AddSeconds(-varTiempoVigenciaSolicitudAES);
                DateTime oFechaHoraConsulta;
                if (DateTime.TryParse(aData[0], out oFechaHoraConsulta))
                {
                    if (oFechaHoraConsulta <= oFechaHoraActual)
                    {
                        oContext.OutgoingResponse.StatusCode = HttpStatusCode.BadRequest;
                        return null;
                    }
                }
                else
                {
                    oContext.OutgoingResponse.StatusCode = HttpStatusCode.BadRequest;
                    return null;
                }
                string tipoDocumento = aData[1],
                    numeroDocumento = aData[2],
                    idAmbulatorio = aData[3],
                    idImagenResultado = aData[4],
                    numeroDocumentoPaciente = aData[5];
                #endregion

                string tokenSesion = ClasesGenericas.GetHeader(WebOperationContext.Current.IncomingRequest.Headers, "token");
                var oRequestTmp = new
                {
                    tokenSesion = tokenSesion,
                    tipoDocumento = tipoDocumento,
                    numeroDocumento = numeroDocumento,
                    validarFamiliar = true
                };
                string strRequestTmp = new JavaScriptSerializer().Serialize(oRequestTmp);
                string responseTmp = ClasesGenericas.PostAsyncIntranet("Usuario.svc/ObtenerPorToken/", strRequestTmp, ClasesGenericas.GetHeader(WebOperationContext.Current.IncomingRequest.Headers, "token"));
                RespuestaBE<UsuarioDocumentoBE> varRespuestaTmp = new JavaScriptSerializer().Deserialize<RespuestaBE<UsuarioDocumentoBE>>(responseTmp);

                if (varRespuestaTmp == null)
                {
                    return new RespuestaSimpleBE()
                    {
                        rpt = -1,
                        mensaje = "No se logró procesar la solicitud",
                        data = null
                    };
                }
                if (varRespuestaTmp.rpt != 0)
                {
                    return new RespuestaSimpleBE()
                    {
                        rpt = varRespuestaTmp.rpt,
                        mensaje = varRespuestaTmp.mensaje,
                        data = null
                    };
                }
                UsuarioDocumentoBE oUsuarioDocumento = varRespuestaTmp.data;
                if (!(oUsuarioDocumento.tipoDocumento == tipoDocumento
                    && oUsuarioDocumento.numeroDocumento == numeroDocumento))
                {
                    oContext.OutgoingResponse.StatusCode = HttpStatusCode.BadRequest;
                    return null;
                }

                #region Integración con San Felipe
                QR_RespuestaSimpleBE oRespuestaSimpleBE = new QR_RespuestaSimpleBE();
                //QR_RespuestaBE<QR_RespuestaSimpleBE> oRespuestaQRBE = new QR_RespuestaBE<QR_RespuestaSimpleBE>();

                string urlBase = "", urlMetodo = "";
                string token = "";
                System.Net.ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls;
                using (var client = new HttpClient())
                {
                    urlBase = ClasesGenericas.GetSetting("WS_QR").ToString();
                    client.BaseAddress = new Uri(urlBase);
                    QR_LoginBE oRequest = new QR_LoginBE();
                    oRequest.usuario = ClasesGenericas.GetSetting("WS_QR_Usuario");
                    oRequest.password = ClasesGenericas.GetSetting("WS_QR_Clave");
                    var content = new StringContent(JsonConvert.SerializeObject(oRequest).ToString(), Encoding.UTF8, "application/json");
                    urlMetodo = "usuario/login";
                    client.DefaultRequestHeaders.Accept.Clear();
                    client.DefaultRequestHeaders.Add("User-Agent", "CSF_WS/" + ClasesGenericas.GetSetting("_VersionApp"));
                    client.DefaultRequestHeaders.Add("Accept", "*/*");
                    client.DefaultRequestHeaders.Add("Connection", "keep-alive");
                    var responseTaskOne = client.PostAsync(urlMetodo, content);
                    responseTaskOne.Wait();

                    var resultOne = responseTaskOne.Result;

                    string rptaTaskOne = "";
                    if (resultOne.IsSuccessStatusCode)
                    {
                        var readTaskOne = resultOne.Content.ReadAsStringAsync();
                        readTaskOne.Wait();
                        rptaTaskOne = readTaskOne.Result;
                        oRespuestaSimpleBE = JsonConvert.DeserializeObject<QR_RespuestaSimpleBE>(rptaTaskOne);
                        if (oRespuestaSimpleBE.success)
                        {
                            token = oRespuestaSimpleBE.result;
                            client.DefaultRequestHeaders.Add("Authorization", "Bearer " + token);
                            IM_ObtenerImagenBE oObtenerImagen = new IM_ObtenerImagenBE();
                            oObtenerImagen.idImagenResultado = idImagenResultado;//"9275007641008";
                            oObtenerImagen.codPaciente = idAmbulatorio;
                            content = new StringContent(JsonConvert.SerializeObject(oObtenerImagen).ToString(), Encoding.UTF8, "application/json");
                            urlMetodo = "ImagenRisPacs/ObtenerImagen";
                            var responseTaskTwo = client.PostAsync(urlMetodo, content);
                            responseTaskTwo.Wait();

                            var resultTwo = responseTaskTwo.Result;

                            string rptaTaskTwo = "";
                            if (resultTwo.IsSuccessStatusCode)
                            {
                                var readTaskTwo = resultTwo.Content.ReadAsStringAsync();
                                readTaskTwo.Wait();
                                rptaTaskTwo = readTaskTwo.Result;
                                oRespuestaSimpleBE = JsonConvert.DeserializeObject<QR_RespuestaSimpleBE>(rptaTaskTwo);
                                if (oRespuestaSimpleBE.success)
                                {
                                    oResponse.rpt = 0;
                                    oResponse.data = oRespuestaSimpleBE.result;
                                    string parametrosContenido = "INFORMES¯NOTA_VISOR_IMAGENES";
                                    var oRequestTmp2 = new
                                    {
                                        parametrosContenido = parametrosContenido
                                    };
                                    string strRequestTmp2 = new JavaScriptSerializer().Serialize(oRequestTmp2);
                                    string responseTmp2 = ClasesGenericas.PostAsyncIntranet("Parametrizacion.svc/ObtenerContenidos/", strRequestTmp2, ClasesGenericas.GetHeader(WebOperationContext.Current.IncomingRequest.Headers, "token"));
                                    RespuestaBE<List<ContenidoBE>> varRespuestaTmp2 = new JavaScriptSerializer().Deserialize<RespuestaBE<List<ContenidoBE>>>(responseTmp2);
                                    if (varRespuestaTmp2 == null)
                                    {
                                        return new RespuestaSimpleBE()
                                        {
                                            rpt = -1,
                                            mensaje = "No se logró procesar la solicitud",
                                            data = null
                                        };
                                    }
                                    if (varRespuestaTmp2.rpt != 0)
                                    {
                                        return new RespuestaSimpleBE()
                                        {
                                            rpt = varRespuestaTmp2.rpt,
                                            mensaje = varRespuestaTmp2.mensaje,
                                            data = null
                                        };
                                    }
                                    List<ContenidoBE> lContenidoBE = varRespuestaTmp2.data;
                                    oResponse.mensaje = lContenidoBE.Count > 0 ? lContenidoBE[0].contenido : "";
                                    //oResponse.rpt = 1;
                                    //oResponse.mensaje = "Estimado paciente,\r\n";
                                    //oResponse.mensaje += "Le informamos que estamos experimentando dificultades técnicas para visualizar los resultados de exámenes de Imágenes. Si necesita asistencia, por favor llame al número (01) 219 0000 a los anexos 8424| 8426| 8842| 825.\r\n";
                                    //oResponse.mensaje += "Estamos trabajando para mejorar nuestro sistema y ofrecerle un mejor servicio. Agradecemos su comprensión.\"";
                                }
                                else
                                {
                                    oResponse.rpt = 4;
                                    oResponse.mensaje = oRespuestaSimpleBE.message;
                                }
                            }
                            else
                            {
                                oResponse.rpt = 3;
                                oResponse.mensaje = "ObtenerVueMotion: Error en comunicación";
                            }
                        }
                        else
                        {
                            oResponse.rpt = 2;
                            oResponse.mensaje = oRespuestaSimpleBE.message;
                        }
                    }
                    else
                    {
                        oResponse.rpt = 1;
                        oResponse.mensaje = "Autenticación: Error en comunicación";
                    }
                }
                #endregion
                
                //oResponse.rpt = 0;
                //oResponse.mensaje = "Si desea descargar su imagen deberá realizarlo en el navegador web en un dispositivo de escritorio.";
                //oResponse.data = "https://softvanperu.com/CSF_PORTAL_PACIENTEV3_DEV/";
                
                return oResponse;
            }
            catch (Exception ex)
            {
                //return new ErrorDA().RegistrarError(ex, "WS", "Cita.svc/ObtenerVueMotion");
                return ClasesGenericas.RegistrarErrorIntranet(ex, "WS", "Cita.svc/ObtenerVueMotion");
            }
        }

        public RespuestaBE<List<LB_ListarResultadosResPresentacionBE>> ListarResultadosLaboratorio(string tipoDocumento, string numeroDocumento, string tipoDocumentoPaciente,
            string numeroDocumentoPaciente, string periodo)
        {
            #region Validacion de Parámetros
            if (string.IsNullOrEmpty(tipoDocumentoPaciente) || string.IsNullOrEmpty(numeroDocumentoPaciente) || string.IsNullOrEmpty(periodo))
            {
                throw new WebFaultException(HttpStatusCode.BadRequest);
            }
            #endregion
            try
            {
                RespuestaBE<List<LB_ListarResultadosResPresentacionBE>> oResponse = new RespuestaBE<List<LB_ListarResultadosResPresentacionBE>>();
                oResponse.data = new List<LB_ListarResultadosResPresentacionBE>();

                WebOperationContext oContext = WebOperationContext.Current;
                string tokenSesion = ClasesGenericas.GetHeader(WebOperationContext.Current.IncomingRequest.Headers, "token");
                var oRequestTmp = new
                {
                    tokenSesion = tokenSesion,
                    tipoDocumento = tipoDocumento,
                    numeroDocumento = numeroDocumento,
                    validarFamiliar = true
                };
                string strRequestTmp = new JavaScriptSerializer().Serialize(oRequestTmp);
                string responseTmp = ClasesGenericas.PostAsyncIntranet("Usuario.svc/ObtenerPorToken/", strRequestTmp, ClasesGenericas.GetHeader(WebOperationContext.Current.IncomingRequest.Headers, "token"));
                RespuestaBE<UsuarioDocumentoBE> varRespuestaTmp = new JavaScriptSerializer().Deserialize<RespuestaBE<UsuarioDocumentoBE>>(responseTmp);

                if (varRespuestaTmp == null)
                {
                    return new RespuestaBE<List<LB_ListarResultadosResPresentacionBE>>()
                    {
                        rpt = -1,
                        mensaje = "No se logró procesar la solicitud",
                        data = null
                    };
                }
                if (varRespuestaTmp.rpt != 0)
                {
                    return new RespuestaBE<List<LB_ListarResultadosResPresentacionBE>>()
                    {
                        rpt = varRespuestaTmp.rpt,
                        mensaje = varRespuestaTmp.mensaje,
                        data = null
                    };
                }
                UsuarioDocumentoBE oUsuarioDocumento = varRespuestaTmp.data;
                if (!(oUsuarioDocumento.tipoDocumento == tipoDocumento
                    && oUsuarioDocumento.numeroDocumento == numeroDocumento))
                {
                    oContext.OutgoingResponse.StatusCode = HttpStatusCode.BadRequest;
                    return null;
                }
                #region Integración con San Felipe
                QR_RespuestaSimpleBE oRespuestaSimpleBE = new QR_RespuestaSimpleBE(); //Token
                QR_RespuestaBE<List<LB_ListarResultadosResponseBE>> oRespuestaQRBE = new QR_RespuestaBE<List<LB_ListarResultadosResponseBE>>();

                string urlBase = "", urlMetodo = "";
                string token = "";
                System.Net.ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls;
                using (var client = new HttpClient())
                {
                    urlBase = ClasesGenericas.GetSetting("WS_QR").ToString();
                    client.BaseAddress = new Uri(urlBase);
                    QR_LoginBE oRequest = new QR_LoginBE();
                    oRequest.usuario = ClasesGenericas.GetSetting("WS_QR_Usuario");
                    oRequest.password = ClasesGenericas.GetSetting("WS_QR_Clave");
                    var content = new StringContent(JsonConvert.SerializeObject(oRequest).ToString(), Encoding.UTF8, "application/json");
                    urlMetodo = "usuario/login";
                    client.DefaultRequestHeaders.Accept.Clear();
                    client.DefaultRequestHeaders.Add("User-Agent", "CSF_WS/" + ClasesGenericas.GetSetting("_VersionApp"));
                    client.DefaultRequestHeaders.Add("Accept", "*/*");
                    client.DefaultRequestHeaders.Add("Connection", "keep-alive");
                    var responseTaskOne = client.PostAsync(urlMetodo, content);
                    responseTaskOne.Wait();

                    var resultOne = responseTaskOne.Result;

                    string rptaTaskOne = "";
                    if (resultOne.IsSuccessStatusCode)
                    {
                        var readTaskOne = resultOne.Content.ReadAsStringAsync();
                        readTaskOne.Wait();
                        rptaTaskOne = readTaskOne.Result;
                        oRespuestaSimpleBE = JsonConvert.DeserializeObject<QR_RespuestaSimpleBE>(rptaTaskOne);
                        if (oRespuestaSimpleBE.success)
                        {
                            token = oRespuestaSimpleBE.result;
                            client.DefaultRequestHeaders.Add("Authorization", "Bearer " + token);
                            LB_ListarResultadosBE oListarResultadosBE = new LB_ListarResultadosBE();
                            oListarResultadosBE.numeroDocumento = numeroDocumentoPaciente;//"45866959";
                            oListarResultadosBE.periodo = periodo;//"2023";
                            content = new StringContent(JsonConvert.SerializeObject(oListarResultadosBE).ToString(), Encoding.UTF8, "application/json");
                            urlMetodo = "ResultadoROE/ListarResultados";
                            var responseTaskTwo = client.PostAsync(urlMetodo, content);
                            responseTaskTwo.Wait();

                            var resultTwo = responseTaskTwo.Result;

                            string rptaTaskTwo = "";
                            if (resultTwo.IsSuccessStatusCode)
                            {
                                var readTaskTwo = resultTwo.Content.ReadAsStringAsync();
                                readTaskTwo.Wait();
                                rptaTaskTwo = readTaskTwo.Result;
                                oRespuestaQRBE = JsonConvert.DeserializeObject<QR_RespuestaBE<List<LB_ListarResultadosResponseBE>>>(rptaTaskTwo);
                                if (oRespuestaQRBE.success)
                                {
                                    oResponse.rpt = 0;
                                    LB_ListarResultadosResPresentacionBE oResultado;// = new LB_ListarResultadosResPresentacionBE();
                                    int nPeriodos = oRespuestaQRBE.result.Count;
                                    for (int i = 0; i < nPeriodos; i++)
                                    {
                                        oResultado = new LB_ListarResultadosResPresentacionBE();
                                        oResultado.ordenAtencion = oRespuestaQRBE.result[i].ordenAtencion;
                                        oResultado.codigoAtencion = oRespuestaQRBE.result[i].codatencion;
                                        oResultado.fechaHoraAtencion = oRespuestaQRBE.result[i].fec_registra;
                                        oResultado.nombrePaciente = oRespuestaQRBE.result[i].nombrePaciente;
                                        oResultado.numeroDocumentoPaciente = oRespuestaQRBE.result[i].numDocumento;
                                        oResultado.nombreExamen = oRespuestaQRBE.result[i].nombreExamen;
                                        oResultado.esInformeResultado = oRespuestaQRBE.result[i].esInformeResultado;
                                        oResultado.esInformeHistorico = oRespuestaQRBE.result[i].esInformeHistorico;
                                        oResponse.data.Add(oResultado);
                                    }
                                    //oResponse.data = oRespuestaSimpleBE.result;
                                }
                                else
                                {
                                    oResponse.rpt = 4;
                                    oResponse.mensaje = oRespuestaSimpleBE.message;
                                }
                            }
                            else
                            {
                                oResponse.rpt = 3;
                                oResponse.mensaje = "ListarResultados: Error en comunicación";
                            }
                        }
                        else
                        {
                            oResponse.rpt = 2;
                            oResponse.mensaje = oRespuestaSimpleBE.message;
                        }
                    }
                    else
                    {
                        oResponse.rpt = 1;
                        oResponse.mensaje = "Autenticación: Error en comunicación";
                    }
                }
                #endregion

                #region Data constante
                //if (numeroDocumentoPaciente != "45454545")
                //{
                //    LB_ListarResultadosResPresentacionBE oResultado;
                //    oResultado = new LB_ListarResultadosResPresentacionBE();
                //    oResultado.ordenAtencion = "301944987";
                //    oResultado.codigoAtencion = "E2005740";
                //    oResultado.fechaHoraAtencion = DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss");
                //    oResultado.nombrePaciente = "SANCHEZ TANIA LIBERTAD MACASSI TAMBO DE";
                //    oResultado.numeroDocumentoPaciente = numeroDocumentoPaciente;
                //    oResultado.nombreExamen = "PROTEINA C REACTIVA (PCR)";
                //    oResultado.esInformeResultado = true;
                //    oResultado.esInformeHistorico = true;
                //    oResponse.data.Add(oResultado);

                //    oResultado = new LB_ListarResultadosResPresentacionBE();
                //    oResultado.ordenAtencion = "301944987";
                //    oResultado.codigoAtencion = "E2005741";
                //    oResultado.fechaHoraAtencion = DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss");
                //    oResultado.nombrePaciente = "SANCHEZ TANIA LIBERTAD MACASSI TAMBO DE";
                //    oResultado.numeroDocumentoPaciente = numeroDocumentoPaciente;
                //    oResultado.nombreExamen = "CREATININA, ELECTROLITOS SERICOS, GLUCOSA, HEMOGRAMA [CBC], UREA";
                //    oResultado.esInformeResultado = true;
                //    oResultado.esInformeHistorico = true;
                //    oResponse.data.Add(oResultado);
                //}
                #endregion

                return oResponse;
            }
            catch (Exception ex)
            {
                //return new ErrorDA().RegistrarError<List<LB_ListarResultadosResPresentacionBE>>(ex, "WS", "Cita.svc/ListarResultadosLaboratorio");
                return ClasesGenericas.RegistrarErrorIntranet<List<LB_ListarResultadosResPresentacionBE>>(ex, "WS", "Cita.svc/ListarResultadosLaboratorio");
            }
        }

        public RespuestaSimpleBE ObtenerResultadoLaboratorio(string tipoDocumento, string numeroDocumento, string ordenAtencion)
        {
            #region Validacion de Parámetros
            if (string.IsNullOrEmpty(ordenAtencion))
            {
                throw new WebFaultException(HttpStatusCode.BadRequest);
            }
            #endregion
            try
            {
                RespuestaSimpleBE oResponse = new RespuestaSimpleBE();

                WebOperationContext oContext = WebOperationContext.Current;
                string tokenSesion = ClasesGenericas.GetHeader(WebOperationContext.Current.IncomingRequest.Headers, "token");
                var oRequestTmp = new
                {
                    tokenSesion = tokenSesion,
                    tipoDocumento = tipoDocumento,
                    numeroDocumento = numeroDocumento,
                    validarFamiliar = false
                };
                string strRequestTmp = new JavaScriptSerializer().Serialize(oRequestTmp);
                string responseTmp = ClasesGenericas.PostAsyncIntranet("Usuario.svc/ObtenerPorToken/", strRequestTmp, ClasesGenericas.GetHeader(WebOperationContext.Current.IncomingRequest.Headers, "token"));
                RespuestaBE<UsuarioDocumentoBE> varRespuestaTmp = new JavaScriptSerializer().Deserialize<RespuestaBE<UsuarioDocumentoBE>>(responseTmp);

                if (varRespuestaTmp == null)
                {
                    return new RespuestaSimpleBE()
                    {
                        rpt = -1,
                        mensaje = "No se logró procesar la solicitud",
                        data = null
                    };
                }
                if (varRespuestaTmp.rpt != 0)
                {
                    return new RespuestaSimpleBE()
                    {
                        rpt = varRespuestaTmp.rpt,
                        mensaje = varRespuestaTmp.mensaje,
                        data = null
                    };
                }
                UsuarioDocumentoBE oUsuarioDocumento = varRespuestaTmp.data;
                if (!(oUsuarioDocumento.tipoDocumento == tipoDocumento
                    && oUsuarioDocumento.numeroDocumento == numeroDocumento))
                {
                    oContext.OutgoingResponse.StatusCode = HttpStatusCode.BadRequest;
                    return null;
                }

                #region Integración con San Felipe
                QR_RespuestaSimpleBE oRespuestaSimpleBE = new QR_RespuestaSimpleBE();
                //QR_RespuestaBE<QR_RespuestaSimpleBE> oRespuestaQRBE = new QR_RespuestaBE<QR_RespuestaSimpleBE>();

                string urlBase = "", urlMetodo = "";
                string token = "";
                System.Net.ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls;
                using (var client = new HttpClient())
                {
                    urlBase = ClasesGenericas.GetSetting("WS_QR").ToString();
                    client.BaseAddress = new Uri(urlBase);
                    QR_LoginBE oRequest = new QR_LoginBE();
                    oRequest.usuario = ClasesGenericas.GetSetting("WS_QR_Usuario");
                    oRequest.password = ClasesGenericas.GetSetting("WS_QR_Clave");
                    var content = new StringContent(JsonConvert.SerializeObject(oRequest).ToString(), Encoding.UTF8, "application/json");
                    urlMetodo = "usuario/login";
                    client.DefaultRequestHeaders.Accept.Clear();
                    client.DefaultRequestHeaders.Add("User-Agent", "CSF_WS/" + ClasesGenericas.GetSetting("_VersionApp"));
                    client.DefaultRequestHeaders.Add("Accept", "*/*");
                    client.DefaultRequestHeaders.Add("Connection", "keep-alive");
                    var responseTaskOne = client.PostAsync(urlMetodo, content);
                    responseTaskOne.Wait();

                    var resultOne = responseTaskOne.Result;

                    string rptaTaskOne = "";
                    if (resultOne.IsSuccessStatusCode)
                    {
                        var readTaskOne = resultOne.Content.ReadAsStringAsync();
                        readTaskOne.Wait();
                        rptaTaskOne = readTaskOne.Result;
                        oRespuestaSimpleBE = JsonConvert.DeserializeObject<QR_RespuestaSimpleBE>(rptaTaskOne);
                        if (oRespuestaSimpleBE.success)
                        {
                            token = oRespuestaSimpleBE.result;
                            client.DefaultRequestHeaders.Add("Authorization", "Bearer " + token);
                            LB_ObtenerResultadoBE oObtenerResultado = new LB_ObtenerResultadoBE();
                            oObtenerResultado.ordenAtencion = ordenAtencion;//"301944987";
                            content = new StringContent(JsonConvert.SerializeObject(oObtenerResultado).ToString(), Encoding.UTF8, "application/json");
                            urlMetodo = "ResultadoROE/ObtenerResultado";
                            var responseTaskTwo = client.PostAsync(urlMetodo, content);
                            responseTaskTwo.Wait();

                            var resultTwo = responseTaskTwo.Result;

                            string rptaTaskTwo = "";
                            if (resultTwo.IsSuccessStatusCode)
                            {
                                var readTaskTwo = resultTwo.Content.ReadAsStringAsync();
                                readTaskTwo.Wait();
                                rptaTaskTwo = readTaskTwo.Result;
                                oRespuestaSimpleBE = JsonConvert.DeserializeObject<QR_RespuestaSimpleBE>(rptaTaskTwo);
                                if (oRespuestaSimpleBE.success)
                                {
                                    oResponse.rpt = 0;
                                    oResponse.data = oRespuestaSimpleBE.result;
                                    //oResponse.rpt = 1;
                                    //oResponse.mensaje = "Estimado paciente,\r\n";
                                    //oResponse.mensaje += "Le informamos que estamos experimentando dificultades técnicas para visualizar los resultados de exámenes de Imágenes. Si necesita asistencia, por favor llame al número (01) 219 0000 a los anexos 8424| 8426| 8842| 825.\r\n";
                                    //oResponse.mensaje += "Estamos trabajando para mejorar nuestro sistema y ofrecerle un mejor servicio. Agradecemos su comprensión.\"";
                                }
                                else
                                {
                                    oResponse.rpt = 4;
                                    oResponse.mensaje = oRespuestaSimpleBE.message;
                                }
                            }
                            else
                            {
                                oResponse.rpt = 3;
                                oResponse.mensaje = "ObtenerResultado: Error en comunicación";
                            }
                        }
                        else
                        {
                            oResponse.rpt = 2;
                            oResponse.mensaje = oRespuestaSimpleBE.message;
                        }
                    }
                    else
                    {
                        oResponse.rpt = 1;
                        oResponse.mensaje = "Autenticación: Error en comunicación";
                    }
                }
                #endregion

                #region Data constante
                //oResponse.rpt = 0;
                //oResponse.mensaje = "";
                //oResponse.data = "";
                #endregion

                return oResponse;
            }
            catch (Exception ex)
            {
                //return new ErrorDA().RegistrarError(ex, "WS", "Cita.svc/ObtenerResultadoLaboratorio");
                return ClasesGenericas.RegistrarErrorIntranet(ex, "WS", "Cita.svc/ObtenerResultadoLaboratorio");
            }
        }
        public RespuestaSimpleBE ObtenerHistoricoLaboratorio(string tipoDocumento, string numeroDocumento, string ordenAtencion)
        {
            #region Validacion de Parámetros
            if (string.IsNullOrEmpty(ordenAtencion))
            {
                throw new WebFaultException(HttpStatusCode.BadRequest);
            }
            #endregion
            try
            {
                RespuestaSimpleBE oResponse = new RespuestaSimpleBE();

                WebOperationContext oContext = WebOperationContext.Current;

                string tokenSesion = ClasesGenericas.GetHeader(WebOperationContext.Current.IncomingRequest.Headers, "token");
                var oRequestTmp = new
                {
                    tokenSesion = tokenSesion,
                    tipoDocumento = tipoDocumento,
                    numeroDocumento = numeroDocumento,
                    validarFamiliar = false
                };
                string strRequestTmp = new JavaScriptSerializer().Serialize(oRequestTmp);
                string responseTmp = ClasesGenericas.PostAsyncIntranet("Usuario.svc/ObtenerPorToken/", strRequestTmp, ClasesGenericas.GetHeader(WebOperationContext.Current.IncomingRequest.Headers, "token"));
                RespuestaBE<UsuarioDocumentoBE> varRespuestaTmp = new JavaScriptSerializer().Deserialize<RespuestaBE<UsuarioDocumentoBE>>(responseTmp);

                if (varRespuestaTmp == null)
                {
                    return new RespuestaSimpleBE()
                    {
                        rpt = -1,
                        mensaje = "No se logró procesar la solicitud",
                        data = null
                    };
                }
                if (varRespuestaTmp.rpt != 0)
                {
                    return new RespuestaSimpleBE()
                    {
                        rpt = varRespuestaTmp.rpt,
                        mensaje = varRespuestaTmp.mensaje,
                        data = null
                    };
                }
                UsuarioDocumentoBE oUsuarioDocumento = varRespuestaTmp.data;
                if (!(oUsuarioDocumento.tipoDocumento == tipoDocumento
                    && oUsuarioDocumento.numeroDocumento == numeroDocumento))
                {
                    oContext.OutgoingResponse.StatusCode = HttpStatusCode.BadRequest;
                    return null;
                }

                #region Integración con San Felipe
                QR_RespuestaSimpleBE oRespuestaSimpleBE = new QR_RespuestaSimpleBE();
                //QR_RespuestaBE<QR_RespuestaSimpleBE> oRespuestaQRBE = new QR_RespuestaBE<QR_RespuestaSimpleBE>();

                string urlBase = "", urlMetodo = "";
                string token = "";
                System.Net.ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls;
                using (var client = new HttpClient())
                {
                    urlBase = ClasesGenericas.GetSetting("WS_QR").ToString();
                    client.BaseAddress = new Uri(urlBase);
                    QR_LoginBE oRequest = new QR_LoginBE();
                    oRequest.usuario = ClasesGenericas.GetSetting("WS_QR_Usuario");
                    oRequest.password = ClasesGenericas.GetSetting("WS_QR_Clave");
                    var content = new StringContent(JsonConvert.SerializeObject(oRequest).ToString(), Encoding.UTF8, "application/json");
                    urlMetodo = "usuario/login";
                    client.DefaultRequestHeaders.Accept.Clear();
                    client.DefaultRequestHeaders.Add("User-Agent", "CSF_WS/" + ClasesGenericas.GetSetting("_VersionApp"));
                    client.DefaultRequestHeaders.Add("Accept", "*/*");
                    client.DefaultRequestHeaders.Add("Connection", "keep-alive");
                    var responseTaskOne = client.PostAsync(urlMetodo, content);
                    responseTaskOne.Wait();

                    var resultOne = responseTaskOne.Result;

                    string rptaTaskOne = "";
                    if (resultOne.IsSuccessStatusCode)
                    {
                        var readTaskOne = resultOne.Content.ReadAsStringAsync();
                        readTaskOne.Wait();
                        rptaTaskOne = readTaskOne.Result;
                        oRespuestaSimpleBE = JsonConvert.DeserializeObject<QR_RespuestaSimpleBE>(rptaTaskOne);
                        if (oRespuestaSimpleBE.success)
                        {
                            token = oRespuestaSimpleBE.result;
                            client.DefaultRequestHeaders.Add("Authorization", "Bearer " + token);
                            LB_ObtenerHistoricoBE oObtenerHistoricoBE = new LB_ObtenerHistoricoBE();
                            oObtenerHistoricoBE.ordenAtencion = ordenAtencion;//"301944987";
                            content = new StringContent(JsonConvert.SerializeObject(oObtenerHistoricoBE).ToString(), Encoding.UTF8, "application/json");
                            urlMetodo = "ResultadoROE/ObtenerHistorico";
                            var responseTaskTwo = client.PostAsync(urlMetodo, content);
                            responseTaskTwo.Wait();

                            var resultTwo = responseTaskTwo.Result;

                            string rptaTaskTwo = "";
                            if (resultTwo.IsSuccessStatusCode)
                            {
                                var readTaskTwo = resultTwo.Content.ReadAsStringAsync();
                                readTaskTwo.Wait();
                                rptaTaskTwo = readTaskTwo.Result;
                                oRespuestaSimpleBE = JsonConvert.DeserializeObject<QR_RespuestaSimpleBE>(rptaTaskTwo);
                                if (oRespuestaSimpleBE.success)
                                {
                                    oResponse.rpt = 0;
                                    oResponse.data = oRespuestaSimpleBE.result;
                                    //oResponse.rpt = 1;
                                    //oResponse.mensaje = "Estimado paciente,\r\n";
                                    //oResponse.mensaje += "Le informamos que estamos experimentando dificultades técnicas para visualizar los resultados de exámenes de Imágenes. Si necesita asistencia, por favor llame al número (01) 219 0000 a los anexos 8424| 8426| 8842| 825.\r\n";
                                    //oResponse.mensaje += "Estamos trabajando para mejorar nuestro sistema y ofrecerle un mejor servicio. Agradecemos su comprensión.\"";
                                }
                                else
                                {
                                    oResponse.rpt = 4;
                                    oResponse.mensaje = oRespuestaSimpleBE.message;
                                }
                            }
                            else
                            {
                                oResponse.rpt = 3;
                                oResponse.mensaje = "ObtenerHistorico: Error en comunicación";
                            }
                        }
                        else
                        {
                            oResponse.rpt = 2;
                            oResponse.mensaje = oRespuestaSimpleBE.message;
                        }
                    }
                    else
                    {
                        oResponse.rpt = 1;
                        oResponse.mensaje = "Autenticación: Error en comunicación";
                    }
                }
                #endregion

                #region Data constante
                //oResponse.rpt = 0;
                //oResponse.mensaje = "";
                //oResponse.data = "";
                #endregion

                return oResponse;
            }
            catch (Exception ex)
            {
                //return new ErrorDA().RegistrarError(ex, "WS", "Cita.svc/ObtenerHistoricoLaboratorio");
                return ClasesGenericas.RegistrarErrorIntranet(ex, "WS", "Cita.svc/ObtenerHistoricoLaboratorio");
            }
        }

        public RespuestaBE<List<UsuarioTarjetaBE>> ListarTarjetas(string tipoDocumento, string numeroDocumento)
        {
            #region Validacion de Parámetros
            if (string.IsNullOrEmpty(tipoDocumento) || string.IsNullOrEmpty(numeroDocumento))
            {
                throw new WebFaultException(HttpStatusCode.BadRequest);
            }
            #endregion
            try
            {
                var oRequest = new
                {
                    tipoDocumento = tipoDocumento,
                    numeroDocumento = numeroDocumento
                };
                string strRequest = new JavaScriptSerializer().Serialize(oRequest);
                string response = ClasesGenericas.PostAsyncIntranet("Cita.svc/ListarTarjetas/", strRequest, ClasesGenericas.GetHeader(WebOperationContext.Current.IncomingRequest.Headers, "token"));
                RespuestaBE<List<UsuarioTarjetaBE>> varRespuesta = new JavaScriptSerializer().Deserialize<RespuestaBE<List<UsuarioTarjetaBE>>>(response);
                if (varRespuesta == null)
                {
                    return new RespuestaBE<List<UsuarioTarjetaBE>>()
                    {
                        rpt = -1,
                        mensaje = "No se logró procesar la solicitud",
                        data = null
                    };
                }
                return varRespuesta;
            }
            catch (Exception ex)
            {
                //return new ErrorDA().RegistrarError<List<UsuarioTarjetaBE>>(ex, "WS", "Cita.svc");
                return ClasesGenericas.RegistrarErrorIntranet<List<UsuarioTarjetaBE>>(ex, "WS", "Cita.svc/ListarTarjetas");
            }
        }
        public RespuestaSimpleBE RegistrarTarjeta(string tipoDocumento, string numeroDocumento, string numeroTarjeta,
            string tokenTarjeta, string tipoTarjeta, string nombres, string apellidos, string correo, string merchantBuyerId, string origen)
        {
            #region Validacion de Parámetros
            if (string.IsNullOrEmpty(tipoDocumento) || string.IsNullOrEmpty(numeroDocumento) || string.IsNullOrEmpty(numeroTarjeta) ||
                string.IsNullOrEmpty(tokenTarjeta) || string.IsNullOrEmpty(tipoTarjeta) || string.IsNullOrEmpty(nombres) ||
                string.IsNullOrEmpty(apellidos) || string.IsNullOrEmpty(apellidos) || string.IsNullOrEmpty(correo) ||
                string.IsNullOrEmpty(origen))
            {
                throw new WebFaultException(HttpStatusCode.BadRequest);
            }
            int varTipoDocumento;
            if (!int.TryParse(tipoDocumento, out varTipoDocumento))
            {
                return new RespuestaSimpleBE()
                {
                    rpt = 100,
                    mensaje = "El parámetro tipoDocumento debe ser numérico",
                    data = null
                };
            }
            #endregion
            try
            {
                var oRequest = new
                {
                    tipoDocumento = tipoDocumento,
                    numeroDocumento = numeroDocumento,
                    numeroTarjeta = numeroTarjeta,
                    tokenTarjeta = tokenTarjeta,
                    tipoTarjeta = tipoTarjeta,
                    nombres = nombres,
                    apellidos = apellidos,
                    correo = correo,
                    merchantBuyerId = merchantBuyerId,
                    origen = origen
                };
                string strRequest = new JavaScriptSerializer().Serialize(oRequest);
                string response = ClasesGenericas.PostAsyncIntranet("Cita.svc/RegistrarTarjeta/", strRequest, ClasesGenericas.GetHeader(WebOperationContext.Current.IncomingRequest.Headers, "token"));
                RespuestaSimpleBE varRespuesta = new JavaScriptSerializer().Deserialize<RespuestaSimpleBE>(response);
                if (varRespuesta == null)
                {
                    return new RespuestaSimpleBE()
                    {
                        rpt = -1,
                        mensaje = "No se logró procesar la solicitud",
                        data = null
                    };
                }
                return varRespuesta;
            }
            catch (Exception ex)
            {
                return ClasesGenericas.RegistrarErrorIntranet(ex, "WS", "Cita.svc/RegistrarTarjeta");
            }
        }
        public RespuestaSimpleBE ActualizarEstadoTarjeta(string tipoDocumento, string numeroDocumento, string idUsuarioTarjeta,
            string codigoEstado, string origen)
        {
            #region Validacion de Parámetros
            if (string.IsNullOrEmpty(tipoDocumento) || string.IsNullOrEmpty(numeroDocumento) || string.IsNullOrEmpty(idUsuarioTarjeta) ||
                string.IsNullOrEmpty(origen))
            {
                throw new WebFaultException(HttpStatusCode.BadRequest);
            }
            int varIdUsuarioTarjeta;
            if (!int.TryParse(idUsuarioTarjeta, out varIdUsuarioTarjeta))
            {
                return new RespuestaSimpleBE()
                {
                    rpt = 100,
                    mensaje = "El parámetro idUsuarioTarjeta debe ser numérico",
                    data = null
                };
            }
            #endregion
            try
            {
                var oRequest = new
                {
                    tipoDocumento = tipoDocumento,
                    numeroDocumento = numeroDocumento,
                    idUsuarioTarjeta = idUsuarioTarjeta,
                    codigoEstado = codigoEstado,
                    origen = origen
                };
                string strRequest = new JavaScriptSerializer().Serialize(oRequest);
                string response = ClasesGenericas.PostAsyncIntranet("Cita.svc/ActualizarEstadoTarjeta/", strRequest, ClasesGenericas.GetHeader(WebOperationContext.Current.IncomingRequest.Headers, "token"));
                RespuestaSimpleBE varRespuesta = new JavaScriptSerializer().Deserialize<RespuestaSimpleBE>(response);
                if (varRespuesta == null)
                {
                    return new RespuestaSimpleBE()
                    {
                        rpt = -1,
                        mensaje = "No se logró procesar la solicitud",
                        data = null
                    };
                }
                return varRespuesta;
            }
            catch (Exception ex)
            {
                return ClasesGenericas.RegistrarErrorIntranet(ex, "WS", "Cita.svc/RegistrarTarjeta");
            }
        }
        public RespuestaSimpleBE ProcesarPagoIzipayApp(string code, string message, string messageUser,
            string messageUserEng, IIResponseBE response, string payloadHttp,
            string signature, string transactionId)
        {
            //ProcesarPagoIzipayV2 es donde llama la IPN de la nueva pasarela de Izipay
            //Referencia: ProcesarPagoIzipay
            RespuestaSimpleBE oResponse = new RespuestaSimpleBE()
            {
                rpt = 1,
                mensaje = "No procesado"
            };
            //string cadena3 = Encoding.UTF8.GetString(OperationContext.Current.RequestContext.RequestMessage.GetBody<byte[]>());
            //string rpta = "";
            try
            {
                IPNIzipayBE oIPNIzipayBE = new IPNIzipayBE();
                oIPNIzipayBE.code = code;
                oIPNIzipayBE.message = message; 
                oIPNIzipayBE.messageUser = messageUser;
                oIPNIzipayBE.messageUserEng = messageUserEng; 
                oIPNIzipayBE.response = response; 
                oIPNIzipayBE.payloadHttp = payloadHttp;
                oIPNIzipayBE.signature = signature; 
                oIPNIzipayBE.transactionId = transactionId;

                string idCita = oIPNIzipayBE.response.order[0].orderNumber;//krAnswer.orderDetails.orderId;
                long purchaseNumber = long.Parse(oIPNIzipayBE.transactionId);//oOrderPago.order.number;//obeAuthorizationNumber.answer.transactions[0].shopId;
                string idOrden = "";
                string rutaLog = ConfigurationManager.AppSettings["_LogPath"];
                DateTime oFechaActual = DateTime.Now;

                string directorioIPN = Path.Combine(rutaLog, "IPN");
                if (!Directory.Exists(directorioIPN)) Directory.CreateDirectory(directorioIPN);
                string rutaAnio = Path.Combine(directorioIPN, oFechaActual.Year.ToString());
                if (!Directory.Exists(rutaAnio)) Directory.CreateDirectory(rutaAnio);
                string rutaMes = Path.Combine(rutaAnio, oFechaActual.Month.ToString().PadLeft(2, '0'));
                if (!Directory.Exists(rutaMes)) Directory.CreateDirectory(rutaMes);

                string nombreArchivo = DateTime.Now.ToString("yyyy-MM-dd") + "_IPN_ProcesarPagoIzipayApp" + ".txt";
                string rutaArchivo = Path.Combine(rutaMes, nombreArchivo);

                string request = new JavaScriptSerializer().Serialize(oIPNIzipayBE);
                using (FileStream stream = new FileStream(rutaArchivo, FileMode.Append, FileAccess.Write, FileShare.Write))
                {
                    using (StreamWriter streamWriter = new StreamWriter(stream, Encoding.Default))
                    {
                        streamWriter.Write(oFechaActual.ToString("dd/MM/yyyy HH:mm:ss.fff"));
                        streamWriter.Write(" (Cita.IDCita: ");
                        streamWriter.Write(idCita.ToString());
                        streamWriter.Write(", LogPago.IDLogPago: ");
                        streamWriter.Write(purchaseNumber);
                        streamWriter.Write(")\r\nRequest: ");
                        streamWriter.Write(request);
                        streamWriter.WriteLine("");
                        streamWriter.WriteLine(new string('_', 50));
                    }
                }
                string codigo = oIPNIzipayBE.code.Equals("00") ? "000" : oIPNIzipayBE.code;
                string mensaje = oIPNIzipayBE.messageUser;
                string transactionID = oIPNIzipayBE.response.order[0].codeAuth;
                string numeroTarjeta = oIPNIzipayBE.response.card.pan;
                //decimal montoDec = ((decimal)oIPNIzipayBE.response.order[0].amount);//(krAnswer.transactions[0].transactionDetails.cardDetails.authorizationResponse.amount)) / 100.00m;
                string monto = oIPNIzipayBE.response.order[0].amount;//montoDec.ToString();
                string IDUnico = oIPNIzipayBE.response.order[0].uniqueId;
                string tipoTarjeta = oIPNIzipayBE.response.card.brand;
                //DateTime oFechaHoraTransaccion = DateTime.Parse(krAnswer.transactions[0].creationDate);
                string fechaTransaccionTmp = oIPNIzipayBE.response.order[0].dateTransaction;
                string horaTransaccionTmp = oIPNIzipayBE.response.order[0].timeTransaction;
                string fechaTransaccion = fechaTransaccionTmp.Substring(6, 2) + "/" + fechaTransaccionTmp.Substring(4, 2) + "/" + fechaTransaccionTmp.Substring(0, 4);
                string horaTransaccion = horaTransaccionTmp.Substring(0, 2) + ":" + horaTransaccionTmp.Substring(2, 2) + ":" + horaTransaccionTmp.Substring(4, 2);
                string tokenTarjeta = oIPNIzipayBE.response.token.cardToken;
                string merchantBuyerId = oIPNIzipayBE.response.token.merchantBuyerId;
                string payMethod = oIPNIzipayBE.response.payMethod;
                string nombresTarjeta = oIPNIzipayBE.response.billing.firstName;
                string apellidosTarjeta = oIPNIzipayBE.response.billing.lastName;
                string correoTarjeta = oIPNIzipayBE.response.billing.email;
                //string departamento = !string.IsNullOrEmpty(oIPNIzipayBE.response.billing.state) ? oIPNIzipayBE.response.billing.state : "";
                //string[] aTmp = departamento.Split(','); //[0] - Departamento y [1] - Origen de pago
                //string origen = "IPN";
                //if (aTmp.Length > 1)
                //{
                //    origen = aTmp[aTmp.Length - 1];
                //    origen = origen.Equals("PP") ? "PortalPaciente" : origen; // PP (PortalPaciente), android, ios o huawei
                //}
                string origen = oIPNIzipayBE.response.billing.state;
                string desTipoDocumentoUsuario = oIPNIzipayBE.response.billing.documentType; //Descripción de tipo de documento
                string numeroDocumentoUsuario = oIPNIzipayBE.response.billing.document; //Número de documento
                string cadena = idCita + "¦" + desTipoDocumentoUsuario;
                if (!String.IsNullOrEmpty(idCita))
                {
                    var oRequest = new
                    {
                        data = cadena
                    };
                    string strRequest = new JavaScriptSerializer().Serialize(oRequest);
                    string response2 = ClasesGenericas.PostAsyncIntranet("Cita.svc/ProcesarPagoIzipay/", strRequest, ClasesGenericas.GetHeader(WebOperationContext.Current.IncomingRequest.Headers, "token"));
                    RespuestaSimpleBE varRespuesta = new JavaScriptSerializer().Deserialize<RespuestaSimpleBE>(response2);

                    if (varRespuesta == null)
                    {
                        return new RespuestaSimpleBE()
                        {
                            rpt = -1,
                            mensaje = "No se logró procesar la solicitud",
                            data = null
                        };
                    }

                    if (!string.IsNullOrEmpty(varRespuesta.data))
                    {
                        string[] aResponse = varRespuesta.data.Split('¦');
                        string IDCitaPresencial = aResponse[0];
                        string IDCitaVirtual = aResponse[1];
                        string OrigenMonto = aResponse[2];
                        string RUCSeguro = aResponse[3];
                        string IAFAS = aResponse[4];
                        string CodProducto = aResponse[5];
                        string CodCobertura = aResponse[6];
                        string CodAsegurado = aResponse[7];
                        string CodigoParentesco = aResponse[8];
                        string TipoDocumentoContratante = aResponse[9];
                        string NumeroDocumentoContratante = aResponse[10];
                        string DeseaBoleta = aResponse[11];
                        string RUCFactura = aResponse[12];
                        string RazonSocialFactura = aResponse[13];
                        string DireccionFactura = aResponse[14];
                        string TipoDocumentoBoleta = aResponse[15];
                        string NumeroDocumentoBoleta = aResponse[16];
                        string NombresBoleta = aResponse[17];
                        string ApellidoPaternoBoleta = aResponse[18];
                        string ApellidoMaternoBoleta = aResponse[19];
                        string DireccionBoleta = aResponse[20];
                        string FechaNacimientoBoleta = aResponse[21];
                        string CelularBoleta = aResponse[22];
                        string EmailBoleta = aResponse[23];
                        string CodigoTipoPago = aResponse[24];
                        string tipoDocumentoUsuario = aResponse[25];

                        oResponse = RegistrarPagoCita(IDCitaPresencial, IDCitaVirtual, codigo, mensaje,
                            fechaTransaccion, horaTransaccion, purchaseNumber, transactionID, numeroTarjeta,
                            DeseaBoleta, RUCFactura, RazonSocialFactura, DireccionFactura, origen,//"IPN",
                            monto, IDUnico, correoTarjeta, "", "", "", tipoTarjeta,
                            TipoDocumentoBoleta, NumeroDocumentoBoleta, NombresBoleta, ApellidoPaternoBoleta,
                            ApellidoMaternoBoleta, DireccionBoleta,
                            FechaNacimientoBoleta, CelularBoleta, EmailBoleta, RUCSeguro,
                            CodCobertura, OrigenMonto, null, CodProducto, IAFAS, CodigoParentesco,
                            CodAsegurado, TipoDocumentoContratante, NumeroDocumentoContratante, CodigoTipoPago,
                            true, tipoDocumentoUsuario, numeroDocumentoUsuario, tokenTarjeta, nombresTarjeta, 
                            apellidosTarjeta, merchantBuyerId, payMethod,
                            true);
                    }
                    else
                    {
                        oResponse.rpt = 0;
                        oResponse.mensaje = "Cita ya fue pagada";
                    }
                    string responseWS = new JavaScriptSerializer().Serialize(oResponse);
                    using (FileStream stream = new FileStream(rutaArchivo, FileMode.Append, FileAccess.Write, FileShare.Write))
                    {
                        using (StreamWriter streamWriter = new StreamWriter(stream, Encoding.Default))
                        {
                            streamWriter.Write(oFechaActual.ToString("dd/MM/yyyy HH:mm:ss.fff"));
                            streamWriter.Write(" (Cita.IDCita: ");
                            streamWriter.Write(idCita.ToString());
                            streamWriter.Write(", LogPago.IDLogPago: ");
                            streamWriter.Write(purchaseNumber);
                            streamWriter.Write(")\r\nResponse: ");
                            streamWriter.Write(responseWS);
                            streamWriter.WriteLine("");
                            streamWriter.WriteLine(new string('_', 50));
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                if (ex.Message.StartsWith("ERRFU:"))
                {
                    oResponse.rpt = 0;
                    oResponse.mensaje = ex.Message.Replace("ERRFU:", "");
                }
                else
                {
                    return ClasesGenericas.RegistrarErrorIntranet(ex, "WS", "Cita.svc/ProcesarPagoIzipayApp");
                }
            }
            return oResponse;
        }

        public RespuestaSimpleBE ProcesarPagoIzipayWeb(string code, string message, string messageUser,
            string messageUserEng, IIResponseBE response, string payloadHttp,
            string signature, string transactionId)
        {
            //ProcesarPagoIzipayV2 es donde llama la IPN de la nueva pasarela de Izipay
            //Referencia: ProcesarPagoIzipay
            RespuestaSimpleBE oResponse = new RespuestaSimpleBE()
            {
                rpt = 1,
                mensaje = "No procesado"
            };
            //string cadena3 = Encoding.UTF8.GetString(OperationContext.Current.RequestContext.RequestMessage.GetBody<byte[]>());
            //string rpta = "";
            try
            {
                IPNIzipayBE oIPNIzipayBE = new IPNIzipayBE();
                oIPNIzipayBE.code = code;
                oIPNIzipayBE.message = message;
                oIPNIzipayBE.messageUser = messageUser;
                oIPNIzipayBE.messageUserEng = messageUserEng;
                oIPNIzipayBE.response = response;
                oIPNIzipayBE.payloadHttp = payloadHttp;
                oIPNIzipayBE.signature = signature;
                oIPNIzipayBE.transactionId = transactionId;

                string idCita = oIPNIzipayBE.response.order[0].orderNumber;//krAnswer.orderDetails.orderId;
                long purchaseNumber = long.Parse(oIPNIzipayBE.transactionId);//oOrderPago.order.number;//obeAuthorizationNumber.answer.transactions[0].shopId;
                string idOrden = "";
                string rutaLog = ConfigurationManager.AppSettings["_LogPath"];
                DateTime oFechaActual = DateTime.Now;

                string directorioIPN = Path.Combine(rutaLog, "IPN");
                if (!Directory.Exists(directorioIPN)) Directory.CreateDirectory(directorioIPN);
                string rutaAnio = Path.Combine(directorioIPN, oFechaActual.Year.ToString());
                if (!Directory.Exists(rutaAnio)) Directory.CreateDirectory(rutaAnio);
                string rutaMes = Path.Combine(rutaAnio, oFechaActual.Month.ToString().PadLeft(2, '0'));
                if (!Directory.Exists(rutaMes)) Directory.CreateDirectory(rutaMes);

                string nombreArchivo = DateTime.Now.ToString("yyyy-MM-dd") + "_IPN_ProcesarPagoIzipayWeb" + ".txt";
                string rutaArchivo = Path.Combine(rutaMes, nombreArchivo);

                string request = new JavaScriptSerializer().Serialize(oIPNIzipayBE);
                using (FileStream stream = new FileStream(rutaArchivo, FileMode.Append, FileAccess.Write, FileShare.Write))
                {
                    using (StreamWriter streamWriter = new StreamWriter(stream, Encoding.Default))
                    {
                        streamWriter.Write(oFechaActual.ToString("dd/MM/yyyy HH:mm:ss.fff"));
                        streamWriter.Write(" (Cita.IDCita: ");
                        streamWriter.Write(idCita.ToString());
                        streamWriter.Write(", LogPago.IDLogPago: ");
                        streamWriter.Write(purchaseNumber);
                        streamWriter.Write(")\r\nRequest: ");
                        streamWriter.Write(request);
                        streamWriter.WriteLine("");
                        streamWriter.WriteLine(new string('_', 50));
                    }
                }
                string codigo = oIPNIzipayBE.code.Equals("00") ? "000" : oIPNIzipayBE.code;
                string mensaje = oIPNIzipayBE.messageUser;
                string transactionID = oIPNIzipayBE.response.order[0].codeAuth;
                string numeroTarjeta = oIPNIzipayBE.response.card.pan;
                //decimal montoDec = ((decimal)oIPNIzipayBE.response.order[0].amount);//(krAnswer.transactions[0].transactionDetails.cardDetails.authorizationResponse.amount)) / 100.00m;
                string monto = oIPNIzipayBE.response.order[0].amount;//montoDec.ToString();
                string IDUnico = oIPNIzipayBE.response.order[0].uniqueId;
                string tipoTarjeta = oIPNIzipayBE.response.card.brand;
                //DateTime oFechaHoraTransaccion = DateTime.Parse(krAnswer.transactions[0].creationDate);
                string fechaTransaccionTmp = oIPNIzipayBE.response.order[0].dateTransaction;
                string horaTransaccionTmp = oIPNIzipayBE.response.order[0].timeTransaction;
                string fechaTransaccion = fechaTransaccionTmp.Substring(6, 2) + "/" + fechaTransaccionTmp.Substring(4, 2) + "/" + fechaTransaccionTmp.Substring(0, 4);
                string horaTransaccion = horaTransaccionTmp.Substring(0, 2) + ":" + horaTransaccionTmp.Substring(2, 2) + ":" + horaTransaccionTmp.Substring(4, 2);
                string tokenTarjeta = oIPNIzipayBE.response.token.cardToken;
                string merchantBuyerId = oIPNIzipayBE.response.token.merchantBuyerId;
                string payMethod = oIPNIzipayBE.response.payMethod;
                string nombresTarjeta = oIPNIzipayBE.response.billing.firstName;
                string apellidosTarjeta = oIPNIzipayBE.response.billing.lastName;
                string correoTarjeta = oIPNIzipayBE.response.billing.email;
                //string departamento = !string.IsNullOrEmpty(oIPNIzipayBE.response.billing.state) ? oIPNIzipayBE.response.billing.state : "";
                //string[] aTmp = departamento.Split(','); //[0] - Departamento y [1] - Origen de pago
                //string origen = "IPN";
                //if (aTmp.Length > 1)
                //{
                //    origen = aTmp[aTmp.Length - 1];
                //    origen = origen.Equals("PP") ? "PortalPaciente" : origen; // PP (PortalPaciente), android, ios o huawei
                //}
                string origen = oIPNIzipayBE.response.billing.state;
                string desTipoDocumentoUsuario = oIPNIzipayBE.response.billing.documentType; //Descripción de tipo de documento
                string numeroDocumentoUsuario = oIPNIzipayBE.response.billing.document; //Número de documento
                string cadena = idCita + "¦" + desTipoDocumentoUsuario;
                if (!String.IsNullOrEmpty(idCita))
                {
                    var oRequest = new
                    {
                        data = cadena
                    };
                    string strRequest = new JavaScriptSerializer().Serialize(oRequest);
                    string response2 = ClasesGenericas.PostAsyncIntranet("Cita.svc/ProcesarPagoIzipay/", strRequest, ClasesGenericas.GetHeader(WebOperationContext.Current.IncomingRequest.Headers, "token"));
                    RespuestaSimpleBE varRespuesta = new JavaScriptSerializer().Deserialize<RespuestaSimpleBE>(response2);

                    if (varRespuesta == null)
                    {
                        return new RespuestaSimpleBE()
                        {
                            rpt = -1,
                            mensaje = "No se logró procesar la solicitud",
                            data = null
                        };
                    }

                    if (!string.IsNullOrEmpty(varRespuesta.data))
                    {
                        string[] aResponse = varRespuesta.data.Split('¦');
                        string IDCitaPresencial = aResponse[0];
                        string IDCitaVirtual = aResponse[1];
                        string OrigenMonto = aResponse[2];
                        string RUCSeguro = aResponse[3];
                        string IAFAS = aResponse[4];
                        string CodProducto = aResponse[5];
                        string CodCobertura = aResponse[6];
                        string CodAsegurado = aResponse[7];
                        string CodigoParentesco = aResponse[8];
                        string TipoDocumentoContratante = aResponse[9];
                        string NumeroDocumentoContratante = aResponse[10];
                        string DeseaBoleta = aResponse[11];
                        string RUCFactura = aResponse[12];
                        string RazonSocialFactura = aResponse[13];
                        string DireccionFactura = aResponse[14];
                        string TipoDocumentoBoleta = aResponse[15];
                        string NumeroDocumentoBoleta = aResponse[16];
                        string NombresBoleta = aResponse[17];
                        string ApellidoPaternoBoleta = aResponse[18];
                        string ApellidoMaternoBoleta = aResponse[19];
                        string DireccionBoleta = aResponse[20];
                        string FechaNacimientoBoleta = aResponse[21];
                        string CelularBoleta = aResponse[22];
                        string EmailBoleta = aResponse[23];
                        string CodigoTipoPago = aResponse[24];
                        string tipoDocumentoUsuario = aResponse[25];

                        oResponse = RegistrarPagoCita(IDCitaPresencial, IDCitaVirtual, codigo, mensaje,
                            fechaTransaccion, horaTransaccion, purchaseNumber, transactionID, numeroTarjeta,
                            DeseaBoleta, RUCFactura, RazonSocialFactura, DireccionFactura, origen,//"IPN",
                            monto, IDUnico, correoTarjeta, "", "", "", tipoTarjeta,
                            TipoDocumentoBoleta, NumeroDocumentoBoleta, NombresBoleta, ApellidoPaternoBoleta,
                            ApellidoMaternoBoleta, DireccionBoleta,
                            FechaNacimientoBoleta, CelularBoleta, EmailBoleta, RUCSeguro,
                            CodCobertura, OrigenMonto, null, CodProducto, IAFAS, CodigoParentesco,
                            CodAsegurado, TipoDocumentoContratante, NumeroDocumentoContratante, CodigoTipoPago,
                            true, tipoDocumentoUsuario, numeroDocumentoUsuario, tokenTarjeta, nombresTarjeta,
                            apellidosTarjeta, merchantBuyerId, payMethod,
                            true);
                    }
                    else
                    {
                        oResponse.rpt = 0;
                        oResponse.mensaje = "Cita ya fue pagada";
                    }
                    string responseWS = new JavaScriptSerializer().Serialize(oResponse);
                    using (FileStream stream = new FileStream(rutaArchivo, FileMode.Append, FileAccess.Write, FileShare.Write))
                    {
                        using (StreamWriter streamWriter = new StreamWriter(stream, Encoding.Default))
                        {
                            streamWriter.Write(oFechaActual.ToString("dd/MM/yyyy HH:mm:ss.fff"));
                            streamWriter.Write(" (Cita.IDCita: ");
                            streamWriter.Write(idCita.ToString());
                            streamWriter.Write(", LogPago.IDLogPago: ");
                            streamWriter.Write(purchaseNumber);
                            streamWriter.Write(")\r\nResponse: ");
                            streamWriter.Write(responseWS);
                            streamWriter.WriteLine("");
                            streamWriter.WriteLine(new string('_', 50));
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                if (ex.Message.StartsWith("ERRFU:"))
                {
                    oResponse.rpt = 0;
                    oResponse.mensaje = ex.Message.Replace("ERRFU:", "");
                }
                else
                {
                    return ClasesGenericas.RegistrarErrorIntranet(ex, "WS", "Cita.svc/ProcesarPagoIzipayWeb");
                }
            }
            return oResponse;
        }

        public RespuestaBE<VideollamadaPendienteBE> ConsultaVideollamadaPendiente(string type, string status)
        {
            #region Validacion de Parámetros
            if (string.IsNullOrEmpty(type) || string.IsNullOrEmpty(status))
            {
                throw new WebFaultException(HttpStatusCode.BadRequest);
            }
            int varStatus;
            if (!string.IsNullOrEmpty(status))
            {
                if (!int.TryParse(status, out varStatus))
                {
                    //responder el roomname
                    return new RespuestaBE<VideollamadaPendienteBE>()
                    {
                        rpt = 100,
                        mensaje = "El parámetro status debe ser numérico",
                        data = null
                    };
                }
            }
            #endregion
            try
            {
                var oRequest = new
                {
                    type = type,
                    status = status
                };
                string strRequest = new JavaScriptSerializer().Serialize(oRequest);
                string response = ClasesGenericas.PostAsyncIntranet("Cita.svc/ConsultaVideollamadaPendiente/", strRequest);
                RespuestaBE<VideollamadaPendienteBE> varRespuesta = new JavaScriptSerializer().Deserialize<RespuestaBE<VideollamadaPendienteBE>>(response);
                if (varRespuesta == null)
                {
                    return new RespuestaBE<VideollamadaPendienteBE>()
                    {
                        rpt = -1,
                        mensaje = "No se logró procesar la solicitud",
                        data = null
                    };
                }
                return varRespuesta;
            }
            catch (Exception ex)
            {
                return ClasesGenericas.RegistrarErrorIntranet<VideollamadaPendienteBE>(ex, "WS", "Cita.svc/ConsultaVideollamadaPendiente");
            }
        }

        #region Helpers
        public string CitaSecuencia(string data)
        {
            throw new WebFaultException(HttpStatusCode.BadRequest);
            //string response = "";
            //SqlDA oSqlDA = new SqlDA();
            //response = oSqlDA.EjecutarComando("uspCita_Secuencia", "@lstParametros", data);
            ////DataSQL oDataSQL = new DataSQL();
            ////response = oDataSQL.EjecutarComando("uspCita_Secuencia", "@lstParametros", data);
            //return response;
        }
        private string PostAsync(String urlBase, String url, String element, String data = "")
        {
            throw new WebFaultException(HttpStatusCode.BadRequest);
            //String response = "";
            //HttpClient oCliente = new HttpClient()
            //{
            //    BaseAddress = new Uri(urlBase),
            //    Timeout = new TimeSpan(0, 2, 0)
            //};

            //System.Net.ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls;
            //oCliente.DefaultRequestHeaders.Accept.Clear();
            //oCliente.DefaultRequestHeaders.Accept.Add(
            //    new MediaTypeWithQualityHeaderValue("application/json")
            //);
            //SqlDA oSqlDA = new SqlDA();
            //String rpta = oSqlDA.EjecutarComando("uspSynapsis_ObtenerKeys", "@lstParametros", _idClinica);
            //String[] aData = !String.IsNullOrEmpty(rpta) ? rpta.Split('¦') : new String[0];
            //if (aData.Length > 0)
            //{
            //    //string apiIndetif = _apiKeySynap;
            //    string apiIndetif = aData[0];
            //    string sgnElement = element;
            //    //string apiSignkey = "13z=VB&g&0cH&4j1edIPg&QC/5*LDmxt";
            //    string apiSignkey = aData[1];
            //    if (!String.IsNullOrEmpty(apiIndetif) && !String.IsNullOrEmpty(apiSignkey))
            //    {
            //        string encriptaSha512 = SHA512(apiIndetif + sgnElement + apiSignkey);
            //        oCliente.DefaultRequestHeaders.Add("identifier", apiIndetif);
            //        oCliente.DefaultRequestHeaders.Add("signedElement", sgnElement);
            //        oCliente.DefaultRequestHeaders.Add("signature", encriptaSha512);

            //        HttpResponseMessage oResponse = oCliente.PostAsync(
            //            url,
            //            new StringContent(data, Encoding.UTF8, "application/json")
            //        ).Result;
            //        if (oResponse != null && oResponse.StatusCode.Equals(HttpStatusCode.OK))
            //        {
            //            response = oResponse.Content.ReadAsStringAsync().Result;
            //        }
            //    }
            //}
            //return response;
        }
        private static string SHA512(string str)
        {
            SHA512 sha512 = SHA512Managed.Create();
            ASCIIEncoding encoding = new ASCIIEncoding();
            byte[] stream = null;
            StringBuilder sb = new StringBuilder();
            stream = sha512.ComputeHash(encoding.GetBytes(str));
            for (int i = 0; i < stream.Length; i++) sb.AppendFormat("{0:x2}", stream[i]);
            return sb.ToString();
        }
        private string buscarDescripcion(String[] lista, string id)
        {

            int n = lista.Length;
            string[] campos;
            string descripcion = "";
            for (int i = 0; i < n; i++)
            {
                campos = lista[i].Split('¦');
                if (campos[0].Equals(id))
                {
                    descripcion = campos[1];
                    break;
                }
            }
            return descripcion;

        }
        private async Task<string> obtenerProductosSITEDS(SitedsConAse270RequestBE oSitedsConAse270RequestBE)
        {
            if (String.IsNullOrEmpty(oSitedsConAse270RequestBE.CoEspecialidad)) oSitedsConAse270RequestBE.CoEspecialidad = "";
            string rptaWS = "";
            try
            {
                //Siteds oSiteds = new Siteds();
                if (oSitedsConAse270RequestBE.NuDocumento != "")
                {
                    //response.Data = oSiteds.ConsultarAsegNombre(obeSitedsConAse270Request);
                    try
                    {
                        CookieContainer cookies = new CookieContainer();
                        HttpClientHandler handler = new HttpClientHandler();
                        handler.CookieContainer = cookies;
                        handler.UseCookies = true;
                        using (var client = new HttpClient(handler))
                        {
                            var pairs = new List<KeyValuePair<string, string>>
                        {
                            new KeyValuePair<string, string>("CodTipoDocumentoAfiliado", oSitedsConAse270RequestBE.TiDocumento),
                            new KeyValuePair<string, string>("NumeroDocumentoAfiliado", oSitedsConAse270RequestBE.NuDocumento),
                            new KeyValuePair<string, string>("RUC", oSitedsConAse270RequestBE.NuRucRemitente),
                            new KeyValuePair<string, string>("SUNASA", oSitedsConAse270RequestBE.IdRemitente),
                            new KeyValuePair<string, string>("IAFAS", oSitedsConAse270RequestBE.IdReceptor),
                            new KeyValuePair<string, string>("NombresAfiliado", oSitedsConAse270RequestBE.NoPaciente),
                            new KeyValuePair<string, string>("ApellidoPaternoAfiliado", oSitedsConAse270RequestBE.ApPaternoPaciente),
                            new KeyValuePair<string, string>("ApellidoMaternoAfiliado", oSitedsConAse270RequestBE.ApMaternoPaciente),
                            new KeyValuePair<string, string>("CodEspecialidad", oSitedsConAse270RequestBE.CoEspecialidad)

                        };
                            var content = new FormUrlEncodedContent(pairs);
                            string pathURL = ConfigurationManager.AppSettings["WS_SITED"].ToString() + "Sistema/";
                            string url = pathURL + "ConsultaAsegNom";
                            HttpClient cliente = new HttpClient(handler);
                            HttpResponseMessage rpta = null;
                            try
                            {
                                rpta = await cliente.PostAsync(url, content);
                            }
                            catch (Exception e)
                            {

                            }
                            if (rpta != null && rpta.StatusCode == HttpStatusCode.OK)
                            {
                                string listaAsegurado = await rpta.Content.ReadAsStringAsync();
                                List<ConsultaAsegNomResponseBE> lbeConAseNomResponse = new JavaScriptSerializer().Deserialize<List<ConsultaAsegNomResponseBE>>(listaAsegurado);

                                List<string> sbLista = new List<string>();
                                List<string> sbRegistro = null;

                                foreach (var item in lbeConAseNomResponse)
                                {
                                    sbRegistro = new List<string>();
                                    sbRegistro.Add(item.CodProducto);
                                    sbRegistro.Add(item.ApellidoPaternoAfiliado);
                                    sbRegistro.Add(item.ApellidoMaternoAfiliado);
                                    sbRegistro.Add(item.NombresAfiliado);
                                    sbRegistro.Add(item.CodParentesco);
                                    sbRegistro.Add(item.NombreContratante);
                                    sbRegistro.Add(item.CodEstado);
                                    sbRegistro.Add(item.CodEstadoCivil);
                                    sbRegistro.Add(item.CodigoAfiliado);
                                    sbRegistro.Add(item.CodTipoDocumentoAfiliado);
                                    sbRegistro.Add(item.NumeroDocumentoAfiliado);
                                    sbRegistro.Add(item.NumeroPlan);
                                    sbRegistro.Add(item.NumeroSCTR);
                                    sbRegistro.Add(item.NumeroContratoAfiliado);
                                    sbRegistro.Add(item.NumeroDocumentoContratante);
                                    sbRegistro.Add("");
                                    sbRegistro.Add(item.NombreContratante);
                                    sbRegistro.Add(item.TipoCalificadorContratante);
                                    sbRegistro.Add(item.CodTipoDocumentoContratante);
                                    sbRegistro.Add("");

                                    sbLista.Add(String.Join("¦", sbRegistro.ToArray()));
                                }

                                rptaWS = String.Join("¬", sbLista.ToArray());

                            }
                        }

                    }
                    catch (Exception ex)
                    {

                    }

                }
            }
            catch (Exception ex)
            {


            }
            //System.Threading.Thread.Sleep(6000);
            return rptaWS;
        }
        private Dictionary<string, string> DatosCitaVirtualDct(DatosCitaVirtualBE oDatosCitaVirtualBE)
        {
            Dictionary<string, string> varResultado = new Dictionary<string, string>();
            varResultado.Add("Email", oDatosCitaVirtualBE.Email);
            varResultado.Add("NombrePaciente", oDatosCitaVirtualBE.NombrePaciente);
            varResultado.Add("ApellidoPaternoPaciente", oDatosCitaVirtualBE.ApellidoPaternoPaciente);
            varResultado.Add("ApellidoMaternoPaciente", oDatosCitaVirtualBE.ApellidoMaternoPaciente);
            varResultado.Add("FechaNacimiento", oDatosCitaVirtualBE.FechaNacimiento);
            varResultado.Add("EdadPaciente", oDatosCitaVirtualBE.EdadPaciente);
            varResultado.Add("Sexo", oDatosCitaVirtualBE.Sexo);
            varResultado.Add("CelularPaciente", oDatosCitaVirtualBE.CelularPaciente);
            varResultado.Add("NombreMedico", oDatosCitaVirtualBE.NombreMedico);
            varResultado.Add("FechaAtencion", oDatosCitaVirtualBE.FechaAtencion);
            varResultado.Add("HoraInicio", oDatosCitaVirtualBE.HoraInicio);
            varResultado.Add("Especialidad", oDatosCitaVirtualBE.Especialidad);
            varResultado.Add("Clinica", oDatosCitaVirtualBE.Clinica);
            varResultado.Add("EmailMedico", oDatosCitaVirtualBE.EmailMedico);
            varResultado.Add("Seguro", oDatosCitaVirtualBE.Seguro);
            varResultado.Add("Direccion", oDatosCitaVirtualBE.Direccion);
            varResultado.Add("EmailPago", oDatosCitaVirtualBE.EmailPago);
            varResultado.Add("IDClinica", oDatosCitaVirtualBE.IDClinica);
            return varResultado;
        }
        private Dictionary<string, string> DatosCitaDct(DatosCitaBE oDatosCitaBE)
        {
            Dictionary<string, string> varResultado = new Dictionary<string, string>();
            varResultado.Add("Email", oDatosCitaBE.Email);
            varResultado.Add("TipoDocumento", oDatosCitaBE.TipoDocumento);
            varResultado.Add("NumeroDocumento", oDatosCitaBE.NumeroDocumento);
            varResultado.Add("NombrePaciente", oDatosCitaBE.NombrePaciente);
            varResultado.Add("ApellidoPaternoPaciente", oDatosCitaBE.ApellidoPaternoPaciente);
            varResultado.Add("ApellidoMaternoPaciente", oDatosCitaBE.ApellidoMaternoPaciente);
            varResultado.Add("FechaNacimiento", oDatosCitaBE.FechaNacimiento);
            varResultado.Add("EdadPaciente", oDatosCitaBE.EdadPaciente);
            varResultado.Add("Sexo", oDatosCitaBE.Sexo);
            varResultado.Add("CelularPaciente", oDatosCitaBE.CelularPaciente);
            varResultado.Add("NombreMedico", oDatosCitaBE.NombreMedico);
            varResultado.Add("FechaAtencion", oDatosCitaBE.FechaAtencion);
            varResultado.Add("FechaAtencionAux", oDatosCitaBE.FechaAtencionAux);
            varResultado.Add("HoraInicio", oDatosCitaBE.HoraInicio);
            varResultado.Add("Especialidad", oDatosCitaBE.Especialidad);
            varResultado.Add("Clinica", oDatosCitaBE.Clinica);
            varResultado.Add("Seguro", oDatosCitaBE.Seguro);
            varResultado.Add("CodigoSunasa", oDatosCitaBE.CodigoSunasa);
            varResultado.Add("RUCSpring", oDatosCitaBE.RUCSpring);
            varResultado.Add("EmailPago", oDatosCitaBE.EmailPago);
            varResultado.Add("IDClinica", oDatosCitaBE.IDClinica);
            varResultado.Add("EsAdicional", oDatosCitaBE.EsAdicional);
            varResultado.Add("HoraInicioHorario", oDatosCitaBE.HoraInicioHorario);
            varResultado.Add("HoraFinHorario", oDatosCitaBE.HoraFinHorario);
            return varResultado;
        }
        private beOrigenResponse fnValidarOrigen(string origen, string abreviatura = "")
        {
            throw new WebFaultException(HttpStatusCode.BadRequest);
            //origen = origen != null ? origen : "";
            //beOrigenResponse obeOrigen = new beOrigenResponse();
            //SqlDA oDataSQL = new SqlDA();
            //String parametros = origen + "¦" + abreviatura;
            //String response = oDataSQL.EjecutarComando("uspMantCanales_Validar", "@lstParametros", parametros);
            //String[] aResponse = response.Split('¯');
            //obeOrigen.IndValido = aResponse[0].Equals("1");
            //if (!obeOrigen.IndValido)
            //{
            //    //No existe el origen enviado
            //    //String[] lOrigen = !String.IsNullOrEmpty(aResponse[1]) ? aResponse[1].Split('¬') : new String[0];
            //    //int i = 0, nRegistros = lOrigen.Length;
            //    //String mensaje = "Sólo se soportan los valores ";
            //    String mensaje = "El parámetro origen es inválido";
            //    //String[] aOrigen;
            //    //for (; i < nRegistros; i++)
            //    //{
            //    //    aOrigen = lOrigen[i].Split('¦');
            //    //    if (i == 0)
            //    //    {
            //    //        mensaje = "\"" + aOrigen[0] + "\"";
            //    //    }
            //    //    else
            //    //    {
            //    //        if (i == nRegistros - 1)
            //    //        {
            //    //            if (aOrigen[0].StartsWith("i"))
            //    //            {
            //    //                mensaje += " e ";
            //    //            }
            //    //            else
            //    //            {
            //    //                mensaje += " y ";
            //    //            }
            //    //        }
            //    //        else
            //    //        {
            //    //            mensaje += ", ";
            //    //        }
            //    //        mensaje += "\"" + aOrigen[0] + "\"";
            //    //    }
            //    //}
            //    //mensaje += " en el parámetro origen";
            //    //if (nRegistros == 0)
            //    //{
            //    //    mensaje = "";
            //    //}
            //    obeOrigen.Mensaje = mensaje;
            //}
            //return obeOrigen;
        }
        private RespuestaSimpleBE CrearCalendarioCita(string nombreArchivo, string fechaCreacion, string asunto, string fechaInicio, string fechaFin, string descripcion = "")
        {
            int status = 0;
            string mensaje = "";
            string data = "";
            if (string.IsNullOrEmpty(nombreArchivo))
            {
                status = 1;
                mensaje = "nombreArchivo valor vacio";
            }
            if (string.IsNullOrEmpty(fechaCreacion))
            {
                status = 1;
                mensaje = "fechaCreacion valor vacio";
            }
            if (string.IsNullOrEmpty(asunto))
            {
                status = 1;
                mensaje = "asunto valor vacio";
            }
            if (string.IsNullOrEmpty(fechaInicio))
            {
                status = 1;
                mensaje = "fechaInicio valor vacio";
            }
            if (string.IsNullOrEmpty(fechaFin))
            {
                status = 1;
                mensaje = "fechaFin valor vacio";
            }
            if (string.IsNullOrEmpty(descripcion))
            {
                descripcion = "";
            }

            try
            {
                if (status == 0)
                {

                    StringBuilder sb = new StringBuilder();
                    sb.AppendLine("BEGIN:VCALENDAR");
                    sb.AppendLine("VERSION:2.0");
                    sb.AppendLine("CALSCALE:GREGORIAN");
                    sb.AppendLine("BEGIN:VEVENT");
                    sb.AppendLine("DTSTAMP:" + fechaCreacion);
                    sb.AppendLine("SUMMARY:" + asunto);
                    sb.AppendLine("DTSTART;TZID=America/Lima:" + fechaInicio);
                    sb.AppendLine("DTEND;TZID=America/Lima:" + fechaFin);
                    sb.AppendLine("LOCATION:Peru");
                    sb.AppendLine("DESCRIPTION:" + descripcion);
                    sb.AppendLine("STATUS:CONFIRMED");
                    sb.AppendLine("SEQUENCE:3");
                    sb.AppendLine("BEGIN:VALARM");
                    sb.AppendLine("TRIGGER:-PT1D");
                    sb.AppendLine("DESCRIPTION:" + asunto);
                    sb.AppendLine("ACTION:DISPLAY");
                    sb.AppendLine("END:VALARM");
                    sb.AppendLine("END:VEVENT");
                    sb.AppendLine("END:VCALENDAR");

                    string ruta = ConfigurationManager.AppSettings["rutaAgenda"];
                    if (!Directory.Exists(ruta))
                    {
                        Directory.CreateDirectory(ruta);
                    }
                    string archivo = Path.Combine(ruta, nombreArchivo + ".ics");

                    if (File.Exists(archivo))
                    {
                        File.Delete(archivo);
                    }

                    File.WriteAllText(archivo, sb.ToString());

                    status = 0;
                    mensaje = "";
                    data = nombreArchivo + ".ics";

                }


            }


            catch (Exception ex)
            {
                ClasesGenericas.RegistrarErrorIntranet(ex, "WS", "Cita.svc/CrearCalendarioCita");
            }
            return new RespuestaSimpleBE()
            {
                rpt = status,
                mensaje = mensaje,
                data = data
            };

        }
        private void fnRegistrarCitaLog(string idCita, string observacion, string request = "",
            string response = "", string modulo = "Pago", string accion = "Intermedias",
            string procedimiento = "ServicioWeb", string tipoCita = "P")
        {
            throw new WebFaultException(HttpStatusCode.BadRequest);
            //String[] aParametro = new String[8];
            //aParametro[0] = idCita;
            //aParametro[1] = observacion;
            //aParametro[2] = request;
            //aParametro[3] = response;
            //aParametro[4] = modulo;
            //aParametro[5] = accion;
            //aParametro[6] = procedimiento;
            //aParametro[7] = tipoCita;
            //SqlDA oDataSQL = new SqlDA();
            //String responseBD = oDataSQL.EjecutarComando("uspCitaLog_Grabar", "@lstParametros", String.Join("¦", aParametro));
        }
        private string fnObtenerToken(string email, string password, string metodoHttp)
        {
            throw new WebFaultException(HttpStatusCode.BadRequest);
            //string token = "";
            //String urlBase = ConfigurationManager.AppSettings["WS_DoctorMas"].ToString();
            //String urlMetodo = "", strRequest = "", strResponse = "", strMensajeError = "";
            //bool indErrorServicio = true;
            //try
            //{
            //    using (var client = new HttpClient())
            //    {
            //        client.BaseAddress = new Uri(urlBase);
            //        //HTTP POST
            //        urlMetodo = "authenticate/userapp/login";
            //        DMSolicitudTokenBE oDMSolicitudTokenBE = new DMSolicitudTokenBE();
            //        oDMSolicitudTokenBE.email = email;
            //        oDMSolicitudTokenBE.password = password;
            //        strRequest = JsonConvert.SerializeObject(oDMSolicitudTokenBE).ToString();
            //        var content = new StringContent(strRequest, Encoding.UTF8, "application/json");
            //        var responseWS = client.PostAsync(urlMetodo, content);
            //        responseWS.Wait();

            //        var responseLogin = responseWS.Result;

            //        if (responseLogin.IsSuccessStatusCode)
            //        {
            //            var response = responseLogin.Content.ReadAsStringAsync();
            //            response.Wait();
            //            strResponse = response.Result;
            //            DMResponseSimpleBE oResponse = JsonConvert.DeserializeObject<DMResponseSimpleBE>(strResponse);
            //            if (oResponse != null)
            //            {
            //                strMensajeError = oResponse.message;
            //                if (oResponse.success)
            //                {
            //                    token = oResponse.data;
            //                    indErrorServicio = false;
            //                }
            //            }
            //        }
            //        if (indErrorServicio)
            //        {
            //            new ErrorDA().GrabarLog("Error: " + urlMetodo, "WS", "Cita.svc/" + metodoHttp, strResponse, strRequest);
            //        }
            //    }
            //}
            //catch (Exception)
            //{
            //    throw;
            //}
            //return token;
        }
        private bool enviarCorreoCitaPresencial(string idCita, string origen, string archivoConsentimiento = "", string nombreArchivoConsentimiento = "")
        {

            bool exito = false,
                 indGenerarLinkPago = false,
                 indExisteBanner = false;

            string asunto = ConfigurationManager.AppSettings["Cita_RegistrarCita_Titulo"].ToString();
            string rutaPlantilla = ConfigurationManager.AppSettings["Cita_RegistrarCita_Cuerpo"].ToString();
            string archivo = Path.Combine(rutaPlantilla, "EmailPresencial.txt");
            if (File.Exists(archivo))
            {
                string contenido = File.ReadAllText(archivo);

                //Dictionary<string, string> parametroCorreo = new CitaDA().ObtenerParametrosCorreoCitaPresencial(idCita);
                var oRequest = new
                {
                    idCita = idCita,
                    origen = origen,
                    archivoConsentimiento = archivoConsentimiento,
                    nombreArchivoConsentimiento = nombreArchivoConsentimiento
                };
                string strRequest = new JavaScriptSerializer().Serialize(oRequest);
                string response = ClasesGenericas.PostAsyncIntranet("Cita.svc/enviarCorreoCitaPresencial/", strRequest, ClasesGenericas.GetHeader(WebOperationContext.Current.IncomingRequest.Headers, "token"));
                RespuestaBE<ParametroCorreoCitaPresencialBE> varRespuesta = new JavaScriptSerializer().Deserialize<RespuestaBE<ParametroCorreoCitaPresencialBE>>(response);

                if (varRespuesta.rpt == 0)
                {
                    ParametroCorreoCitaPresencialBE parametroCorreo = varRespuesta.data;
                    string sedeDireccionReferencia = parametroCorreo.Clinica;
                    if (!string.IsNullOrEmpty(parametroCorreo.DireccionCorta))
                    {
                        sedeDireccionReferencia += " - " + parametroCorreo.DireccionCorta;
                        if (!string.IsNullOrEmpty(parametroCorreo.Referencia))
                        {
                            sedeDireccionReferencia += " (" + parametroCorreo.Referencia + ")";
                        }
                    }
                    else if (!string.IsNullOrEmpty(parametroCorreo.Referencia))
                    {
                        sedeDireccionReferencia += " (" + parametroCorreo.Referencia + ")";
                    }

                    _idClinica = parametroCorreo.IDClinica;
                    string horaInicio = parametroCorreo.HoraInicio;
                    if (parametroCorreo.EsAdicional.Equals("1"))
                    {
                        horaInicio = "ADICIONAL DE " + parametroCorreo.HoraInicioHorario + " - " + parametroCorreo.HoraFinHorario;
                    }

                    contenido = contenido.Replace("{NombrePaciente}", parametroCorreo.NombrePaciente);
                    contenido = contenido.Replace("{Clinica}", parametroCorreo.Clinica.ToUpper());
                    contenido = contenido.Replace("{NombreMedico}", parametroCorreo.NombreMedico);
                    contenido = contenido.Replace("{Especialidad}", parametroCorreo.Especialidad);
                    contenido = contenido.Replace("{FechaAtencion}", parametroCorreo.FechaAtencion);
                    contenido = contenido.Replace("{HoraInicio}", horaInicio);//parametroCorreo.HoraInicio);
                    contenido = contenido.Replace("{NombrePaciente}", parametroCorreo.NombrePaciente);
                    contenido = contenido.Replace("{ApellidoPaternoPaciente}", parametroCorreo.ApellidoPaternoPaciente);
                    contenido = contenido.Replace("{ApellidoMaternoPaciente}", parametroCorreo.ApellidoMaternoPaciente);
                    contenido = contenido.Replace("{CelularPaciente}", parametroCorreo.CelularPaciente);
                    contenido = contenido.Replace("{Consultorio}", parametroCorreo.Consultorio + " " + parametroCorreo.Ubicacion);
                    contenido = contenido.Replace("{Sede}", sedeDireccionReferencia);

                    indExisteBanner = !string.IsNullOrEmpty(parametroCorreo.URLBanner);
                    contenido = contenido.Replace("@ContenedorBanner@", indExisteBanner ? "" : "style='display:none;'");
                    contenido = contenido.Replace("{URLBanner}", indExisteBanner ? parametroCorreo.URLBanner : "");

                    indExisteBanner = !string.IsNullOrEmpty(parametroCorreo.URLBanner);
                    contenido = contenido.Replace("@ContenedorBanner@", indExisteBanner ? "" : "style='display:none;'");
                    contenido = contenido.Replace("{URLBanner}", indExisteBanner ? parametroCorreo.URLBanner : "");

                    indExisteBanner = !string.IsNullOrEmpty(parametroCorreo.URLBanner);
                    contenido = contenido.Replace("@ContenedorBanner@", indExisteBanner ? "" : "style='display:none;'");
                    contenido = contenido.Replace("{URLBanner}", indExisteBanner ? parametroCorreo.URLBanner : "");

                    indExisteBanner = !string.IsNullOrEmpty(parametroCorreo.URLBanner);
                    contenido = contenido.Replace("@ContenedorBanner@", indExisteBanner ? "" : "style='display:none;'");
                    contenido = contenido.Replace("{URLBanner}", indExisteBanner ? parametroCorreo.URLBanner : "");

                    //Inicio Creacion LinkPago
                    //RespuestaBE<DatosPagoBE> datosPago = ObtenerDatosPago(idCita, "", origen, "");

                    //if (datosPago.data != null && datosPago.data.monto != "0.00")
                    //{
                    //    indGenerarLinkPago = parametroCorreo.EsPrePago.Equals("1") && parametroCorreo.IndicadorBotonPagar.Equals("1");
                    //    if (indGenerarLinkPago)
                    //    {
                    //        //new ErrorDA().GrabarLog("2. " + idCita, "WS", "Cita.svc/enviarCorreoCitaPresencial", "", "");
                    //        string tmp = "";
                    //        string datos = idCita + "¦PER¦PEN¦" + datosPago.data.monto + "¦" + parametroCorreo.NombrePaciente + "¦" + parametroCorreo.ApellidoPaternoPaciente + " " + parametroCorreo.ApellidoMaternoPaciente + "¦" + parametroCorreo.NumeroDocumentoPaciente + "¦" + parametroCorreo.Email + "¦DNI¦" + parametroCorreo.CelularPaciente + "¦" + parametroCorreo.IDClinica;
                    //        string cadenaAtendido = "Consulta médica" + "¦¦¦" + datosPago.data.monto;
                    //        string dataSynap = tmp + "¯" + datos + "¯" + cadenaAtendido + "¯" + idCita + "¦¦0";

                    //        string linkPago = GenerarOrdenSynap(dataSynap, idCita);

                    //        indGenerarLinkPago = !String.IsNullOrEmpty(linkPago);//Si no hay link de pago entonces ocultar sección de link de pago

                    //        contenido = contenido.Replace("{LinkPago}", linkPago);
                    //    }
                    //}
                    //Fin Creacion LinkPago

                    //[Inicio] - Calendario
                    string asuntoCalendario = "Cita Médica " + parametroCorreo.Clinica + ", Especialidad " + parametroCorreo.Especialidad + ", con el Médico " + parametroCorreo.NombreMedico;

                    string fechaCreacion = DateTime.Now.ToString("yyyyMMddTHHmmss") + "Z";
                    string[] afa = parametroCorreo.FechaAtencion.Split('/');
                    string[] aha = parametroCorreo.HoraInicio.Split(':');
                    DateTime fa = new DateTime(int.Parse(afa[2]), int.Parse(afa[1]), int.Parse(afa[0]), int.Parse(aha[0]), int.Parse(aha[1]), 0);
                    string fechaInicio = fa.ToString("yyyyMMddTHHmmss");
                    DateTime ff = fa.AddMinutes(double.Parse(parametroCorreo.TiempoAtencion));
                    string fechaFin = ff.ToString("yyyyMMddTHHmmss");

                    string nombreArchivo = "Cita_" + parametroCorreo.IDCita;

                    RespuestaSimpleBE oRespuestaSimpleBE = CrearCalendarioCita(nombreArchivo, fechaCreacion, asuntoCalendario, fechaInicio, fechaFin, "");

                    string linkCalendario = "";
                    if (oRespuestaSimpleBE.rpt == 0)
                    {
                        if (!String.IsNullOrEmpty(oRespuestaSimpleBE.data))
                        {
                            string ruta = ConfigurationManager.AppSettings["rutaPublicaCitaAgenda"];
                            linkCalendario = ruta + oRespuestaSimpleBE.data;
                        }
                    }
                    contenido = contenido.Replace("{LinkCalendario}", linkCalendario);
                    //[Fin] - Calendario

                    contenido = contenido.Replace("@ContenedorLinkPago@", indGenerarLinkPago ? "" : "style='display:none;'");

                    //[Inicio] - Envar correo SANNA
                    if (!String.IsNullOrEmpty(archivoConsentimiento) && !String.IsNullOrEmpty(nombreArchivoConsentimiento))
                    {
                        exito = ClasesGenericas.EnviarCorreoPlantillaHTML(parametroCorreo.Email, asunto, contenido, null, "SMTP", "", ';', "", ';', archivoConsentimiento, nombreArchivoConsentimiento);
                    }
                    else
                    {
                        exito = ClasesGenericas.EnviarCorreoPlantillaHTML(parametroCorreo.Email, asunto, contenido, null, "SMTP", "", ';', "", ';', "", "");
                    }
                    //[Fin] - Envar correo SANNA
                }

            }
            return exito;
        }
        private string generarCaracterAzar(int tipo, int cantidad)
        {
            string codigo = "";
            string[] caracteres = new string[] { "0","1","2","3","4","5","6","7","8","9",
                "A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S",
                "T","U","V","W","X","Y","Z" };

            int inicio = 0;
            int fin = 0;

            if (tipo == 1)
            {

                inicio = 0;
                fin = 10;
            }
            else if (tipo == 2)
            {
                inicio = 10;
                fin = caracteres.Length;
            }
            else
            {
                inicio = 0;
                fin = caracteres.Length;
            }
            Random oAzar = new Random();

            for (int i = 0; i < cantidad; i++)
            {
                codigo += caracteres[oAzar.Next(inicio, fin)];
            }

            return codigo;
        }
        private List<OpcionPagoBE> fnObtenerOpcionesPago(string tipoDocumento, string numeroDocumento, string idCitaPresencial, string idCitaVirtual, string codIAFA)
        {
            string rutaArchivo = ConfigurationManager.AppSettings["_LogPath"];
            string nombreArchivo = "NET_TiempoSitedsIAFA.txt";
            DateTime oFechaActual = DateTime.Now;
            Stopwatch oStopwatch = new Stopwatch();
            oStopwatch.Start();
            List<OpcionPagoBE> lOpcionPagoBE = new List<OpcionPagoBE>();

            List<ConsultAsegNomResponse> listResponseOne = new List<ConsultAsegNomResponse>();
            List<ConsultAsegNomResponse> listResponseOneFiltro = new List<ConsultAsegNomResponse>();

            ConsultAsegNomResponse responseOne = new ConsultAsegNomResponse();
            ConsultAsegCodResponse responseTwo = new ConsultAsegCodResponse();

            List<Cobertura> lbeCobertura = new List<Cobertura>();
            RespuestaRoyal estados = new RespuestaRoyal();

            string urlBase = "", urlMetodo = "";
            string nombres = "MAGALY SARA", apellidoPaterno = "HERRERA", apellidoMaterno = "POMAR";
            bool indDNI = tipoDocumento.Equals("1"), indVolverLlamar = false;
            using (HttpClient oHttpClient = new HttpClient())
            {
                urlBase = ConfigurationManager.AppSettings["WS_SITED"].ToString();
                oHttpClient.BaseAddress = new Uri(urlBase);
                ConsultAsegNom rqst = new ConsultAsegNom();
                rqst.CodTipoDocumentoAfiliado = tipoDocumento;
                rqst.NumeroDocumentoAfiliado = numeroDocumento;
                rqst.RUC = "20100162742";
                rqst.SUNASA = "00009116";
                rqst.IAFAS = codIAFA;
                rqst.NombresAfiliado = "";
                rqst.ApellidoPaternoAfiliado = "";
                rqst.ApellidoMaternoAfiliado = "";
                rqst.CodEspecialidad = "";
                StringContent content = new StringContent(JsonConvert.SerializeObject(rqst), Encoding.UTF8, "application/json");
                urlMetodo = "Sistema/ConsultaAsegNom";
                var responseTaskOne = oHttpClient.PostAsync(urlMetodo, content);
                responseTaskOne.Wait();

                var resultOne = responseTaskOne.Result;
                string rptaTaskOne = "";
                if (resultOne.IsSuccessStatusCode)
                {
                    var readTaskOne = resultOne.Content.ReadAsStringAsync();
                    readTaskOne.Wait();
                    if (readTaskOne.Result.Length > 2 && readTaskOne.Result != "[]")
                    {
                        rptaTaskOne = readTaskOne.Result;
                        listResponseOne = JsonConvert.DeserializeObject<List<ConsultAsegNomResponse>>(rptaTaskOne);
                        int nRegistros = listResponseOne.Count;
                        if (nRegistros >= 25 && codIAFA.Equals("20001"))
                        {
                            indVolverLlamar = true;
                        }

                        if (!indVolverLlamar)
                        {
                            //listResponseOne = listResponseOne.Where(x => x.CodProducto == preDatos.codProducto).ToList();
                            int nRegistrosVigentes = listResponseOne.Where(x => (x.DesEstado == "VIGENTE" || x.DesEstado == "LATENTE")).ToList().Count;
                            if (nRegistrosVigentes > 0)
                            {
                                if (nRegistrosVigentes == 1)
                                {
                                    estados.vigente = true;
                                    responseOne = listResponseOne.FirstOrDefault(x => (x.DesEstado == "VIGENTE" || x.DesEstado == "LATENTE"));
                                }
                                else
                                {
                                    responseOne = listResponseOne.FirstOrDefault(x => (x.DesEstado == "VIGENTE" || x.DesEstado == "LATENTE") && x.NumeroDocumentoAfiliado == numeroDocumento);
                                    if (responseOne == null)
                                    {
                                        responseOne = listResponseOne.FirstOrDefault(
                                            x => (x.DesEstado == "VIGENTE" || x.DesEstado == "LATENTE") &&
                                            x.NombresAfiliado == nombres &&
                                            x.ApellidoPaternoAfiliado == apellidoPaterno &&
                                            x.ApellidoMaternoAfiliado == apellidoMaterno
                                        );
                                    }
                                    if (responseOne != null)
                                    {
                                        estados.vigente = true;
                                    }
                                    //else
                                    //{
                                    //    fnRegistrarCitaLog(idCita, "No hay productos en estado Vigente en SITEDS", JsonConvert.SerializeObject(rqst).ToString(), rptaTaskOne);
                                    //}
                                }
                            }
                            else
                            {
                                estados.vigente = false;
                                //fnRegistrarCitaLog(idCita, "No hay productos en estado Vigente en SITEDS", JsonConvert.SerializeObject(rqst).ToString(), rptaTaskOne);
                            }
                        }
                    }
                }
                if (indVolverLlamar)
                {
                    //fnRegistrarCitaLog(idCita, "", "05 - Inicio de Consulta de productos (Segundo intento)", "");
                    //WS 1
                    //client.BaseAddress = new Uri(ConfigurationManager.AppSettings["WS_SITED"].ToString());
                    //HTTP POST
                    rqst = new ConsultAsegNom();
                    rqst.CodTipoDocumentoAfiliado = "";
                    rqst.NumeroDocumentoAfiliado = "";
                    rqst.RUC = "20100162742";//preDatos.rucClinica;
                    rqst.SUNASA = "00009116";//preDatos.codigoSunasa;
                    rqst.IAFAS = codIAFA;
                    rqst.NombresAfiliado = nombres;
                    rqst.ApellidoPaternoAfiliado = apellidoPaterno;
                    rqst.ApellidoMaternoAfiliado = apellidoMaterno;
                    rqst.CodEspecialidad = codIAFA.Equals("30004") ? "028" : "";
                    Debug.WriteLine("Request");
                    Debug.WriteLine(JsonConvert.SerializeObject(rqst).ToString());
                    content = new StringContent(JsonConvert.SerializeObject(rqst).ToString(), Encoding.UTF8, "application/json");
                    urlMetodo = "Sistema/ConsultaAsegNom";
                    //fnRegistrarCitaLog(idCita, "", "06 - Request de Consulta de productos (Segundo intento)", JsonConvert.SerializeObject(rqst).ToString(), urlBase + urlMetodo);
                    responseTaskOne = oHttpClient.PostAsync(urlMetodo, content);
                    responseTaskOne.Wait();

                    resultOne = responseTaskOne.Result;

                    estados.vigente = false;
                    if (resultOne.IsSuccessStatusCode)
                    {
                        estados.wsConsultaAsegNom = true;
                        var readTaskOne = resultOne.Content.ReadAsStringAsync();
                        readTaskOne.Wait();
                        if (readTaskOne.Result.Length > 2 && readTaskOne.Result != "[]")
                        {
                            Debug.WriteLine("Response");
                            Debug.WriteLine(readTaskOne.Result);
                            rptaTaskOne = readTaskOne.Result;
                            //fnRegistrarCitaLog(idCita, "", "07 - Response de Consulta de productos (Segundo intento)", rptaTaskOne, urlBase + urlMetodo);
                            listResponseOne = JsonConvert.DeserializeObject<List<ConsultAsegNomResponse>>(rptaTaskOne);
                            int nRegistros = listResponseOne.Count;
                            //if (nRegistros == 0)
                            //{
                            //    fnRegistrarCitaLog(idCita, "No se obtiene datos de productos de SITEDS", JsonConvert.SerializeObject(rqst).ToString(), rptaTaskOne);
                            //}
                            //listResponseOne = listResponseOne.Where(x => x.CodProducto == preDatos.codProducto).ToList();
                            int nRegistrosVigentes = listResponseOne.Where(x => (x.DesEstado == "VIGENTE" || x.DesEstado == "LATENTE")).ToList().Count;
                            if (nRegistrosVigentes > 0)
                            {
                                if (nRegistrosVigentes == 1)
                                {
                                    estados.vigente = true;
                                    responseOne = listResponseOne.FirstOrDefault(x => (x.DesEstado == "VIGENTE" || x.DesEstado == "LATENTE"));
                                }
                                else
                                {
                                    responseOne = listResponseOne.FirstOrDefault(x => (x.DesEstado == "VIGENTE" || x.DesEstado == "LATENTE") && x.NumeroDocumentoAfiliado == numeroDocumento);
                                    if (responseOne == null)
                                    {
                                        responseOne = listResponseOne.FirstOrDefault(
                                            x => (x.DesEstado == "VIGENTE" || x.DesEstado == "LATENTE") &&
                                            x.NombresAfiliado == nombres &&
                                            x.ApellidoPaternoAfiliado == apellidoPaterno &&
                                            x.ApellidoMaternoAfiliado == apellidoMaterno
                                        );
                                    }
                                    if (responseOne != null)
                                    {
                                        estados.vigente = true;
                                    }
                                    //else
                                    //{
                                    //    fnRegistrarCitaLog(idCita, "No hay productos en estado Vigente en SITEDS", JsonConvert.SerializeObject(rqst).ToString(), rptaTaskOne);
                                    //}
                                }
                            }
                            else
                            {
                                estados.vigente = false;
                                //fnRegistrarCitaLog(idCita, "No hay productos en estado Vigente en SITEDS", JsonConvert.SerializeObject(rqst).ToString(), rptaTaskOne);
                            }
                        }
                    }
                    else //web api sent error response 
                    {
                        estados.wsConsultaAsegNom = false;
                        //fnRegistrarCitaLog(idCita, "No se obtiene datos de productos de SITEDS", JsonConvert.SerializeObject(rqst).ToString(), rptaTaskOne);
                    }
                }
                listResponseOneFiltro = listResponseOne.FindAll(x => (
                    (x.DesEstado == "VIGENTE" || x.DesEstado == "LATENTE")
                    &&
                    (
                        x.NumeroDocumentoAfiliado == numeroDocumento
                        ||
                        (
                            x.NombresAfiliado == nombres &&
                            x.ApellidoPaternoAfiliado == apellidoPaterno &&
                            x.ApellidoMaternoAfiliado == apellidoMaterno
                        )
                    )
                ));
                ConsultAsegCod rqstTwo = new ConsultAsegCod();
                foreach (ConsultAsegNomResponse responseOneTmp in listResponseOneFiltro)
                {
                    rqstTwo.SUNASA = "00009116";
                    rqstTwo.IAFAS = codIAFA;
                    rqstTwo.RUC = "20100162742";
                    rqstTwo.NombresAfiliado = responseOneTmp.NombresAfiliado;
                    rqstTwo.ApellidoPaternoAfiliado = responseOneTmp.ApellidoPaternoAfiliado;
                    rqstTwo.ApellidoMaternoAfiliado = responseOneTmp.ApellidoMaternoAfiliado;
                    rqstTwo.CodigoAfiliado = responseOneTmp.CodigoAfiliado;
                    rqstTwo.CodTipoDocumentoAfiliado = responseOneTmp.CodTipoDocumentoAfiliado;
                    rqstTwo.NumeroDocumentoAfiliado = responseOneTmp.NumeroDocumentoAfiliado;
                    rqstTwo.CodProducto = responseOneTmp.CodProducto;
                    rqstTwo.DesProducto = responseOneTmp.DesProducto;
                    rqstTwo.NumeroPlan = responseOneTmp.NumeroPlan;
                    rqstTwo.CodTipoDocumentoContratante = responseOneTmp.CodTipoDocumentoContratante;
                    rqstTwo.NumeroDocumentoContratante = responseOneTmp.NumeroDocumentoContratante;
                    rqstTwo.NombreContratante = responseOneTmp.NombreContratante;
                    rqstTwo.CodParentesco = responseOneTmp.CodParentesco;
                    rqstTwo.TipoCalificadorContratante = responseOneTmp.TipoCalificadorContratante;
                    rqstTwo.CodEspecialidad = codIAFA.Equals("30004") ? "028" : "";
                    var contentTwo = new StringContent(JsonConvert.SerializeObject(rqstTwo).ToString(), Encoding.UTF8, "application/json");
                    urlMetodo = "Sistema/ConsultaAsegCod";
                    var responseTaskTwo = oHttpClient.PostAsync(urlMetodo, contentTwo);
                    responseTaskTwo.Wait();
                    var resultTwo = responseTaskTwo.Result;
                    string rptaTaskTwo = "";
                    if (resultTwo.IsSuccessStatusCode)
                    {
                        estados.wsConsultaAsegCod = true;
                        var readTaskTwo = resultTwo.Content.ReadAsStringAsync();
                        readTaskTwo.Wait();
                        rptaTaskTwo = readTaskTwo.Result;
                        if (rptaTaskTwo.Length > 2 && rptaTaskTwo != "[]")
                        {
                            Console.WriteLine("rptaTaskTwo: {0}", rptaTaskTwo);
                            responseTwo = JsonConvert.DeserializeObject<ConsultAsegCodResponse>(rptaTaskTwo);
                        }
                    }
                }
            }
            oStopwatch.Stop();
            DateTime oFechaActual2 = DateTime.Now;
            using (FileStream stream = new FileStream(rutaArchivo + nombreArchivo, FileMode.Append, FileAccess.Write, FileShare.Write))
            {
                using (StreamWriter streamWriter = new StreamWriter(stream, Encoding.Default))
                {
                    streamWriter.WriteLine("Inicio: " + oFechaActual.ToString("dd/MM/yyyy HH:mm:ss.fff"));
                    if (!string.IsNullOrEmpty(idCitaPresencial))
                    {
                        streamWriter.Write("idCitaPresencial: ");
                        streamWriter.WriteLine(idCitaPresencial.ToString());
                    }
                    else
                    {
                        streamWriter.Write("idCitaVirtual: ");
                        streamWriter.WriteLine(idCitaVirtual);
                    }
                    streamWriter.Write("IAFA: ");
                    streamWriter.WriteLine(codIAFA);
                    streamWriter.Write("tiempo: ");
                    streamWriter.WriteLine(oStopwatch.ElapsedMilliseconds.ToString());
                    streamWriter.WriteLine("Fin: " + oFechaActual2.ToString("dd/MM/yyyy HH:mm:ss.fff"));
                    streamWriter.WriteLine(new string('_', 50));
                }
            }
            return lOpcionPagoBE;
        }
        private void GrabarLog(string titulo, string origen, string servicio, string mensajeLog = "", string request = "")
        {
            var oRequest = new
            {
                titulo = titulo,
                origen = origen,
                servicio = servicio,
                mensajeLog = mensajeLog,
                request = request
            };
            string strRequest = new JavaScriptSerializer().Serialize(oRequest);
            string response = ClasesGenericas.PostAsyncIntranet("Cita.svc/GrabarLog/", strRequest);
            RespuestaSimpleBE varRespuesta = new JavaScriptSerializer().Deserialize<RespuestaSimpleBE>(response);
        }
        private RespuestaSimpleBE RegistrarErrorIntranet(Exception ex, string origen, string servicio)
        {
            throw new WebFaultException(HttpStatusCode.BadRequest);
            //string mensajeError = ex.Message,
            //    detalleError = ex.StackTrace;
            //if (mensajeError.StartsWith("INFO:"))
            //{
            //    return new RespuestaSimpleBE()
            //    {
            //        rpt = 0,
            //        mensaje = mensajeError.Replace("INFO:", ""),
            //        data = null
            //    };
            //}
            //else if (mensajeError.StartsWith("ERRFU:"))
            //{
            //    return new RespuestaSimpleBE()
            //    {
            //        rpt = 1,
            //        mensaje = mensajeError.Replace("ERRFU:", ""),
            //        data = null
            //    };
            //}
            //else
            //{
            //    int varIDError = 0;
            //    ConexionUtil varConexion = new ConexionUtil();
            //    try
            //    {
            //        string request = "";
            //        try
            //        {
            //            request = OperationContext.Current.RequestContext.RequestMessage.ToString();
            //        }
            //        catch (Exception)
            //        {
            //        }
            //        Exception varErrorDetallado = ex;
            //        string mensaje = mensajeError;
            //        string stackTrace = ex.StackTrace;
            //        while (varErrorDetallado.InnerException != null)
            //        {
            //            mensaje = mensaje + "\r\n**\r\n" + varErrorDetallado.InnerException.Message;
            //            stackTrace = stackTrace + "\r\n**\r\n" + varErrorDetallado.InnerException.StackTrace;
            //            varErrorDetallado = varErrorDetallado.InnerException;
            //        }

            //        SqlParameter[] varParametros = new SqlParameter[5];
            //        varParametros[0] = new SqlParameter("@Mensaje", SqlDbType.VarChar);
            //        varParametros[0].Value = string.IsNullOrEmpty(ex.Message) ? "" : (mensaje.Substring(0, ex.Message.Length > 5000 ? 5000 : mensaje.Length));
            //        varParametros[1] = new SqlParameter("@Ubicacion", SqlDbType.VarChar);
            //        varParametros[1].Value = string.IsNullOrEmpty(ex.StackTrace) ? "" : (stackTrace.Substring(0, ex.StackTrace.Length > 5000 ? 5000 : stackTrace.Length));
            //        varParametros[2] = new SqlParameter("@Origen", SqlDbType.VarChar);
            //        varParametros[2].Value = origen;
            //        varParametros[3] = new SqlParameter("@Servicio", SqlDbType.VarChar);
            //        varParametros[3].Value = servicio;
            //        varParametros[4] = new SqlParameter("@Request", SqlDbType.VarChar);
            //        if (!string.IsNullOrEmpty(request)) varParametros[4].Value = request;
            //        else varParametros[4].Value = request;

            //        varIDError = int.Parse(varConexion.EjecutarProcedimiento("Gen_Proc_Error_Insertar", varParametros, TipoProcesamiento.Scalar, false).ToString());
            //    }
            //    catch (Exception)
            //    {
            //    }
            //    finally
            //    {
            //        varConexion.Desconectar();
            //    }
            //    return new RespuestaSimpleBE()
            //    {
            //        rpt = 999,
            //        mensaje = ex.Message,
            //        data = null
            //    };
            //}
        }

        private RespuestaBE<T> RegistrarErrorIntranet<T>(Exception ex, string origen, string servicio)
        {
            throw new WebFaultException(HttpStatusCode.BadRequest);
            //if (ex.Message.StartsWith("INFO:"))
            //{
            //    return new RespuestaBE<T>()
            //    {
            //        rpt = 0,
            //        mensaje = ex.Message.Replace("INFO:", ""),
            //        data = default(T)
            //    };
            //}
            //else if (ex.Message.StartsWith("ERRFU:"))
            //{
            //    return new RespuestaBE<T>()
            //    {
            //        rpt = 1,
            //        mensaje = ex.Message.Replace("ERRFU:", ""),
            //        data = default(T)
            //    };
            //}
            //else
            //{
            //    int varIDError = 0;
            //    ConexionUtil varConexion = new ConexionUtil();
            //    if (ex != null)
            //    {
            //        try
            //        {
            //            string request = "";
            //            try
            //            {
            //                request = OperationContext.Current.RequestContext.RequestMessage.ToString();
            //            }
            //            catch (Exception)
            //            {
            //            }

            //            SqlParameter[] varParametros = new SqlParameter[5];
            //            varParametros[0] = new SqlParameter("@Mensaje", SqlDbType.VarChar);
            //            varParametros[0].Value = string.IsNullOrEmpty(ex.Message) ? "" : (ex.Message).Substring(0, ex.Message.Length > 5000 ? 5000 : ex.Message.Length);
            //            varParametros[1] = new SqlParameter("@Ubicacion", SqlDbType.VarChar);
            //            varParametros[1].Value = string.IsNullOrEmpty(ex.StackTrace) ? "" : ex.StackTrace.Substring(0, ex.StackTrace.Length > 5000 ? 5000 : ex.StackTrace.Length);
            //            varParametros[2] = new SqlParameter("@Origen", SqlDbType.VarChar);
            //            varParametros[2].Value = origen;
            //            varParametros[3] = new SqlParameter("@Servicio", SqlDbType.VarChar);
            //            varParametros[3].Value = servicio;
            //            varParametros[4] = new SqlParameter("@Request", SqlDbType.VarChar);
            //            varParametros[4].Value = request;

            //            varIDError = int.Parse(varConexion.EjecutarProcedimiento("Gen_Proc_Error_Insertar", varParametros, TipoProcesamiento.Scalar, false).ToString());
            //        }
            //        catch (Exception)
            //        {
            //        }
            //        finally
            //        {
            //            varConexion.Desconectar();
            //        }
            //    }
            //    return new RespuestaBE<T>()
            //    {
            //        rpt = 999,
            //        mensaje = "Ocurrio un error al ejecutar el método." + ((ConfigurationManager.AppSettings["MostrarIDError"].ToString() == "1") ? ("\nIdentificador del error: " + varIDError.ToString()) : ""),
            //        data = default(T)
            //    };
            //}
        }
        #endregion

        #region Métodos deshabilitados
        public RespuestaSimpleBE AnularPagoCita(string idCita, string idCitaVirtual, string origen)
        {
            throw new WebFaultException(HttpStatusCode.BadRequest);
            //if (String.IsNullOrEmpty(idCita) && String.IsNullOrEmpty(idCitaVirtual))
            //{
            //    return new RespuestaSimpleBE()
            //    {
            //        rpt = 1,
            //        mensaje = "Debe ingresar por lo menos un cita presencial o virtual",
            //        data = null
            //    };
            //}
            //if (String.IsNullOrEmpty(origen))
            //{
            //    return new RespuestaSimpleBE()
            //    {
            //        rpt = 1,
            //        mensaje = "Debe indicar desde que dispostivo se solicita la anulacion del pago",
            //        data = null
            //    };
            //}
            //var tipo = 0;
            //if (!String.IsNullOrEmpty(idCita) && String.IsNullOrEmpty(idCitaVirtual))
            //{
            //    tipo = 1;
            //}
            //if (String.IsNullOrEmpty(idCita) && !String.IsNullOrEmpty(idCitaVirtual))
            //{
            //    tipo = 2;
            //}
            //var datosAnulacion = (tipo == 1) ? new CitaDA().AnularPagoCitaDatos(idCita, "1") : new CitaDA().AnularPagoCitaDatos(idCitaVirtual, "2");
            //var year = DateTime.Now.Year.ToString();
            //var month = (DateTime.Now.Month < 10) ? "0" + DateTime.Now.Month.ToString() : DateTime.Now.Month.ToString();
            //var day = (DateTime.Now.Day < 10) ? "0" + DateTime.Now.Day.ToString() : DateTime.Now.Day.ToString();
            //var anulacion = AnularPagoVisa(datosAnulacion.purchase, year + month + day, datosAnulacion.merchant, datosAnulacion.user, datosAnulacion.password);
            //if (anulacion != null)
            //{
            //    var success = new CitaDA().AnularPagoCita(idCita, idCitaVirtual, tipo.ToString(), anulacion.dataMap.TRANSACTION_ID, origen, "", true, anulacion.dataMap.STATUS);
            //}
            //else
            //{

            //    var success = new CitaDA().AnularPagoCita(idCita, idCitaVirtual, tipo.ToString(), "", origen, "", false, "");
            //    return new RespuestaSimpleBE()
            //    {
            //        rpt = 99,
            //        mensaje = "No se pudo anular su pago, intentelo mas tarde",
            //        data = "true"
            //    };
            //}

            //try
            //{

            //    return new RespuestaSimpleBE()
            //    {
            //        rpt = 0,
            //        mensaje = "Success",
            //        data = "true"
            //    };
            //}
            //catch (Exception ex)
            //{
            //    return new ErrorDA().RegistrarError(ex, "WS", "Cita.svc");

            //}
        }
        public RespuestaBE<DatosRoomBE> IniciarCitaVirtual(string idCita)
        {
            throw new WebFaultException(HttpStatusCode.BadRequest);
            //#region Validacion de Parámetros
            //if (string.IsNullOrEmpty(idCita))
            //{
            //    throw new WebFaultException(HttpStatusCode.BadRequest);
            //}
            //int varIDCita;
            //if (!int.TryParse(idCita, out varIDCita))
            //{
            //    return new RespuestaBE<DatosRoomBE>()
            //    {
            //        rpt = 101,
            //        mensaje = "El parámetro idCita debe ser numérico",
            //        data = null
            //    };
            //}
            //#endregion
            //try
            //{
            //    return new RespuestaBE<DatosRoomBE>()
            //    {
            //        rpt = 0,
            //        mensaje = "",
            //        data = new CitaDA().IniciarCitaVirtual(idCita)
            //    };
            //}
            //catch (Exception ex)
            //{
            //    return new ErrorDA().RegistrarError<DatosRoomBE>(ex, "WS", "Cita.svc");
            //}
        }
        public RespuestaBE<EstadoTeleconsulta> EstadoChat()
        {
            throw new WebFaultException(HttpStatusCode.BadRequest);
            //try
            //{
            //    DataTeleconsulta rpta = new CitaDA().EstadoChat();

            //    return new RespuestaBE<EstadoTeleconsulta>()
            //    {
            //        rpt = 0,
            //        mensaje = " ",
            //        data = new EstadoTeleconsulta
            //        {
            //            estado = rpta.Estado,
            //            mensaje = rpta.MensajeAtencion
            //        }
            //    };
            //}
            //catch (Exception ex)
            //{
            //    //Debug.WriteLine(ex);
            //    return new ErrorDA().RegistrarError<EstadoTeleconsulta>(ex, "WS", "Cita.svc");
            //}
        }
        public RespuestaBE<List<PreguntaFrecuenteBE>> PreguntasFrecuentes()
        {
            throw new WebFaultException(HttpStatusCode.BadRequest);
            //try
            //{
            //    return new RespuestaBE<List<PreguntaFrecuenteBE>>()
            //    {
            //        rpt = 0,
            //        mensaje = "",
            //        data = new PreguntaFrecuenteDA().Listar()
            //    };
            //}
            //catch (Exception ex)
            //{
            //    return new ErrorDA().RegistrarError<List<PreguntaFrecuenteBE>>(ex, "WS", "Cita.svc");
            //}
        }
        public RespuestaBE<List<PreguntaTriajeBE>> PreguntasTriaje(string tipoDocumento, string numeroDocumento)
        {
            throw new WebFaultException(HttpStatusCode.BadRequest);
            //try
            //{
            //    var response = new PreguntaFrecuenteDA().ListarPreguntasTriaje(tipoDocumento, numeroDocumento);
            //    /*if(response.usuarioRestringido == true)
            //    {
            //        return new RespuestaBE<List<PreguntaTriajeBE>>()
            //        {
            //            rpt = 20,
            //            mensaje = "Estimado paciente no podemos atenderlo de manera presencial, por favor agendar su cita de manera virtual en la opción Cita virtual en el menú principal.",
            //            data = null
            //        };
            //    }*/
            //    return new RespuestaBE<List<PreguntaTriajeBE>>()
            //    {
            //        rpt = 0,
            //        mensaje = "",
            //        data = response.preguntas
            //    };
            //}
            //catch (Exception ex)
            //{
            //    return new ErrorDA().RegistrarError<List<PreguntaTriajeBE>>(ex, "WS", "Cita.svc");
            //}
        }
        public RespuestaBE<bool> RespuestasTriaje(List<RespuestaTriaje> respuestas, string tipoDocumento, string numeroDocumento, string idEspecialidad, string cmp)
        {
            throw new WebFaultException(HttpStatusCode.BadRequest);
            //try
            //{
            //    bool restringido = false;
            //    foreach (var rpta in respuestas)
            //    {
            //        var registro = new PreguntaFrecuenteDA().RegistrarRespuestaTriaje(tipoDocumento, numeroDocumento, rpta.idPregunta, rpta.respuesta, idEspecialidad, cmp);
            //        if (registro)
            //        {
            //            restringido = true;
            //        }
            //        Debug.WriteLine(rpta.respuesta);
            //    }

            //    return new RespuestaBE<bool>()
            //    {
            //        rpt = 0,
            //        mensaje = (restringido) ? "Por seguridad y protección de todos, la atención médica no podrá ser presencial. Te invitamos a entrar a “Cita Virtual” en el menú principal,para separar una consulta médica por videollamada." : "",
            //        data = restringido
            //    };
            //}
            //catch (Exception ex)
            //{
            //    return new ErrorDA().RegistrarError<bool>(ex, "WS", "Cita.svc");
            //}
        }
        public RespuestaBE<List<PreguntaFrecuenteBE>> ConsultaSeguro(int tipoDocumento, string numeroDocumento, string ruc, string sunasa, string iafas, string seguro)
        {
            throw new WebFaultException(HttpStatusCode.BadRequest);
            //try
            //{
            //    Debug.WriteLine("Entry");
            //    var rpta = ConsultaSited(Convert.ToInt32(tipoDocumento), numeroDocumento, ruc, sunasa, iafas, "", "", "", "", seguro);
            //    return new RespuestaBE<List<PreguntaFrecuenteBE>>()
            //    {
            //        rpt = 0,
            //        mensaje = "monto : " + rpta,
            //        data = null
            //    };
            //}
            //catch (Exception ex)
            //{
            //    Debug.WriteLine(ex);
            //    return new ErrorDA().RegistrarError<List<PreguntaFrecuenteBE>>(ex, "WS", "Cita.svc");
            //}
        }
        public string ConsultaSited(int tipoDocumento, string numeroDocumento, string ruc, string sunasa, string iafas, string apellidoPaterno, string apellidoMaterno, string nombre, string codEspecialidad, string seguro)
        {
            throw new WebFaultException(HttpStatusCode.BadRequest);
            //string rpta = null;
            //try
            //{
            //    List<ConsultAsegNomResponse> listResponseOne = new List<ConsultAsegNomResponse>();
            //    ConsultAsegNomResponse responseOne = new ConsultAsegNomResponse();
            //    ConsultAsegCodResponse responseTwo = new ConsultAsegCodResponse();

            //    using (var client = new HttpClient())
            //    {
            //        client.BaseAddress = new Uri(ConfigurationManager.AppSettings["WS_SITED"].ToString());
            //        //HTTP POST
            //        ConsultAsegNom rqst = new ConsultAsegNom();
            //        rqst.CodTipoDocumentoAfiliado = tipoDocumento.ToString();
            //        rqst.NumeroDocumentoAfiliado = numeroDocumento;
            //        rqst.RUC = ruc;
            //        rqst.SUNASA = sunasa;
            //        rqst.IAFAS = iafas;
            //        rqst.NombresAfiliado = "";
            //        rqst.ApellidoPaternoAfiliado = "";
            //        rqst.ApellidoMaternoAfiliado = "";
            //        rqst.CodEspecialidad = "";
            //        var content = new StringContent(JsonConvert.SerializeObject(rqst).ToString(), Encoding.UTF8, "application/json");
            //        var responseTaskOne = client.PostAsync("Sistema/ConsultaAsegNom ", content);
            //        responseTaskOne.Wait();
            //        Debug.WriteLine(rqst.IAFAS);

            //        var resultOne = responseTaskOne.Result;
            //        if (resultOne.IsSuccessStatusCode)
            //        {
            //            var readTaskOne = resultOne.Content.ReadAsStringAsync();
            //            readTaskOne.Wait();
            //            if (readTaskOne.Result.Length > 2 && readTaskOne.Result != "[]")
            //            {
            //                Debug.WriteLine(readTaskOne.Result);
            //                listResponseOne = JsonConvert.DeserializeObject<List<ConsultAsegNomResponse>>(readTaskOne.Result);
            //                if (seguro == "Pacifico Seguros")
            //                {
            //                    listResponseOne = listResponseOne.Where(x => x.CodProducto == "MULTISALUD" || x.CodProducto == "MEDICVIDA NACIONAL" || x.CodProducto == "MVIN" || x.CodProducto == "MVNA" || x.CodProducto == "MEDICVIDA INTERNACIONAL" || x.CodProducto == "RED PREFERENTE" || x.CodProducto == "SEGURO DE SALUD GRUPAL DE EMPRESAS" || x.CodProducto == "SECO" || x.CodProducto == "MSLD" || x.CodProducto == "MLTS" || x.CodProducto == "AM05" || x.CodProducto == "ADMI" || x.CodProducto == "AE09" || x.CodProducto == "AM10" || x.CodProducto == "MNAC").ToList();
            //                    if (listResponseOne.Where(x => x.DesEstado == "VIGENTE").ToList().Count > 0)
            //                    {
            //                        responseOne = listResponseOne.FirstOrDefault(x => x.DesEstado == "VIGENTE");
            //                    }
            //                    else
            //                    {
            //                        return "NOVIGENTE";
            //                    }

            //                }
            //                if (seguro == "Pacifico EPS")
            //                {
            //                    listResponseOne = listResponseOne.Where(x => x.CodProducto == "EPS" || x.CodProducto == "POTESTATIVO" || x.CodProducto == "POTE").ToList();
            //                    if (listResponseOne.Where(x => x.DesEstado == "VIGENTE").ToList().Count > 0)
            //                    {
            //                        responseOne = listResponseOne.FirstOrDefault(x => x.DesEstado == "VIGENTE");
            //                    }
            //                    else
            //                    {
            //                        return "NOVIGENTE";
            //                    }
            //                    //responseOne = listResponseOne.FirstOrDefault(x => x.CodProducto == "EPS" || x.CodProducto == "POTESTATIVO" );
            //                }
            //                if (seguro == "Rimac Seguros y EPS")
            //                {
            //                    listResponseOne = listResponseOne.Where(x => x.CodProducto == "AMI RED SALUD" || x.CodProducto == "ONCOLOGICO INTEGRAL BBVA" || x.CodProducto == "ONCOLÓGICO INTEGRAL BBVA" || x.CodProducto == "PLANES MEDICOS" || x.CodProducto == "AMC COLECTIVA REGULAR" || x.CodProducto == "01" || x.CodProducto == "04" || x.CodProducto == "08" || x.CodProducto == "S" || x.CodProducto == "01").ToList();
            //                    if (listResponseOne.Where(x => x.DesEstado == "VIGENTE").ToList().Count > 0)
            //                    {
            //                        responseOne = listResponseOne.FirstOrDefault(x => x.DesEstado == "VIGENTE");
            //                    }
            //                    else
            //                    {
            //                        return "NOVIGENTE";
            //                    }
            //                    //responseOne = listResponseOne.FirstOrDefault(x => x.CodProducto == "AMI RED SALUD" || x.CodProducto == "ONCOLOGICO INTEGRAL BBVA" || x.CodProducto == "ONCOLÓGICO INTEGRAL BBVA" || x.CodProducto == "PLANES MEDICOS" || x.CodProducto == "AMC COLECTIVA REGULAR");
            //                }
            //                if (seguro == "Mapfre EPS")
            //                {
            //                    listResponseOne = listResponseOne.Where(x => x.CodProducto == "S").ToList();
            //                    if (listResponseOne.Where(x => x.DesEstado == "VIGENTE").ToList().Count > 0)
            //                    {
            //                        responseOne = listResponseOne.FirstOrDefault(x => x.DesEstado == "VIGENTE");
            //                    }
            //                    else
            //                    {
            //                        return "NOVIGENTE";
            //                    }
            //                    //responseOne = listResponseOne.FirstOrDefault(x => x.CodProducto == "AMI RED SALUD" || x.CodProducto == "ONCOLOGICO INTEGRAL BBVA" || x.CodProducto == "ONCOLÓGICO INTEGRAL BBVA" || x.CodProducto == "PLANES MEDICOS" || x.CodProducto == "AMC COLECTIVA REGULAR");
            //                }
            //                if (seguro == "Mapfre Seguros")
            //                {
            //                    listResponseOne = listResponseOne.Where(x => x.CodProducto == "3").ToList();
            //                    if (listResponseOne.Where(x => x.DesEstado == "VIGENTE").ToList().Count > 0)
            //                    {
            //                        responseOne = listResponseOne.FirstOrDefault(x => x.DesEstado == "VIGENTE");
            //                    }
            //                    else
            //                    {
            //                        return "NOVIGENTE";
            //                    }
            //                    //responseOne = listResponseOne.FirstOrDefault(x => x.CodProducto == "AMI RED SALUD" || x.CodProducto == "ONCOLOGICO INTEGRAL BBVA" || x.CodProducto == "ONCOLÓGICO INTEGRAL BBVA" || x.CodProducto == "PLANES MEDICOS" || x.CodProducto == "AMC COLECTIVA REGULAR");
            //                }
            //                if (seguro == "La Positiva EPS")
            //                {
            //                    listResponseOne = listResponseOne.Where(x => x.CodProducto == "18200001" || x.CodProducto == "18300003").ToList();
            //                    if (listResponseOne.Where(x => x.DesEstado == "VIGENTE").ToList().Count > 0)
            //                    {
            //                        responseOne = listResponseOne.FirstOrDefault(x => x.DesEstado == "VIGENTE");
            //                    }
            //                    else
            //                    {
            //                        return "NOVIGENTE";
            //                    }
            //                    //responseOne = listResponseOne.FirstOrDefault(x => x.CodProducto == "AMI RED SALUD" || x.CodProducto == "ONCOLOGICO INTEGRAL BBVA" || x.CodProducto == "ONCOLÓGICO INTEGRAL BBVA" || x.CodProducto == "PLANES MEDICOS" || x.CodProducto == "AMC COLECTIVA REGULAR");
            //                }
            //                if (seguro == "La Positiva Seguros")
            //                {
            //                    listResponseOne = listResponseOne.Where(x => x.CodProducto == "12300300" || x.CodProducto == "CANN" || x.CodProducto == "12300105").ToList();
            //                    if (listResponseOne.Where(x => x.DesEstado == "VIGENTE").ToList().Count > 0)
            //                    {
            //                        responseOne = listResponseOne.FirstOrDefault(x => x.DesEstado == "VIGENTE");
            //                    }
            //                    else
            //                    {
            //                        return "NOVIGENTE";
            //                    }
            //                    //responseOne = listResponseOne.FirstOrDefault(x => x.CodProducto == "AMI RED SALUD" || x.CodProducto == "ONCOLOGICO INTEGRAL BBVA" || x.CodProducto == "ONCOLÓGICO INTEGRAL BBVA" || x.CodProducto == "PLANES MEDICOS" || x.CodProducto == "AMC COLECTIVA REGULAR");
            //                }
            //                Debug.WriteLine(seguro);

            //            }

            //        }
            //        else //web api sent error response 
            //        {
            //            return "WSERROR";
            //        }
            //        if (responseOne != null)
            //        {
            //            if (responseOne.DesEstado == "VIGENTE")
            //            {
            //                var seg = responseOne.CodProducto;
            //                ConsultAsegCod rqstTwo = new ConsultAsegCod();
            //                rqstTwo.SUNASA = sunasa;
            //                rqstTwo.IAFAS = iafas;
            //                rqstTwo.RUC = ruc;
            //                rqstTwo.NombresAfiliado = responseOne.NombresAfiliado;
            //                rqstTwo.ApellidoPaternoAfiliado = responseOne.ApellidoPaternoAfiliado;
            //                rqstTwo.ApellidoMaternoAfiliado = responseOne.ApellidoMaternoAfiliado;
            //                rqstTwo.CodigoAfiliado = responseOne.CodigoAfiliado;
            //                rqstTwo.CodTipoDocumentoAfiliado = responseOne.CodTipoDocumentoAfiliado;
            //                rqstTwo.NumeroDocumentoAfiliado = responseOne.NumeroDocumentoAfiliado;
            //                rqstTwo.CodProducto = responseOne.CodProducto;
            //                rqstTwo.DesProducto = responseOne.DesProducto;
            //                rqstTwo.NumeroPlan = responseOne.NumeroPlan;
            //                rqstTwo.CodTipoDocumentoContratante = responseOne.CodTipoDocumentoContratante;
            //                rqstTwo.NumeroDocumentoContratante = responseOne.NumeroDocumentoContratante;
            //                rqstTwo.NombreContratante = responseOne.NombreContratante;
            //                rqstTwo.CodParentesco = responseOne.CodParentesco;
            //                rqstTwo.TipoCalificadorContratante = responseOne.TipoCalificadorContratante;
            //                rqstTwo.CodEspecialidad = "";
            //                Debug.WriteLine(JsonConvert.SerializeObject(rqstTwo).ToString());
            //                var contentTwo = new StringContent(JsonConvert.SerializeObject(rqstTwo).ToString(), Encoding.UTF8, "application/json");
            //                var responseTaskTwo = client.PostAsync("Sistema/ConsultaAsegCod", contentTwo);
            //                responseTaskTwo.Wait();

            //                var resultTwo = responseTaskTwo.Result;
            //                if (resultTwo.IsSuccessStatusCode)
            //                {

            //                    var readTaskTwo = resultTwo.Content.ReadAsStringAsync();
            //                    readTaskTwo.Wait();
            //                    Debug.WriteLine(readTaskTwo.Result);
            //                    if (readTaskTwo.Result.Length > 2 && readTaskTwo.Result != "[]")
            //                    {
            //                        responseTwo = JsonConvert.DeserializeObject<ConsultAsegCodResponse>(readTaskTwo.Result);

            //                        //Debug.WriteLine(responseTwo.Coberturas[0].CodCopagoFijo);


            //                    }
            //                    foreach (Cobertura cbt in responseTwo.Coberturas)
            //                    {
            //                        if (seg == "EPS" && cbt.Beneficios == "CONSULTA AMBULATORIA")
            //                        {

            //                            rpta = cbt.CodCopagoFijo + "-" + responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                            break;
            //                        }
            //                        if (seg == "POTESTATIVO" && cbt.Beneficios == "CONSULTA AMBULATORIA")
            //                        {
            //                            rpta = cbt.CodCopagoFijo + "-" + responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                            break;
            //                        }
            //                        if (seg == "POTE" && cbt.Beneficios == "CONSULTA AMBULATORIA")
            //                        {
            //                            rpta = cbt.CodCopagoFijo + "-" + responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                            break;
            //                        }
            //                        if (seg == "SECO" && cbt.Beneficios == "ATENCION POR ENFERMEDAD" && cbt.CodigoCobertura == "4153")
            //                        {
            //                            rpta = cbt.CodCopagoFijo + "-" + responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                            break;
            //                        }
            //                        if (seg == "MULTISALUD" || seg == "MEDICVIDA NACIONAL" || seg == "MEDICVIDA INTERNACIONAL" || seg == "RED PREFERENTE" || seg == "MVIN" || seg == "MVNA" || seg == "MSLD" || seg == "MLTS" || seg == "AM05" || seg == "MNAC")
            //                        {
            //                            if (cbt.Beneficios == "ATENCION A CREDITO EN CLINICAS AFILIADAS (PERU)")
            //                            {
            //                                rpta = cbt.CodCopagoFijo + "-" + responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                                break;
            //                            }
            //                            if (cbt.CodigoCobertura == "4262")
            //                            {
            //                                rpta = cbt.CodCopagoFijo + "-" + responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                                break;
            //                            }

            //                        }
            //                        if (seg == "AMI RED SALUD" && cbt.Beneficios == "CONSULTA AMBULATORIA")
            //                        {
            //                            rpta = cbt.CodCopagoFijo + "-" + responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                            break;
            //                        }
            //                        if (seg == "PLANES MEDICOS" && cbt.Beneficios == "CONSULTA AMBULATORIA")
            //                        {
            //                            rpta = cbt.CodCopagoFijo + "-" + responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                            break;
            //                        }
            //                        if (seg == "ONCOLÓGICO INTEGRAL BBVA" && cbt.Beneficios == "ONCOLOGICO AMBULATORIO")
            //                        {
            //                            rpta = cbt.CodCopagoFijo + "-" + responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                            break;
            //                        }
            //                        if (seg == "ONCOLOGICO INTEGRAL BBVA" && cbt.Beneficios == "ONCOLOGICO AMBULATORIO")
            //                        {
            //                            rpta = cbt.CodCopagoFijo + "-" + responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                            break;
            //                        }
            //                        if (seg == "AMC COLECTIVA REGULAR" && cbt.Beneficios == "CONSULTA AMBULATORIA")
            //                        {
            //                            rpta = cbt.CodCopagoFijo + "-" + responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                            break;
            //                        }
            //                        if (seg == "01" && cbt.Beneficios == "CONSULTA AMBULATORIA")
            //                        {
            //                            rpta = cbt.CodCopagoFijo + "-" + responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                            break;
            //                        }
            //                        if (seg == "04" && cbt.Beneficios == "CONSULTA AMBULATORIA")
            //                        {
            //                            rpta = cbt.CodCopagoFijo + "-" + responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                            break;
            //                        }
            //                        if (seg == "S" && cbt.Beneficios == "CONSULTA AMBULATORIA")
            //                        {
            //                            rpta = cbt.CodCopagoFijo + "-" + responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                            break;
            //                        }
            //                        if (seg == "08" && cbt.Beneficios == "ONCOLOGICO AMBULATORIO")
            //                        {
            //                            rpta = cbt.CodCopagoFijo + "-" + responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                            break;
            //                        }
            //                        if (seg == "3" && cbt.Beneficios == "CONSULTA AMBULATORIA")
            //                        {
            //                            rpta = cbt.CodCopagoFijo + "-" + responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                            break;
            //                        }
            //                        if (seg == "ADMI" && cbt.Beneficios == "ATENCION POR ENFERMEDAD" && cbt.CodigoCobertura == "4153")
            //                        {
            //                            rpta = cbt.CodCopagoFijo + "-" + responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                            break;
            //                        }
            //                        if (seg == "AE09" && cbt.Beneficios == "CONSULTA AMBULATORIA" && cbt.CodigoCobertura == "4100")
            //                        {
            //                            rpta = cbt.CodCopagoFijo + "-" + responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                            break;
            //                        }
            //                        if (seg == "AM10" && cbt.CodigoCobertura == "4245")
            //                        {
            //                            rpta = cbt.CodCopagoFijo + "-" + responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                            break;
            //                        }
            //                        if (seg == "18200001" && cbt.CodigoCobertura == "4100")
            //                        {
            //                            rpta = cbt.CodCopagoFijo + "-" + responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                            break;
            //                        }
            //                        if (seg == "18300003" && cbt.CodigoCobertura == "4100")
            //                        {
            //                            rpta = cbt.CodCopagoFijo + "-" + responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                            break;
            //                        }
            //                        if (seg == "01" && cbt.CodigoCobertura == "4100")
            //                        {
            //                            rpta = cbt.CodCopagoFijo + "-" + responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                            break;
            //                        }
            //                        if (seg == "12300300" && cbt.CodigoCobertura == "4100")
            //                        {
            //                            rpta = cbt.CodCopagoFijo + "-" + responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                            break;
            //                        }
            //                        if (seg == "CANN" && cbt.CodigoCobertura == "4152")
            //                        {
            //                            rpta = cbt.CodCopagoFijo + "-" + responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                            break;
            //                        }
            //                        if (seg == "12300105" && cbt.CodigoCobertura == "4100")
            //                        {
            //                            rpta = cbt.CodCopagoFijo + "-" + responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                            break;
            //                        }

            //                    }

            //                }
            //                else //web api sent error response 
            //                {
            //                    return "WSERROR";
            //                }
            //            }
            //            else
            //            {
            //                return "NOVIGENTE";
            //            }
            //        }

            //    }

            //    return rpta;
            //}
            //catch (Exception e)
            //{
            //    Debug.WriteLine(e);
            //    return null;
            //}
        }
        public RespuestaSimpleBE IndicadorVideoLlamada(string idCitaVirtual)
        {
            throw new WebFaultException(HttpStatusCode.BadRequest);
            //if (string.IsNullOrEmpty(idCitaVirtual))
            //{
            //    throw new WebFaultException(HttpStatusCode.BadRequest);
            //}
            //try
            //{
            //    var calificacion = new CitaDA().IndicadorVideollamada(idCitaVirtual);
            //    return new RespuestaSimpleBE()
            //    {
            //        rpt = 0,
            //        mensaje = "",
            //        data = calificacion.ToString()
            //    };
            //}


            //catch (Exception ex)
            //{
            //    new ErrorDA().RegistrarError(ex, "WS", "Cita.svc");

            //    return new RespuestaSimpleBE()
            //    {
            //        rpt = 997,
            //        mensaje = ex.Message,
            //        data = ex.Message
            //    };
            //}

        }
        public AnularPagoResponse AnularPagoVisa(string purchase, string fecha, string merchant, string user, string password)
        {
            throw new WebFaultException(HttpStatusCode.BadRequest);
            //try
            //{
            //    Debug.WriteLine(fecha);
            //    Debug.WriteLine(purchase);
            //    OrderAnularPagoRequest request = new OrderAnularPagoRequest();
            //    request.order = new AnularPagoRequest();
            //    request.order.purchaseNumber = purchase;
            //    request.order.transactionDate = fecha;
            //    AnularPagoResponse response = new AnularPagoResponse();

            //    string token = System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(user + ":" + password));
            //    Debug.WriteLine(token);
            //    string key = "";
            //    using (var client = new HttpClient())
            //    {
            //        client.BaseAddress = new Uri("https://apitestenv.vnforapps.com/");

            //        //client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Authorization", "Basic "+token);
            //        client.DefaultRequestHeaders.Add("Authorization", "Basic " + token);
            //        var responseTaskOne = client.GetAsync("api.security/v1/security");
            //        responseTaskOne.Wait();

            //        var resultOne = responseTaskOne.Result;
            //        Debug.WriteLine(resultOne.StatusCode);
            //        Debug.WriteLine(resultOne.Content);
            //        Debug.WriteLine(responseTaskOne.Result);
            //        if (resultOne.IsSuccessStatusCode)
            //        {
            //            var readTaskOne = resultOne.Content.ReadAsStringAsync();
            //            readTaskOne.Wait();
            //            Debug.WriteLine(readTaskOne.Result);
            //            if (readTaskOne.Result != "Unauthorized access")
            //            {
            //                key = readTaskOne.Result;
            //            }
            //            else
            //            {
            //                key = "null";
            //            }

            //        }
            //        else //web api sent error response 
            //        {
            //            response = null;
            //            Debug.WriteLine("WS Error Auth");
            //            key = "null";
            //        }


            //    }
            //    if (key != "null" && key != "")
            //    {
            //        using (var client = new HttpClient())
            //        {
            //            client.BaseAddress = new Uri("https://apitestenv.vnforapps.com/api.authorization/v3/");
            //            Debug.WriteLine(JsonConvert.SerializeObject(request).ToString());
            //            var content = new StringContent(JsonConvert.SerializeObject(request).ToString(), Encoding.UTF8, "application/json");
            //            client.DefaultRequestHeaders.Add("Authorization", key);
            //            var responseTaskOne = client.PostAsync("reverse/ecommerce/" + merchant, content);
            //            responseTaskOne.Wait();

            //            var resultOne = responseTaskOne.Result;
            //            Debug.WriteLine(resultOne.StatusCode);
            //            //Debug.WriteLine(resultOne.GetHashCode());
            //            Debug.WriteLine(merchant);
            //            if (resultOne.IsSuccessStatusCode)
            //            {
            //                var readTaskOne = resultOne.Content.ReadAsStringAsync();
            //                readTaskOne.Wait();
            //                Debug.WriteLine(readTaskOne.Result);
            //                if (readTaskOne.Result != "Unauthorized access")
            //                {
            //                    Debug.WriteLine("Anuacion Exitosa");
            //                    response = JsonConvert.DeserializeObject<AnularPagoResponse>(readTaskOne.Result);
            //                }
            //                else
            //                {
            //                    Debug.WriteLine("Anuacion Fallida");
            //                }

            //            }
            //            else //web api sent error response 
            //            {
            //                Debug.WriteLine("WS Error Fail");
            //            }


            //        }
            //    }



            //    return response;
            //}
            //catch (Exception e)
            //{
            //    Debug.WriteLine(e);
            //    return null;
            //}

        }
        public DatosResponseSited ConsultaSitedPresencial(int tipoDocumento, string numeroDocumento, string ruc, string sunasa, string iafas, string apellidoPaterno, string apellidoMaterno, string nombre, string codEspecialidad, string seguro)
        {
            throw new WebFaultException(HttpStatusCode.BadRequest);
            //string rpta = null;
            //try
            //{
            //    DatosResponseSited result = new DatosResponseSited();
            //    result.seguro = ruc;
            //    result.iafas = iafas;
            //    result.monto = null;
            //    List<ConsultAsegNomResponse> listResponseOne = new List<ConsultAsegNomResponse>();
            //    ConsultAsegNomResponse responseOne = new ConsultAsegNomResponse();
            //    ConsultAsegCodResponse responseTwo = new ConsultAsegCodResponse();

            //    using (var client = new HttpClient())
            //    {
            //        client.BaseAddress = new Uri(ConfigurationManager.AppSettings["WS_SITED"].ToString());
            //        client.Timeout = TimeSpan.FromMinutes(2);
            //        //HTTP POST
            //        ConsultAsegNom rqst = new ConsultAsegNom();
            //        rqst.NumeroDocumentoAfiliado = numeroDocumento;
            //        rqst.CodTipoDocumentoAfiliado = tipoDocumento.ToString();
            //        rqst.RUC = ruc;
            //        rqst.SUNASA = sunasa;
            //        rqst.IAFAS = iafas;
            //        if (tipoDocumento == 1)
            //        {
            //            rqst.NombresAfiliado = "";
            //            rqst.ApellidoPaternoAfiliado = "";
            //            rqst.ApellidoMaternoAfiliado = "";
            //        }
            //        else
            //        {
            //            rqst.NombresAfiliado = nombre;
            //            rqst.ApellidoPaternoAfiliado = apellidoPaterno;
            //            rqst.ApellidoMaternoAfiliado = apellidoMaterno;
            //            rqst.NumeroDocumentoAfiliado = "";
            //        }
            //        rqst.CodEspecialidad = "";
            //        var content = new StringContent(JsonConvert.SerializeObject(rqst).ToString(), Encoding.UTF8, "application/json");
            //        var responseTaskOne = client.PostAsync("Sistema/ConsultaAsegNom ", content);
            //        responseTaskOne.Wait();
            //        Debug.WriteLine(rqst.IAFAS);

            //        var resultOne = responseTaskOne.Result;
            //        if (resultOne.IsSuccessStatusCode)
            //        {
            //            result.wsError = false;
            //            var readTaskOne = resultOne.Content.ReadAsStringAsync();
            //            readTaskOne.Wait();
            //            if (readTaskOne.Result.Length > 2 && readTaskOne.Result != "[]")
            //            {
            //                Debug.WriteLine(readTaskOne.Result);
            //                listResponseOne = JsonConvert.DeserializeObject<List<ConsultAsegNomResponse>>(readTaskOne.Result);
            //                if (seguro == "Pacifico Seguros")
            //                {
            //                    listResponseOne = listResponseOne.Where(x => x.CodProducto == "MULTISALUD" || x.CodProducto == "MEDICVIDA NACIONAL" || x.CodProducto == "MVIN" || x.CodProducto == "MVNA" || x.CodProducto == "MEDICVIDA INTERNACIONAL" || x.CodProducto == "RED PREFERENTE" || x.CodProducto == "SEGURO DE SALUD GRUPAL DE EMPRESAS" || x.CodProducto == "SECO" || x.CodProducto == "MSLD" || x.CodProducto == "MLTS" || x.CodProducto == "AM05" || x.CodProducto == "ADMI" || x.CodProducto == "AE09" || x.CodProducto == "AM10" || x.CodProducto == "MNAC").ToList();
            //                    if (listResponseOne.Where(x => x.DesEstado == "VIGENTE").ToList().Count > 0)
            //                    {
            //                        responseOne = listResponseOne.FirstOrDefault(x => x.DesEstado == "VIGENTE");
            //                    }
            //                    else
            //                    {
            //                        result.vigente = false;
            //                        return result;
            //                    }

            //                }
            //                if (seguro == "Pacifico EPS")
            //                {
            //                    listResponseOne = listResponseOne.Where(x => x.CodProducto == "EPS" || x.CodProducto == "POTESTATIVO" || x.CodProducto == "POTE").ToList();
            //                    if (listResponseOne.Where(x => x.DesEstado == "VIGENTE").ToList().Count > 0)
            //                    {
            //                        responseOne = listResponseOne.FirstOrDefault(x => x.DesEstado == "VIGENTE");
            //                    }
            //                    else
            //                    {
            //                        result.vigente = false;
            //                        return result;
            //                    }
            //                    //responseOne = listResponseOne.FirstOrDefault(x => x.CodProducto == "EPS" || x.CodProducto == "POTESTATIVO" );
            //                }
            //                if (seguro == "Rimac Seguros y EPS")
            //                {
            //                    listResponseOne = listResponseOne.Where(x => x.CodProducto == "AMI RED SALUD" || x.CodProducto == "ONCOLOGICO INTEGRAL BBVA" || x.CodProducto == "ONCOLÓGICO INTEGRAL BBVA" || x.CodProducto == "PLANES MEDICOS" || x.CodProducto == "AMC COLECTIVA REGULAR" || x.CodProducto == "01" || x.CodProducto == "04" || x.CodProducto == "08" || x.CodProducto == "S" || x.CodProducto == "01").ToList();
            //                    if (listResponseOne.Where(x => x.DesEstado == "VIGENTE").ToList().Count > 0)
            //                    {
            //                        responseOne = listResponseOne.FirstOrDefault(x => x.DesEstado == "VIGENTE");
            //                    }
            //                    else
            //                    {
            //                        result.vigente = false;
            //                        return result;
            //                    }
            //                    //responseOne = listResponseOne.FirstOrDefault(x => x.CodProducto == "AMI RED SALUD" || x.CodProducto == "ONCOLOGICO INTEGRAL BBVA" || x.CodProducto == "ONCOLÓGICO INTEGRAL BBVA" || x.CodProducto == "PLANES MEDICOS" || x.CodProducto == "AMC COLECTIVA REGULAR");
            //                }
            //                if (seguro == "Mapfre EPS")
            //                {
            //                    listResponseOne = listResponseOne.Where(x => x.CodProducto == "S").ToList();
            //                    if (listResponseOne.Where(x => x.DesEstado == "VIGENTE").ToList().Count > 0)
            //                    {
            //                        responseOne = listResponseOne.FirstOrDefault(x => x.DesEstado == "VIGENTE");
            //                    }
            //                    else
            //                    {
            //                        result.vigente = false;
            //                        return result;
            //                    }
            //                    //responseOne = listResponseOne.FirstOrDefault(x => x.CodProducto == "AMI RED SALUD" || x.CodProducto == "ONCOLOGICO INTEGRAL BBVA" || x.CodProducto == "ONCOLÓGICO INTEGRAL BBVA" || x.CodProducto == "PLANES MEDICOS" || x.CodProducto == "AMC COLECTIVA REGULAR");
            //                }
            //                if (seguro == "Mapfre Seguros")
            //                {
            //                    listResponseOne = listResponseOne.Where(x => x.CodProducto == "3" || x.CodProducto == "1").ToList();
            //                    if (listResponseOne.Where(x => x.DesEstado == "VIGENTE").ToList().Count > 0)
            //                    {
            //                        responseOne = listResponseOne.FirstOrDefault(x => x.DesEstado == "VIGENTE");
            //                    }
            //                    else
            //                    {
            //                        result.vigente = false;
            //                        return result;
            //                    }
            //                    //responseOne = listResponseOne.FirstOrDefault(x => x.CodProducto == "AMI RED SALUD" || x.CodProducto == "ONCOLOGICO INTEGRAL BBVA" || x.CodProducto == "ONCOLÓGICO INTEGRAL BBVA" || x.CodProducto == "PLANES MEDICOS" || x.CodProducto == "AMC COLECTIVA REGULAR");
            //                }
            //                if (seguro == "La Positiva EPS")
            //                {
            //                    listResponseOne = listResponseOne.Where(x => x.CodProducto == "18200001" || x.CodProducto == "18300003").ToList();
            //                    if (listResponseOne.Where(x => x.DesEstado == "VIGENTE").ToList().Count > 0)
            //                    {
            //                        responseOne = listResponseOne.FirstOrDefault(x => x.DesEstado == "VIGENTE");
            //                    }
            //                    else
            //                    {
            //                        result.vigente = false;
            //                        return result;
            //                    }
            //                    //responseOne = listResponseOne.FirstOrDefault(x => x.CodProducto == "AMI RED SALUD" || x.CodProducto == "ONCOLOGICO INTEGRAL BBVA" || x.CodProducto == "ONCOLÓGICO INTEGRAL BBVA" || x.CodProducto == "PLANES MEDICOS" || x.CodProducto == "AMC COLECTIVA REGULAR");
            //                }
            //                if (seguro == "La Positiva Seguros")
            //                {
            //                    listResponseOne = listResponseOne.Where(x => x.CodProducto == "12300300" || x.CodProducto == "CANN" || x.CodProducto == "12300105").ToList();
            //                    if (listResponseOne.Where(x => x.DesEstado == "VIGENTE").ToList().Count > 0)
            //                    {
            //                        responseOne = listResponseOne.FirstOrDefault(x => x.DesEstado == "VIGENTE");
            //                    }
            //                    else
            //                    {
            //                        result.vigente = false;
            //                        return result;
            //                    }
            //                    //responseOne = listResponseOne.FirstOrDefault(x => x.CodProducto == "AMI RED SALUD" || x.CodProducto == "ONCOLOGICO INTEGRAL BBVA" || x.CodProducto == "ONCOLÓGICO INTEGRAL BBVA" || x.CodProducto == "PLANES MEDICOS" || x.CodProducto == "AMC COLECTIVA REGULAR");
            //                }
            //                if (seguro == "Sanitas Peru EPS")
            //                {
            //                    listResponseOne = listResponseOne.Where(x => x.CodProducto == "02").ToList();
            //                    if (listResponseOne.Where(x => x.DesEstado == "VIGENTE").ToList().Count > 0)
            //                    {
            //                        responseOne = listResponseOne.FirstOrDefault(x => x.DesEstado == "VIGENTE");
            //                    }
            //                    else
            //                    {
            //                        result.vigente = false;
            //                        return result;
            //                    }
            //                    //responseOne = listResponseOne.FirstOrDefault(x => x.CodProducto == "AMI RED SALUD" || x.CodProducto == "ONCOLOGICO INTEGRAL BBVA" || x.CodProducto == "ONCOLÓGICO INTEGRAL BBVA" || x.CodProducto == "PLANES MEDICOS" || x.CodProducto == "AMC COLECTIVA REGULAR");
            //                }
            //                Debug.WriteLine(seguro);

            //            }

            //        }
            //        else //web api sent error response 
            //        {
            //            result.wsError = true;
            //            return result;
            //        }
            //        if (responseOne != null)
            //        {
            //            result.codProducto = responseOne.CodProducto;
            //            result.desProducto = responseOne.DesProducto;
            //            if (responseOne.DesEstado == "VIGENTE")
            //            {
            //                result.codAsegurado = responseOne.CodigoAfiliado;
            //                result.vigente = true;
            //                var seg = responseOne.CodProducto;
            //                ConsultAsegCod rqstTwo = new ConsultAsegCod();
            //                rqstTwo.SUNASA = sunasa;
            //                rqstTwo.IAFAS = iafas;
            //                rqstTwo.RUC = ruc;
            //                rqstTwo.NombresAfiliado = responseOne.NombresAfiliado;
            //                rqstTwo.ApellidoPaternoAfiliado = responseOne.ApellidoPaternoAfiliado;
            //                rqstTwo.ApellidoMaternoAfiliado = responseOne.ApellidoMaternoAfiliado;
            //                rqstTwo.CodigoAfiliado = responseOne.CodigoAfiliado;
            //                rqstTwo.CodTipoDocumentoAfiliado = responseOne.CodTipoDocumentoAfiliado;
            //                rqstTwo.NumeroDocumentoAfiliado = responseOne.NumeroDocumentoAfiliado;
            //                rqstTwo.CodProducto = responseOne.CodProducto;
            //                rqstTwo.DesProducto = responseOne.DesProducto;
            //                rqstTwo.NumeroPlan = responseOne.NumeroPlan;
            //                rqstTwo.CodTipoDocumentoContratante = responseOne.CodTipoDocumentoContratante;
            //                rqstTwo.NumeroDocumentoContratante = responseOne.NumeroDocumentoContratante;
            //                rqstTwo.NombreContratante = responseOne.NombreContratante;
            //                rqstTwo.CodParentesco = responseOne.CodParentesco;
            //                rqstTwo.TipoCalificadorContratante = responseOne.TipoCalificadorContratante;
            //                rqstTwo.CodEspecialidad = "";
            //                Debug.WriteLine(JsonConvert.SerializeObject(rqstTwo).ToString());
            //                var contentTwo = new StringContent(JsonConvert.SerializeObject(rqstTwo).ToString(), Encoding.UTF8, "application/json");
            //                var responseTaskTwo = client.PostAsync("Sistema/ConsultaAsegCod", contentTwo);
            //                responseTaskTwo.Wait();

            //                var resultTwo = responseTaskTwo.Result;
            //                if (resultTwo.IsSuccessStatusCode)
            //                {
            //                    result.wsError = false;
            //                    var readTaskTwo = resultTwo.Content.ReadAsStringAsync();
            //                    readTaskTwo.Wait();
            //                    Debug.WriteLine(readTaskTwo.Result);
            //                    if (readTaskTwo.Result.Length > 2 && readTaskTwo.Result != "[]")
            //                    {
            //                        responseTwo = JsonConvert.DeserializeObject<ConsultAsegCodResponse>(readTaskTwo.Result);

            //                        //Debug.WriteLine(responseTwo.Coberturas[0].CodCopagoFijo);


            //                    }
            //                    foreach (Cobertura cbt in responseTwo.Coberturas)
            //                    {
            //                        if (seg == "EPS" && cbt.Beneficios == "CONSULTA AMBULATORIA")
            //                        {

            //                            rpta = cbt.CodCopagoFijo + "-" + responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                            result.codCobertura = cbt.CodigoCobertura;
            //                            result.desCobertura = cbt.Beneficios;
            //                            result.monto = cbt.CodCopagoFijo;
            //                            result.codTipoMoneda = responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                            break;
            //                        }
            //                        if (seg == "POTESTATIVO" && cbt.Beneficios == "CONSULTA AMBULATORIA")
            //                        {
            //                            rpta = cbt.CodCopagoFijo + "-" + responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                            result.codCobertura = cbt.CodigoCobertura;
            //                            result.desCobertura = cbt.Beneficios;
            //                            result.monto = cbt.CodCopagoFijo;
            //                            result.codTipoMoneda = responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                            break;
            //                        }
            //                        if (seg == "POTE" && cbt.Beneficios == "CONSULTA AMBULATORIA")
            //                        {
            //                            rpta = cbt.CodCopagoFijo + "-" + responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                            result.codCobertura = cbt.CodigoCobertura;
            //                            result.desCobertura = cbt.Beneficios;
            //                            result.monto = cbt.CodCopagoFijo;
            //                            result.codTipoMoneda = responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                            break;
            //                        }
            //                        if (seg == "SECO" && cbt.CodigoCobertura == "4153")
            //                        {
            //                            rpta = cbt.CodCopagoFijo + "-" + responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                            result.codCobertura = cbt.CodigoCobertura;
            //                            result.desCobertura = cbt.Beneficios;
            //                            result.monto = cbt.CodCopagoFijo;
            //                            result.codTipoMoneda = responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                            break;
            //                        }
            //                        if (seg == "MULTISALUD" || seg == "MEDICVIDA NACIONAL" || seg == "MEDICVIDA INTERNACIONAL" || seg == "RED PREFERENTE" || seg == "MVIN" || seg == "MVNA" || seg == "MSLD" || seg == "MLTS" || seg == "AM05" || seg == "MNAC")
            //                        {
            //                            if (cbt.Beneficios == "ATENCION A CREDITO EN CLINICAS AFILIADAS (PERU)")
            //                            {
            //                                rpta = cbt.CodCopagoFijo + "-" + responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                                result.codCobertura = cbt.CodigoCobertura;
            //                                result.desCobertura = cbt.Beneficios;
            //                                result.monto = cbt.CodCopagoFijo;
            //                                result.codTipoMoneda = responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                                break;
            //                            }
            //                            if (cbt.CodigoCobertura == "4262")
            //                            {
            //                                rpta = cbt.CodCopagoFijo + "-" + responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                                result.codCobertura = cbt.CodigoCobertura;
            //                                result.desCobertura = cbt.Beneficios;
            //                                result.monto = cbt.CodCopagoFijo;
            //                                result.codTipoMoneda = responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                                break;
            //                            }

            //                        }
            //                        if (seg == "AMI RED SALUD" && cbt.Beneficios == "CONSULTA AMBULATORIA")
            //                        {
            //                            rpta = cbt.CodCopagoFijo + "-" + responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                            result.codCobertura = cbt.CodigoCobertura;
            //                            result.desCobertura = cbt.Beneficios;
            //                            result.monto = cbt.CodCopagoFijo;
            //                            result.codTipoMoneda = responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                            break;
            //                        }
            //                        if (seg == "PLANES MEDICOS" && cbt.Beneficios == "CONSULTA AMBULATORIA")
            //                        {
            //                            rpta = cbt.CodCopagoFijo + "-" + responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                            result.codCobertura = cbt.CodigoCobertura;
            //                            result.desCobertura = cbt.Beneficios;
            //                            result.monto = cbt.CodCopagoFijo;
            //                            result.codTipoMoneda = responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                            break;
            //                        }
            //                        if (seg == "ONCOLÓGICO INTEGRAL BBVA" && cbt.Beneficios == "ONCOLOGICO AMBULATORIO")
            //                        {
            //                            rpta = cbt.CodCopagoFijo + "-" + responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                            result.codCobertura = cbt.CodigoCobertura;
            //                            result.desCobertura = cbt.Beneficios;
            //                            result.monto = cbt.CodCopagoFijo;
            //                            result.codTipoMoneda = responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                            break;
            //                        }
            //                        if (seg == "ONCOLOGICO INTEGRAL BBVA" && cbt.Beneficios == "ONCOLOGICO AMBULATORIO")
            //                        {
            //                            rpta = cbt.CodCopagoFijo + "-" + responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                            result.codCobertura = cbt.CodigoCobertura;
            //                            result.desCobertura = cbt.Beneficios;
            //                            result.monto = cbt.CodCopagoFijo;
            //                            result.codTipoMoneda = responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                            break;
            //                        }
            //                        if (seg == "AMC COLECTIVA REGULAR" && cbt.Beneficios == "CONSULTA AMBULATORIA")
            //                        {
            //                            rpta = cbt.CodCopagoFijo + "-" + responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                            result.codCobertura = cbt.CodigoCobertura;
            //                            result.desCobertura = cbt.Beneficios;
            //                            result.monto = cbt.CodCopagoFijo;
            //                            result.codTipoMoneda = responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                            break;
            //                        }
            //                        if (seg == "01" && cbt.Beneficios == "CONSULTA AMBULATORIA")
            //                        {
            //                            rpta = cbt.CodCopagoFijo + "-" + responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                            result.codCobertura = cbt.CodigoCobertura;
            //                            result.desCobertura = cbt.Beneficios;
            //                            result.monto = cbt.CodCopagoFijo;
            //                            result.codTipoMoneda = responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                            break;
            //                        }
            //                        if (seg == "04" && cbt.Beneficios == "CONSULTA AMBULATORIA")
            //                        {
            //                            rpta = cbt.CodCopagoFijo + "-" + responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                            result.codCobertura = cbt.CodigoCobertura;
            //                            result.desCobertura = cbt.Beneficios;
            //                            result.monto = cbt.CodCopagoFijo;
            //                            result.codTipoMoneda = responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                            break;
            //                        }
            //                        if (seg == "S" && cbt.Beneficios == "CONSULTA AMBULATORIA")
            //                        {
            //                            rpta = cbt.CodCopagoFijo + "-" + responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                            result.codCobertura = cbt.CodigoCobertura;
            //                            result.desCobertura = cbt.Beneficios;
            //                            result.monto = cbt.CodCopagoFijo;
            //                            result.codTipoMoneda = responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                            break;
            //                        }
            //                        if (seg == "08" && cbt.Beneficios == "ONCOLOGICO AMBULATORIO")
            //                        {
            //                            rpta = cbt.CodCopagoFijo + "-" + responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                            result.codCobertura = cbt.CodigoCobertura;
            //                            result.desCobertura = cbt.Beneficios;
            //                            result.monto = cbt.CodCopagoFijo;
            //                            result.codTipoMoneda = responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                            break;
            //                        }
            //                        if (seg == "3" && cbt.Beneficios == "CONSULTA AMBULATORIA")
            //                        {
            //                            rpta = cbt.CodCopagoFijo + "-" + responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                            result.codCobertura = cbt.CodigoCobertura;
            //                            result.desCobertura = cbt.Beneficios;
            //                            result.monto = cbt.CodCopagoFijo;
            //                            result.codTipoMoneda = responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                            break;
            //                        }
            //                        if (seg == "1" && cbt.CodigoCobertura == "4100")
            //                        {
            //                            rpta = cbt.CodCopagoFijo + "-" + responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                            result.codCobertura = cbt.CodigoCobertura;
            //                            result.desCobertura = cbt.Beneficios;
            //                            result.monto = cbt.CodCopagoFijo;
            //                            result.codTipoMoneda = responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                            break;
            //                        }
            //                        if (seg == "3" && cbt.CodigoCobertura == "4100")
            //                        {
            //                            rpta = cbt.CodCopagoFijo + "-" + responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                            result.codCobertura = cbt.CodigoCobertura;
            //                            result.desCobertura = cbt.Beneficios;
            //                            result.monto = cbt.CodCopagoFijo;
            //                            result.codTipoMoneda = responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                            break;
            //                        }
            //                        if (seg == "ADMI" && cbt.CodigoCobertura == "4153")
            //                        {
            //                            rpta = cbt.CodCopagoFijo + "-" + responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                            result.codCobertura = cbt.CodigoCobertura;
            //                            result.desCobertura = cbt.Beneficios;
            //                            result.monto = cbt.CodCopagoFijo;
            //                            result.codTipoMoneda = responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                            break;
            //                        }
            //                        if (seg == "AE09" && cbt.CodigoCobertura == "4100")
            //                        {
            //                            rpta = cbt.CodCopagoFijo + "-" + responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                            result.codCobertura = cbt.CodigoCobertura;
            //                            result.desCobertura = cbt.Beneficios;
            //                            result.monto = cbt.CodCopagoFijo;
            //                            result.codTipoMoneda = responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                            break;
            //                        }
            //                        if (seg == "AM10" && cbt.CodigoCobertura == "4245")
            //                        {
            //                            rpta = cbt.CodCopagoFijo + "-" + responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                            result.codCobertura = cbt.CodigoCobertura;
            //                            result.desCobertura = cbt.Beneficios;
            //                            result.monto = cbt.CodCopagoFijo;
            //                            result.codTipoMoneda = responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                            break;
            //                        }
            //                        if (seg == "18200001" && cbt.CodigoCobertura == "4100")
            //                        {
            //                            rpta = cbt.CodCopagoFijo + "-" + responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                            result.codCobertura = cbt.CodigoCobertura;
            //                            result.desCobertura = cbt.Beneficios;
            //                            result.monto = cbt.CodCopagoFijo;
            //                            result.codTipoMoneda = responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                            break;
            //                        }
            //                        if (seg == "18300003" && cbt.CodigoCobertura == "4100")
            //                        {
            //                            rpta = cbt.CodCopagoFijo + "-" + responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                            result.codCobertura = cbt.CodigoCobertura;
            //                            result.desCobertura = cbt.Beneficios;
            //                            result.monto = cbt.CodCopagoFijo;
            //                            result.codTipoMoneda = responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                            break;
            //                        }
            //                        if (seg == "01" && cbt.CodigoCobertura == "4100")
            //                        {
            //                            rpta = cbt.CodCopagoFijo + "-" + responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                            result.codCobertura = cbt.CodigoCobertura;
            //                            result.desCobertura = cbt.Beneficios;
            //                            result.monto = cbt.CodCopagoFijo;
            //                            result.codTipoMoneda = responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                            break;
            //                        }
            //                        if (seg == "12300300" && cbt.CodigoCobertura == "4100")
            //                        {
            //                            rpta = cbt.CodCopagoFijo + "-" + responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                            result.codCobertura = cbt.CodigoCobertura;
            //                            result.desCobertura = cbt.Beneficios;
            //                            result.monto = cbt.CodCopagoFijo;
            //                            result.codTipoMoneda = responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                            break;
            //                        }
            //                        if (seg == "CANN" && cbt.CodigoCobertura == "4152")
            //                        {
            //                            rpta = cbt.CodCopagoFijo + "-" + responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                            result.codCobertura = cbt.CodigoCobertura;
            //                            result.desCobertura = cbt.Beneficios;
            //                            result.monto = cbt.CodCopagoFijo;
            //                            result.codTipoMoneda = responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                            break;
            //                        }
            //                        if (seg == "12300105" && cbt.CodigoCobertura == "4100")
            //                        {
            //                            rpta = cbt.CodCopagoFijo + "-" + responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                            result.codCobertura = cbt.CodigoCobertura;
            //                            result.desCobertura = cbt.Beneficios;
            //                            result.monto = cbt.CodCopagoFijo;
            //                            result.codTipoMoneda = responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                            break;
            //                        }
            //                    }

            //                }
            //                else //web api sent error response 
            //                {
            //                    result.wsError = true;
            //                    return result;
            //                }
            //            }
            //            else
            //            {
            //                result.vigente = false;
            //                return result;
            //            }
            //        }

            //    }

            //    return result;
            //}
            //catch (Exception e)
            //{
            //    Debug.WriteLine(e);
            //    return null;
            //}
        }
        public DatosResponseSited ConsultaSitedPrograma(int tipoDocumento, string numeroDocumento, string ruc, string sunasa, string iafas, string apellidoPaterno, string apellidoMaterno, string nombre, string codEspecialidad, string seguro, string cobertura, string rucSeguro)
        {
            throw new WebFaultException(HttpStatusCode.BadRequest);
            //try
            //{
            //    DatosResponseSited result = new DatosResponseSited();
            //    result.seguro = rucSeguro;
            //    result.iafas = iafas;
            //    result.monto = null;
            //    List<ConsultAsegNomResponse> listResponseOne = new List<ConsultAsegNomResponse>();
            //    ConsultAsegNomResponse responseOne = new ConsultAsegNomResponse();
            //    ConsultAsegCodResponse responseTwo = new ConsultAsegCodResponse();

            //    using (var client = new HttpClient())
            //    {
            //        client.BaseAddress = new Uri(ConfigurationManager.AppSettings["WS_SITED"].ToString());
            //        //HTTP POST
            //        ConsultAsegNom rqst = new ConsultAsegNom();
            //        rqst.CodTipoDocumentoAfiliado = tipoDocumento.ToString();
            //        rqst.NumeroDocumentoAfiliado = numeroDocumento;
            //        rqst.RUC = ruc;
            //        rqst.SUNASA = sunasa;
            //        rqst.IAFAS = iafas;
            //        if (tipoDocumento == 1)
            //        {
            //            rqst.NombresAfiliado = "";
            //            rqst.ApellidoPaternoAfiliado = "";
            //            rqst.ApellidoMaternoAfiliado = "";
            //        }
            //        else
            //        {
            //            rqst.NombresAfiliado = nombre;
            //            rqst.ApellidoPaternoAfiliado = apellidoPaterno;
            //            rqst.ApellidoMaternoAfiliado = apellidoMaterno;
            //            rqst.NumeroDocumentoAfiliado = "";
            //        }
            //        rqst.CodEspecialidad = "";
            //        var content = new StringContent(JsonConvert.SerializeObject(rqst).ToString(), Encoding.UTF8, "application/json");
            //        var responseTaskOne = client.PostAsync("Sistema/ConsultaAsegNom ", content);
            //        responseTaskOne.Wait();
            //        Debug.WriteLine(rqst.IAFAS);

            //        var resultOne = responseTaskOne.Result;
            //        if (resultOne.IsSuccessStatusCode)
            //        {
            //            result.wsError = false;
            //            var readTaskOne = resultOne.Content.ReadAsStringAsync();
            //            readTaskOne.Wait();
            //            if (readTaskOne.Result.Length > 2 && readTaskOne.Result != "[]")
            //            {
            //                Debug.WriteLine(readTaskOne.Result);
            //                listResponseOne = JsonConvert.DeserializeObject<List<ConsultAsegNomResponse>>(readTaskOne.Result);

            //                Debug.WriteLine(seguro);

            //            }

            //        }
            //        else //web api sent error response 
            //        {
            //            result.wsError = true;
            //            return result;
            //        }
            //        foreach (var prod in listResponseOne)
            //        {
            //            result.codProducto = prod.CodProducto;
            //            result.desProducto = prod.DesProducto;
            //            if (prod.DesEstado == "VIGENTE")
            //            {
            //                result.codAsegurado = prod.CodigoAfiliado;
            //                result.vigente = true;
            //                var seg = prod.CodProducto;
            //                ConsultAsegCod rqstTwo = new ConsultAsegCod();
            //                rqstTwo.SUNASA = sunasa;
            //                rqstTwo.IAFAS = iafas;
            //                rqstTwo.RUC = ruc;
            //                rqstTwo.NombresAfiliado = prod.NombresAfiliado;
            //                rqstTwo.ApellidoPaternoAfiliado = prod.ApellidoPaternoAfiliado;
            //                rqstTwo.ApellidoMaternoAfiliado = prod.ApellidoMaternoAfiliado;
            //                rqstTwo.CodigoAfiliado = prod.CodigoAfiliado;
            //                rqstTwo.CodTipoDocumentoAfiliado = prod.CodTipoDocumentoAfiliado;
            //                rqstTwo.NumeroDocumentoAfiliado = prod.NumeroDocumentoAfiliado;
            //                rqstTwo.CodProducto = prod.CodProducto;
            //                rqstTwo.DesProducto = prod.DesProducto;
            //                rqstTwo.NumeroPlan = prod.NumeroPlan;
            //                rqstTwo.CodTipoDocumentoContratante = prod.CodTipoDocumentoContratante;
            //                rqstTwo.NumeroDocumentoContratante = prod.NumeroDocumentoContratante;
            //                rqstTwo.NombreContratante = prod.NombreContratante;
            //                rqstTwo.CodParentesco = prod.CodParentesco;
            //                rqstTwo.TipoCalificadorContratante = prod.TipoCalificadorContratante;
            //                rqstTwo.CodEspecialidad = "";
            //                Debug.WriteLine(JsonConvert.SerializeObject(rqstTwo).ToString());
            //                var contentTwo = new StringContent(JsonConvert.SerializeObject(rqstTwo).ToString(), Encoding.UTF8, "application/json");
            //                var responseTaskTwo = client.PostAsync("Sistema/ConsultaAsegCod", contentTwo);
            //                responseTaskTwo.Wait();

            //                var resultTwo = responseTaskTwo.Result;
            //                if (resultTwo.IsSuccessStatusCode)
            //                {
            //                    result.wsError = false;
            //                    var readTaskTwo = resultTwo.Content.ReadAsStringAsync();
            //                    readTaskTwo.Wait();
            //                    Debug.WriteLine(readTaskTwo.Result);
            //                    if (readTaskTwo.Result.Length > 2 && readTaskTwo.Result != "[]")
            //                    {
            //                        responseTwo = JsonConvert.DeserializeObject<ConsultAsegCodResponse>(readTaskTwo.Result);

            //                        //Debug.WriteLine(responseTwo.Coberturas[0].CodCopagoFijo);


            //                    }
            //                    var filterCobert = responseTwo.Coberturas.FirstOrDefault(x => x.CodigoCobertura == cobertura);
            //                    if (filterCobert != null)
            //                    {
            //                        result.codCobertura = filterCobert.CodigoCobertura;
            //                        result.desCobertura = filterCobert.Beneficios;
            //                        result.monto = filterCobert.CodCopagoFijo;
            //                        result.codTipoMoneda = responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                        break;
            //                    }

            //                }
            //                else //web api sent error response 
            //                {
            //                    result.wsError = true;

            //                }
            //            }
            //            else
            //            {
            //                result.vigente = false;

            //            }
            //        }


            //    }

            //    return result;
            //}
            //catch (Exception e)
            //{
            //    Debug.WriteLine(e);
            //    return null;
            //}
        }
        public RespuestaBE<List<DataResponseLaboratorio>> ObtenerResultados(string tipoDocumento, string numeroDocumento)
        {
            throw new WebFaultException(HttpStatusCode.BadRequest);
            //Debug.WriteLine(numeroDocumento);
            //#region Validacion de Parámetros
            //if (string.IsNullOrEmpty(tipoDocumento) && string.IsNullOrEmpty(numeroDocumento))
            //{
            //    throw new WebFaultException(HttpStatusCode.BadRequest);
            //}


            //#endregion

            //var date = DateTime.Today;
            //var firstDayOfMonth = new DateTime(date.Year, date.Month, 1);
            //var lastDayOfMonth = firstDayOfMonth.AddMonths(1).AddDays(-1);
            //var year = DateTime.Now.Year.ToString();
            //var month = (DateTime.Now.Month < 10) ? "0" + DateTime.Now.Month.ToString() : DateTime.Now.Month.ToString();
            //var dayStart = (firstDayOfMonth.Day < 10) ? "0" + firstDayOfMonth.Day.ToString() : firstDayOfMonth.Day.ToString();
            //var dayEnd = (lastDayOfMonth.Day < 10) ? "0" + lastDayOfMonth.Day.ToString() : lastDayOfMonth.Day.ToString();
            //// var resultados = ObtenerResultadosWS(tipoDocumento, numeroDocumento, year + month+ dayStart, year + month + dayEnd);


            //return ObtenerResultadosTabla(tipoDocumento, numeroDocumento);

            ///*
            //if (resultados.codigo == "222")
            //{
            //    return new RespuestaBE<List<DataResponseLaboratorio>>()
            //    {
            //        rpt = 0,
            //        mensaje = "",
            //        data = new  List <DataResponseLaboratorio> ()
            //    };
            //}
            //if (resultados.codigo != "000")
            //{
            //    return new RespuestaBE<List<DataResponseLaboratorio>>()
            //    {
            //        rpt = 2,
            //        mensaje = "No se pueden obtener los resultados, intentelo mas tarde",
            //        data = null
            //    };
            //}
            //try
            //{
            //    return new RespuestaBE<List<DataResponseLaboratorio>>()
            //    {
            //        rpt = 0,
            //        mensaje = "",
            //        data = resultados.data
            //    };
            //}
            //catch (Exception ex)
            //{
            //    return new ErrorDA().RegistrarError<List<DataResponseLaboratorio>>(ex, "WS", "Cita.svc");
            //}
            //*/
        }
        public RespuestaBE<ResultadoLaboratorio> ObtenerResultadosDocumento(string peticion)
        {
            throw new WebFaultException(HttpStatusCode.BadRequest);
            //Debug.WriteLine(peticion);
            //#region Validacion de Parámetros
            //if (string.IsNullOrEmpty(peticion))
            //{
            //    throw new WebFaultException(HttpStatusCode.BadRequest);
            //}


            //#endregion

            //SqlDA oSqlDA = new SqlDA();
            //String data = oSqlDA.EjecutarComando("uspCitaHistoricaPeticiones_Listar", "@lstParametros", peticion);
            //String[] lPeticion = !String.IsNullOrEmpty(data) ? data.Split('¬') : new String[0];
            //int i = 0, nPeticiones = lPeticion.Length;
            //String base64, mensaje = "";
            //OrdenAtencionResponse resultados;
            //int rpt = 0;
            //ResultadoLaboratorio rl;
            //List<byte[]> lBuffer = new List<byte[]>();
            //for (; i < nPeticiones; i++)
            //{
            //    peticion = lPeticion[i];
            //    resultados = ObtenerResultadosDocumentoWS(peticion);
            //    rl = new ResultadoLaboratorio();
            //    if (resultados.codigo == "800" && String.IsNullOrEmpty(mensaje))
            //    {
            //        rpt = 2;
            //        mensaje = "Peticion sin informe";
            //    }
            //    if (resultados.codigo != "000" && String.IsNullOrEmpty(mensaje))
            //    {
            //        rpt = 2;
            //        mensaje = "No se pueden obtener los resultados, intentelo mas tarde";
            //    }
            //    else
            //    {
            //        rl.documento = resultados.archivoBinario;
            //    }

            //    if (!String.IsNullOrEmpty(rl.documento))
            //    {
            //        lBuffer.Add(Convert.FromBase64String(rl.documento));
            //    }
            //}

            //if (lBuffer.Count > 0)
            //{
            //    try
            //    {
            //        rl = new ResultadoLaboratorio();
            //        if (lBuffer.Count == 1)
            //        {
            //            rl.documento = Convert.ToBase64String(lBuffer[0]);
            //        }
            //        else
            //        {
            //            rl.documento = Convert.ToBase64String(DocumentPDF.MergeFiles(lBuffer));
            //        }
            //        return new RespuestaBE<ResultadoLaboratorio>()
            //        {
            //            rpt = 0,
            //            mensaje = "",
            //            data = rl
            //        };
            //    }
            //    catch (Exception ex)
            //    {
            //        return new ErrorDA().RegistrarError<ResultadoLaboratorio>(ex, "WS", "Cita.svc");
            //    }
            //}
            //else
            //{
            //    return new RespuestaBE<ResultadoLaboratorio>()
            //    {
            //        rpt = rpt,
            //        mensaje = mensaje,
            //        data = null
            //    };
            //}
            ///*
            //var resultados = ObtenerResultadosDocumentoWS(peticion);
            //ResultadoLaboratorio rl = new ResultadoLaboratorio();
            ////var resultados = new ResponseLaboratorio();
            //if (resultados.codigo == "800")
            //{
            //    return new RespuestaBE<ResultadoLaboratorio>()
            //    {
            //        rpt = 2,
            //        mensaje = "Peticion sin informe",
            //        data = null
            //    };
            //}
            //if (resultados.codigo != "000")
            //{
            //    return new RespuestaBE<ResultadoLaboratorio>()
            //    {
            //        rpt = 2,
            //        mensaje = "No se pueden obtener los resultados, intentelo mas tarde",
            //        data = null
            //    };
            //}
            //else
            //{
            //    rl.documento = resultados.archivoBinario;
            //}
            //try
            //{
            //    return new RespuestaBE<ResultadoLaboratorio>()
            //    {
            //        rpt = 0,
            //        mensaje = "",
            //        data = rl
            //    };
            //}
            //catch (Exception ex)
            //{
            //    return new ErrorDA().RegistrarError<ResultadoLaboratorio>(ex, "WS", "Cita.svc");
            //}
            //*/
        }
        public ResponseLaboratorio ObtenerResultadosWS(string tipoDocumento, string numeroDocumento, string fechaInicio, string fechaFin)
        {
            throw new WebFaultException(HttpStatusCode.BadRequest);
            //try
            //{
            //    Debug.WriteLine(numeroDocumento);

            //    ResponseLaboratorio response = new ResponseLaboratorio();
            //    Debug.WriteLine("Chill");
            //    using (var client = new HttpClient())
            //    {
            //        client.BaseAddress = new Uri(ConfigurationManager.AppSettings["WS_LAB"].ToString());

            //        Debug.WriteLine("Chill2");
            //        string tD = (tipoDocumento == "1") ? "D" : (tipoDocumento == "2") ? "X" : (tipoDocumento == "3") ? "P" : "Q";

            //        Debug.WriteLine("Chill3");
            //        client.DefaultRequestHeaders.Add("uid-header", "uprecisa");
            //        client.DefaultRequestHeaders.Add("pwd-header", "pPr3c1s4@@2020");
            //        var responseTaskOne = client.GetAsync("ws-resultados/obtenerResultados/" + tD + "/" + numeroDocumento + "/" + fechaInicio + "/" + fechaFin);
            //        responseTaskOne.Wait();
            //        Debug.WriteLine("Chill4");
            //        var resultOne = responseTaskOne.Result;
            //        Debug.WriteLine(resultOne.StatusCode);
            //        if (resultOne.IsSuccessStatusCode)
            //        {
            //            var readTaskOne = resultOne.Content.ReadAsStringAsync();
            //            readTaskOne.Wait();
            //            Debug.WriteLine(readTaskOne.Result);
            //            var settings = new JsonSerializerSettings
            //            {
            //                NullValueHandling = NullValueHandling.Ignore,
            //                MissingMemberHandling = MissingMemberHandling.Ignore
            //            };
            //            response = JsonConvert.DeserializeObject<ResponseLaboratorio>(readTaskOne.Result, settings);


            //        }
            //        else //web api sent error response 
            //        {
            //            return null;
            //        }


            //    }
            //    return response;

            //}
            //catch (Exception ex)
            //{
            //    Debug.WriteLine("Error");
            //    Debug.WriteLine(ex.Message);
            //    return null;
            //}

        }
        public OrdenAtencionResponse ObtenerResultadosDocumentoWS(string peticion)
        {
            throw new WebFaultException(HttpStatusCode.BadRequest);
            //OrdenAtencionResponse oOrdenAtencionResponse = new OrdenAtencionResponse();
            //oOrdenAtencionResponse.codigo = "001";
            //try
            //{
            //    System.Net.ServicePointManager.SecurityProtocol = System.Net.SecurityProtocolType.Tls12;

            //    Service1 servicio = new Service1();

            //    clSeguridad seguridad = new clSeguridad();
            //    seguridad.stToken = ConfigurationManager.AppSettings["stToken"];
            //    servicio.clSeguridadValue = seguridad;

            //    string stUsuarioPrecisa = ConfigurationManager.AppSettings["PrecisaUserServicePdf"];
            //    string stClavePrecisa = ConfigurationManager.AppSettings["PrecisaPasswordServicePdf"];

            //    CERetorno[] reponsePdf = servicio.SrvResultadoPdf(stUsuarioPrecisa, stClavePrecisa, peticion);

            //    if (reponsePdf != null && reponsePdf.Length > 0)
            //    {
            //        if (reponsePdf[0].CodError.Equals("0"))
            //        {


            //            oOrdenAtencionResponse.codigo = "000";
            //            oOrdenAtencionResponse.archivoBinario = reponsePdf[0].Resultado;
            //            oOrdenAtencionResponse.mensaje = "";
            //        }

            //    }


            //    return oOrdenAtencionResponse;

            //}
            //catch (Exception ex)
            //{
            //    Debug.WriteLine("Error");
            //    Debug.WriteLine(ex.Message);
            //    return null;
            //}

        }
        public bool WebServiceTest(string idCita)
        {
            throw new WebFaultException(HttpStatusCode.BadRequest);
            //RespuestaRoyal estados = new RespuestaRoyal();
            //try
            //{


            //    var preDatos = new CitaDA().DatosCitaSeguro(idCita, 1);
            //    List<ConsultAsegNomResponse> listResponseOne = new List<ConsultAsegNomResponse>();
            //    ConsultAsegNomResponse responseOne = new ConsultAsegNomResponse();
            //    ConsultAsegCodResponse responseTwo = new ConsultAsegCodResponse();
            //    ConsultaObservacionResponse responseThree = new ConsultaObservacionResponse();
            //    ConsultaDatosAdicionalesResponse responseFour = new ConsultaDatosAdicionalesResponse();
            //    ConsultaCondicionMedicaResponse responseFive = new ConsultaCondicionMedicaResponse();
            //    ObtenerFotoResponse responseSix = new ObtenerFotoResponse();
            //    ObtenerNumeroAutorizacionResponse responseSeven = new ObtenerNumeroAutorizacionResponse();
            //    ConsultaProcedimientosEspecialesResponse responseEight = new ConsultaProcedimientosEspecialesResponse();
            //    Cobertura cobertura = new Cobertura();

            //    if (!string.IsNullOrEmpty(preDatos.codProducto) && !string.IsNullOrEmpty(preDatos.codCobertura))
            //    {
            //        estados.idCitaConSeguro = true;
            //        using (var client = new HttpClient())
            //        {

            //            //WS 1
            //            client.BaseAddress = new Uri(ConfigurationManager.AppSettings["WS_SITED"].ToString());
            //            //HTTP POST
            //            ConsultAsegNom rqst = new ConsultAsegNom();
            //            rqst.CodTipoDocumentoAfiliado = preDatos.tipoDocumento;
            //            rqst.NumeroDocumentoAfiliado = preDatos.numeroDocumento;
            //            rqst.RUC = preDatos.rucClinica;
            //            rqst.SUNASA = preDatos.codigoSunasa;
            //            rqst.IAFAS = preDatos.iafas;
            //            rqst.NombresAfiliado = "";
            //            rqst.ApellidoPaternoAfiliado = "";
            //            rqst.ApellidoMaternoAfiliado = "";
            //            rqst.CodEspecialidad = "";
            //            Debug.WriteLine("Request");
            //            Debug.WriteLine(JsonConvert.SerializeObject(rqst).ToString());
            //            var content = new StringContent(JsonConvert.SerializeObject(rqst).ToString(), Encoding.UTF8, "application/json");
            //            var responseTaskOne = client.PostAsync("Sistema/ConsultaAsegNom ", content);
            //            responseTaskOne.Wait();

            //            var resultOne = responseTaskOne.Result;
            //            if (resultOne.IsSuccessStatusCode)
            //            {

            //                estados.wsConsultaAsegNom = true;
            //                var readTaskOne = resultOne.Content.ReadAsStringAsync();
            //                readTaskOne.Wait();
            //                if (readTaskOne.Result.Length > 2 && readTaskOne.Result != "[]")
            //                {
            //                    Debug.WriteLine("Response");
            //                    Debug.WriteLine(readTaskOne.Result);
            //                    listResponseOne = JsonConvert.DeserializeObject<List<ConsultAsegNomResponse>>(readTaskOne.Result);

            //                    listResponseOne = listResponseOne.Where(x => x.CodProducto == preDatos.codProducto).ToList();
            //                    if (listResponseOne.Where(x => x.DesEstado == "VIGENTE").ToList().Count > 0)
            //                    {
            //                        estados.vigente = true;
            //                        responseOne = listResponseOne.FirstOrDefault(x => x.DesEstado == "VIGENTE");
            //                    }
            //                    else
            //                    {
            //                        estados.vigente = false;
            //                    }



            //                }

            //            }
            //            else //web api sent error response 
            //            {
            //                estados.wsConsultaAsegNom = false;

            //            }
            //            //WS 2

            //            if (responseOne != null)
            //            {
            //                if (responseOne.DesEstado == "VIGENTE")
            //                {
            //                    var seg = responseOne.CodProducto;
            //                    ConsultAsegCod rqstTwo = new ConsultAsegCod();
            //                    rqstTwo.SUNASA = preDatos.codigoSunasa;
            //                    rqstTwo.IAFAS = preDatos.iafas;
            //                    rqstTwo.RUC = preDatos.rucClinica;
            //                    rqstTwo.NombresAfiliado = responseOne.NombresAfiliado;
            //                    rqstTwo.ApellidoPaternoAfiliado = responseOne.ApellidoPaternoAfiliado;
            //                    rqstTwo.ApellidoMaternoAfiliado = responseOne.ApellidoMaternoAfiliado;
            //                    rqstTwo.CodigoAfiliado = responseOne.CodigoAfiliado;
            //                    rqstTwo.CodTipoDocumentoAfiliado = responseOne.CodTipoDocumentoAfiliado;
            //                    rqstTwo.NumeroDocumentoAfiliado = responseOne.NumeroDocumentoAfiliado;
            //                    rqstTwo.CodProducto = responseOne.CodProducto;
            //                    rqstTwo.DesProducto = responseOne.DesProducto;
            //                    rqstTwo.NumeroPlan = responseOne.NumeroPlan;
            //                    rqstTwo.CodTipoDocumentoContratante = responseOne.CodTipoDocumentoContratante;
            //                    rqstTwo.NumeroDocumentoContratante = responseOne.NumeroDocumentoContratante;
            //                    rqstTwo.NombreContratante = responseOne.NombreContratante;
            //                    rqstTwo.CodParentesco = responseOne.CodParentesco;
            //                    rqstTwo.TipoCalificadorContratante = responseOne.TipoCalificadorContratante;
            //                    rqstTwo.CodEspecialidad = "";
            //                    Debug.WriteLine("Request");
            //                    Debug.WriteLine(JsonConvert.SerializeObject(rqstTwo).ToString());
            //                    var contentTwo = new StringContent(JsonConvert.SerializeObject(rqstTwo).ToString(), Encoding.UTF8, "application/json");
            //                    var responseTaskTwo = client.PostAsync("Sistema/ConsultaAsegCod", contentTwo);
            //                    responseTaskTwo.Wait();

            //                    var resultTwo = responseTaskTwo.Result;
            //                    if (resultTwo.IsSuccessStatusCode)
            //                    {
            //                        estados.wsConsultaAsegCod = true;

            //                        var readTaskTwo = resultTwo.Content.ReadAsStringAsync();
            //                        readTaskTwo.Wait();
            //                        Debug.WriteLine("Response");
            //                        Debug.WriteLine(readTaskTwo.Result);
            //                        if (readTaskTwo.Result.Length > 2 && readTaskTwo.Result != "[]")
            //                        {
            //                            responseTwo = JsonConvert.DeserializeObject<ConsultAsegCodResponse>(readTaskTwo.Result);

            //                            //Debug.WriteLine(responseTwo.Coberturas[0].CodCopagoFijo);


            //                        }
            //                        foreach (Cobertura cbt in responseTwo.Coberturas)
            //                        {
            //                            if (cbt.CodigoCobertura == preDatos.codCobertura)
            //                            {
            //                                cobertura = cbt;
            //                                break;
            //                            }
            //                        }
            //                        estados.wsConsultaAsegCod = true;

            //                    }
            //                    else //web api sent error response 
            //                    {
            //                        estados.wsConsultaAsegCod = false;

            //                    }
            //                }
            //            }

            //            if (responseOne != null)
            //            {
            //                if (responseOne.DesEstado == "VIGENTE")
            //                {

            //                    var seg = responseOne.CodProducto;
            //                    ConsultaObservacionRequest rqstThree = new ConsultaObservacionRequest();
            //                    rqstThree.SUNASA = preDatos.codigoSunasa;
            //                    rqstThree.IAFAS = preDatos.iafas;
            //                    rqstThree.RUC = preDatos.rucClinica;
            //                    rqstThree.NombresAfiliado = responseOne.NombresAfiliado;
            //                    rqstThree.ApellidoPaternoAfiliado = responseOne.ApellidoPaternoAfiliado;
            //                    rqstThree.ApellidoMaternoAfiliado = responseOne.ApellidoMaternoAfiliado;
            //                    rqstThree.CodigoAfiliado = responseOne.CodigoAfiliado;
            //                    rqstThree.CodTipoDocumentoAfiliado = responseOne.CodTipoDocumentoAfiliado.ToString();
            //                    rqstThree.NumeroDocumentoAfiliado = responseOne.NumeroDocumentoAfiliado;
            //                    rqstThree.CodProducto = responseOne.CodProducto;
            //                    rqstThree.DesProducto = responseOne.DesProducto;
            //                    rqstThree.NumeroPlan = responseOne.NumeroPlan;
            //                    rqstThree.CodTipoDocumentoContratante = responseOne.CodTipoDocumentoContratante.ToString();
            //                    rqstThree.NumeroDocumentoContratante = responseOne.NumeroDocumentoContratante;
            //                    rqstThree.NombreContratante = responseOne.NombreContratante;
            //                    rqstThree.CodParentesco = responseOne.CodParentesco.ToString();
            //                    rqstThree.TipoCalificadorContratante = responseOne.TipoCalificadorContratante.ToString();
            //                    rqstThree.CodEspecialidad = "";
            //                    Debug.WriteLine("Request");
            //                    Debug.WriteLine(JsonConvert.SerializeObject(rqstThree).ToString());
            //                    var contentThree = new StringContent(JsonConvert.SerializeObject(rqstThree).ToString(), Encoding.UTF8, "application/json");
            //                    var responseTaskThree = client.PostAsync("Sistema/ConsultaObservacion", contentThree);
            //                    responseTaskThree.Wait();

            //                    var resultThree = responseTaskThree.Result;
            //                    if (resultThree.IsSuccessStatusCode)
            //                    {

            //                        estados.wsConsultaObservacion = true;
            //                        var readTaskThree = resultThree.Content.ReadAsStringAsync();
            //                        readTaskThree.Wait();
            //                        Debug.WriteLine("Response");
            //                        Debug.WriteLine(readTaskThree.Result);
            //                        if (readTaskThree.Result.Length > 2 && readTaskThree.Result != "[]")
            //                        {
            //                            responseThree = JsonConvert.DeserializeObject<ConsultaObservacionResponse>(readTaskThree.Result);

            //                            //Debug.WriteLine(responseTwo.Coberturas[0].CodCopagoFijo);


            //                        }
            //                        estados.wsConsultaObservacion = true;

            //                    }
            //                    else //web api sent error response 
            //                    {
            //                        estados.wsConsultaObservacion = false;

            //                    }
            //                }
            //            }
            //            if (responseOne != null)
            //            {
            //                if (responseOne.DesEstado == "VIGENTE")
            //                {
            //                    var seg = responseOne.CodProducto;
            //                    ConsultaDatosAdicionalesRequest rqstFour = new ConsultaDatosAdicionalesRequest();
            //                    rqstFour.SUNASA = preDatos.codigoSunasa;
            //                    rqstFour.IAFAS = preDatos.iafas;
            //                    rqstFour.RUC = preDatos.rucClinica;
            //                    rqstFour.NombresAfiliado = responseOne.NombresAfiliado;
            //                    rqstFour.ApellidoPaternoAfiliado = responseOne.ApellidoPaternoAfiliado;
            //                    rqstFour.ApellidoMaternoAfiliado = responseOne.ApellidoMaternoAfiliado;
            //                    rqstFour.CodigoAfiliado = responseOne.CodigoAfiliado;
            //                    rqstFour.CodTipoDocumentoAfiliado = responseOne.CodTipoDocumentoAfiliado.ToString();
            //                    rqstFour.NumeroDocumentoAfiliado = responseOne.NumeroDocumentoAfiliado;
            //                    rqstFour.CodProducto = responseOne.CodProducto;
            //                    rqstFour.DesProducto = responseOne.DesProducto;
            //                    rqstFour.NumeroPlan = responseOne.NumeroPlan;
            //                    rqstFour.CodTipoDocumentoContratante = responseOne.CodTipoDocumentoContratante.ToString();
            //                    rqstFour.NumeroDocumentoContratante = responseOne.NumeroDocumentoContratante;
            //                    rqstFour.NombreContratante = responseOne.NombreContratante;
            //                    rqstFour.CodParentesco = responseOne.CodParentesco.ToString();
            //                    rqstFour.TipoCalificadorContratante = responseOne.TipoCalificadorContratante.ToString();
            //                    rqstFour.CodEspecialidad = "";
            //                    Debug.WriteLine("Request");
            //                    Debug.WriteLine(JsonConvert.SerializeObject(rqstFour).ToString());
            //                    var contentFour = new StringContent(JsonConvert.SerializeObject(rqstFour).ToString(), Encoding.UTF8, "application/json");
            //                    var responseTaskFour = client.PostAsync("Sistema/ConsultaDatosAdicionales", contentFour);
            //                    responseTaskFour.Wait();

            //                    var resultFour = responseTaskFour.Result;
            //                    if (resultFour.IsSuccessStatusCode)
            //                    {
            //                        estados.wsConsultaDatosAdicionales = true;

            //                        var readTaskFour = resultFour.Content.ReadAsStringAsync();
            //                        readTaskFour.Wait();
            //                        Debug.WriteLine("Response");
            //                        Debug.WriteLine(readTaskFour.Result);
            //                        if (readTaskFour.Result.Length > 2 && readTaskFour.Result != "[]")
            //                        {
            //                            responseFour = JsonConvert.DeserializeObject<ConsultaDatosAdicionalesResponse>(readTaskFour.Result);

            //                            //Debug.WriteLine(responseTwo.Coberturas[0].CodCopagoFijo);


            //                        }
            //                        estados.wsConsultaDatosAdicionales = true;

            //                    }
            //                    else //web api sent error response 
            //                    {
            //                        estados.wsConsultaDatosAdicionales = false;

            //                    }
            //                }
            //            }
            //            if (responseOne != null)
            //            {
            //                if (responseOne.DesEstado == "VIGENTE")
            //                {
            //                    var seg = responseOne.CodProducto;
            //                    ConsultaCondicionMedicaRequest rqstFive = new ConsultaCondicionMedicaRequest();
            //                    rqstFive.SUNASA = preDatos.codigoSunasa;
            //                    rqstFive.IAFAS = preDatos.iafas;
            //                    rqstFive.RUC = preDatos.rucClinica;
            //                    rqstFive.NombresAfiliado = responseOne.NombresAfiliado;
            //                    rqstFive.ApellidoPaternoAfiliado = responseOne.ApellidoPaternoAfiliado;
            //                    rqstFive.ApellidoMaternoAfiliado = responseOne.ApellidoMaternoAfiliado;
            //                    rqstFive.CodigoAfiliado = responseOne.CodigoAfiliado;
            //                    rqstFive.CodTipoDocumentoAfiliado = responseOne.CodTipoDocumentoAfiliado.ToString();
            //                    rqstFive.NumeroDocumentoAfiliado = responseOne.NumeroDocumentoAfiliado;
            //                    rqstFive.CodProducto = responseOne.CodProducto;
            //                    rqstFive.DesProducto = responseOne.DesProducto;
            //                    rqstFive.NumeroPlan = responseOne.NumeroPlan;
            //                    rqstFive.CodTipoDocumentoContratante = responseOne.CodTipoDocumentoContratante.ToString();
            //                    rqstFive.NumeroDocumentoContratante = responseOne.NumeroDocumentoContratante;
            //                    rqstFive.NombreContratante = responseOne.NombreContratante;
            //                    rqstFive.CodParentesco = responseOne.CodParentesco.ToString();
            //                    rqstFive.TipoCalificadorContratante = responseOne.TipoCalificadorContratante.ToString();
            //                    rqstFive.CodEspecialidad = "";
            //                    Debug.WriteLine("Request");
            //                    Debug.WriteLine(JsonConvert.SerializeObject(rqstFive).ToString());
            //                    var contentFive = new StringContent(JsonConvert.SerializeObject(rqstFive).ToString(), Encoding.UTF8, "application/json");
            //                    var responseTaskFive = client.PostAsync("Sistema/ConsultaCondicionMedica", contentFive);
            //                    responseTaskFive.Wait();

            //                    var resultFive = responseTaskFive.Result;
            //                    if (resultFive.IsSuccessStatusCode)
            //                    {
            //                        estados.wsConsultaCondicionMedica = true;

            //                        var readTaskFive = resultFive.Content.ReadAsStringAsync();
            //                        readTaskFive.Wait();
            //                        Debug.WriteLine("Response");
            //                        Debug.WriteLine(readTaskFive.Result);
            //                        if (readTaskFive.Result.Length > 2 && readTaskFive.Result != "[]")
            //                        {
            //                            /*JsonSerializerSettings JsonSettings = new JsonSerializerSettings
            //                            {
            //                                Formatting = Formatting.Indented,
            //                                NullValueHandling = NullValueHandling.Ignore,
            //                                DefaultValueHandling = DefaultValueHandling.Ignore,
            //                                ReferenceLoopHandling = ReferenceLoopHandling.Ignore
            //                            };*/
            //                            responseFive = JsonConvert.DeserializeObject<ConsultaCondicionMedicaResponse>(readTaskFive.Result);

            //                            //Debug.WriteLine(responseTwo.Coberturas[0].CodCopagoFijo);


            //                        }
            //                        estados.wsConsultaCondicionMedica = true;

            //                    }
            //                    else //web api sent error response 
            //                    {
            //                        estados.wsConsultaCondicionMedica = false;

            //                    }
            //                }
            //            }
            //            if (responseOne != null)
            //            {
            //                if (responseOne.DesEstado == "VIGENTE")
            //                {
            //                    try
            //                    {
            //                        var seg = responseOne.CodProducto;
            //                        ObtenerFotoRequest rqstSix = new ObtenerFotoRequest();
            //                        rqstSix.Iafas = preDatos.iafas;
            //                        rqstSix.CodigoAfiliado = responseOne.CodigoAfiliado;
            //                        rqstSix.CodFechaActualizacionFoto = responseTwo.DatosAfiliado.CodFechaActualizacionFoto;
            //                        Debug.WriteLine("Request");
            //                        Debug.WriteLine(JsonConvert.SerializeObject(rqstSix).ToString());
            //                        var contentSix = new StringContent(JsonConvert.SerializeObject(rqstSix).ToString(), Encoding.UTF8, "application/json");
            //                        var responseTaskSix = client.PostAsync("Sistema/ObtenerFoto", contentSix);
            //                        responseTaskSix.Wait();

            //                        var resultSix = responseTaskSix.Result;
            //                        if (resultSix.IsSuccessStatusCode)
            //                        {
            //                            estados.wsObtenerFoto = true;

            //                            var readTaskSix = resultSix.Content.ReadAsStringAsync();
            //                            readTaskSix.Wait();
            //                            Debug.WriteLine("Response");
            //                            Debug.WriteLine(readTaskSix.Result);
            //                            if (readTaskSix.Result.Length > 2 && readTaskSix.Result != "[]")
            //                            {
            //                                responseSix = JsonConvert.DeserializeObject<ObtenerFotoResponse>(readTaskSix.Result);

            //                                //Debug.WriteLine(responseTwo.Coberturas[0].CodCopagoFijo);


            //                            }
            //                            estados.wsObtenerFoto = true;

            //                        }
            //                        else //web api sent error response 
            //                        {
            //                            estados.wsObtenerFoto = false;

            //                        }
            //                    }
            //                    catch (Exception)
            //                    {
            //                        estados.wsObtenerFoto = false;
            //                    }

            //                }
            //            }
            //            if (responseOne != null)
            //            {
            //                if (responseOne.DesEstado == "VIGENTE")
            //                {
            //                    var seg = responseOne.CodProducto;
            //                    ObtenerNumeroAutorizacionRequest rqstSeven = new ObtenerNumeroAutorizacionRequest();
            //                    rqstSeven.ApellidoMaternoAfiliado = responseTwo.DatosAfiliado.ApellidoMaternoAfiliado;
            //                    rqstSeven.ApellidoPaternoAfiliado = responseTwo.DatosAfiliado.ApellidoPaternoAfiliado;
            //                    rqstSeven.BeneficioMaximoInicial = cobertura.BeneficioMaximoInicial;
            //                    rqstSeven.CodigoAfiliado = responseTwo.DatosAfiliado.CodigoAfiliado;
            //                    rqstSeven.CodigoTitular = responseTwo.DatosAfiliado.CodigoTitular;
            //                    rqstSeven.CodCalificacionServicio = cobertura.CodCalificacionServicio;
            //                    rqstSeven.CodEstado = responseTwo.DatosAfiliado.CodEstado.ToString();
            //                    rqstSeven.CodEspecialidad = "";
            //                    rqstSeven.CodMoneda = responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                    rqstSeven.CodCopagoFijo = cobertura.CodCopagoFijo;
            //                    rqstSeven.CodCopagoVariable = cobertura.CodCopagoVariable;
            //                    rqstSeven.CodParentesco = responseTwo.DatosAfiliado.CodParentesco.ToString();
            //                    rqstSeven.CodProducto = responseTwo.DatosAfiliado.CodProducto;
            //                    rqstSeven.NumeroDocumentoContratante = responseTwo.DatosAfiliado.NumeroDocumentoContratante;
            //                    rqstSeven.CodSubTipoCobertura = cobertura.CodigoSubTipoCobertura;
            //                    rqstSeven.CodTipoCobertura = cobertura.CodigoTipoCobertura;
            //                    rqstSeven.CodTipoAfiliacion = responseTwo.DatosAfiliado.CodTipoAfiliacion.ToString();
            //                    rqstSeven.DesProducto = responseTwo.DatosAfiliado.DesProducto;
            //                    rqstSeven.CodEstadoMarital = responseTwo.DatosAfiliado.CodEstadoCivil;
            //                    rqstSeven.CodFechaFinCarencia = cobertura.CodFechaFinCarencia;
            //                    rqstSeven.CodFechaAfiliacion = responseTwo.DatosAfiliado.CodFechaAfiliacion;
            //                    rqstSeven.CodFechaInicioVigencia = responseTwo.DatosAfiliado.CodFechaInicioVigencia;
            //                    rqstSeven.CodFechaNacimiento = responseTwo.DatosAfiliado.CodFechaNacimiento;
            //                    rqstSeven.CodGenero = responseTwo.DatosAfiliado.CodGenero.ToString();
            //                    rqstSeven.SUNASA = preDatos.codigoSunasa;
            //                    rqstSeven.IAFAS = preDatos.iafas;
            //                    rqstSeven.CondicionesEspeciales = cobertura.CondicionesEspeciales;
            //                    rqstSeven.ApellidoMaternoTitular = responseTwo.DatosAfiliado.ApellidoMaternoTitular;
            //                    rqstSeven.NombreContratante = responseTwo.DatosAfiliado.NombreContratante;
            //                    rqstSeven.ApellidoPaternoTitular = responseTwo.DatosAfiliado.ApellidoPaternoTitular;
            //                    rqstSeven.NombresAfiliado = responseTwo.DatosAfiliado.NombresAfiliado;
            //                    rqstSeven.NombresTitular = responseTwo.DatosAfiliado.NombresTitular;
            //                    rqstSeven.NumeroCertificado = responseTwo.DatosAfiliado.NumeroCertificado;
            //                    rqstSeven.NumeroContrato = responseTwo.DatosAfiliado.NumeroContrato;
            //                    rqstSeven.NumeroDocumentoAfiliado = responseTwo.DatosAfiliado.NumeroDocumentoAfiliado;
            //                    rqstSeven.NumeroDocumentoTitular = responseTwo.DatosAfiliado.NumeroDocumentoTitular;
            //                    rqstSeven.NumeroPlan = responseTwo.DatosAfiliado.NumeroPlan;
            //                    rqstSeven.NumeroPoliza = responseTwo.DatosAfiliado.NumeroPoliza;
            //                    rqstSeven.RUC = preDatos.rucClinica;
            //                    rqstSeven.CodTipoDocumentoContratante = responseTwo.DatosAfiliado.CodTipoDocumentoContratante.ToString();
            //                    rqstSeven.CodTipoDocumentoAfiliado = responseTwo.DatosAfiliado.CodTipoDocumentoAfiliado.ToString();
            //                    rqstSeven.CodTipoDocumentoTitular = responseTwo.DatosAfiliado.CodTipoDocumentoTitular.ToString();
            //                    rqstSeven.CodTipoPlan = responseTwo.DatosAfiliado.CodTipoPlan.ToString();
            //                    rqstSeven.CodIndicadorRestriccion = cobertura.CodIndicadorRestriccion;
            //                    rqstSeven.CodFechaActualizacionFoto = responseTwo.DatosAfiliado.CodFechaActualizacionFoto;
            //                    rqstSeven.CodTipoMoneda = responseTwo.DatosAfiliado.CodMoneda.ToString();
            //                    Debug.WriteLine("Request");
            //                    Debug.WriteLine(JsonConvert.SerializeObject(rqstSeven).ToString());
            //                    var contentSeven = new StringContent(JsonConvert.SerializeObject(rqstSeven).ToString(), Encoding.UTF8, "application/json");
            //                    var responseTaskSeven = client.PostAsync("Sistema/ConsultaNumeroAutorizacion", contentSeven);
            //                    responseTaskSeven.Wait();

            //                    var resultSeven = responseTaskSeven.Result;
            //                    Debug.WriteLine("Result cod Auth");
            //                    Debug.WriteLine(resultSeven.StatusCode);
            //                    if (resultSeven.IsSuccessStatusCode)
            //                    {
            //                        estados.wsObtenerNumeroAutorizacion = true;

            //                        var readTaskSeven = resultSeven.Content.ReadAsStringAsync();
            //                        readTaskSeven.Wait();
            //                        Debug.WriteLine("Response");
            //                        Debug.WriteLine(readTaskSeven.Result);
            //                        if (readTaskSeven.Result.Length > 2 && readTaskSeven.Result != "[]")
            //                        {
            //                            responseSeven = JsonConvert.DeserializeObject<ObtenerNumeroAutorizacionResponse>(readTaskSeven.Result);

            //                            //Debug.WriteLine(responseTwo.Coberturas[0].CodCopagoFijo);


            //                        }
            //                        estados.wsObtenerNumeroAutorizacion = true;

            //                    }
            //                    else //web api sent error response 
            //                    {
            //                        estados.wsObtenerNumeroAutorizacion = false;

            //                    }
            //                }
            //            }
            //            if (responseOne != null)
            //            {
            //                if (responseOne.DesEstado == "VIGENTE")
            //                {
            //                    var seg = responseOne.CodProducto;
            //                    ConsultaProcedimientosEspecialesRequest rqstEight = new ConsultaProcedimientosEspecialesRequest();
            //                    rqstEight.SUNASA = preDatos.codigoSunasa;
            //                    rqstEight.IAFAS = preDatos.iafas;
            //                    rqstEight.RUC = preDatos.rucClinica;
            //                    rqstEight.NombresAfiliado = responseTwo.DatosAfiliado.NombresAfiliado;
            //                    rqstEight.ApellidoMaternoAfiliado = responseTwo.DatosAfiliado.ApellidoMaternoAfiliado;
            //                    rqstEight.ApellidoPaternoAfiliado = responseTwo.DatosAfiliado.ApellidoPaternoAfiliado;
            //                    rqstEight.BeneficioMaximoInicial = cobertura.BeneficioMaximoInicial;
            //                    rqstEight.CodigoAfiliado = responseTwo.DatosAfiliado.CodigoAfiliado;
            //                    rqstEight.CodTipoDocumentoAfiliado = responseTwo.DatosAfiliado.CodTipoDocumentoAfiliado.ToString();
            //                    rqstEight.NumeroDocumentoAfiliado = responseTwo.DatosAfiliado.NumeroDocumentoAfiliado;
            //                    rqstEight.CodProducto = responseTwo.DatosAfiliado.CodProducto;
            //                    rqstEight.DesProducto = responseTwo.DatosAfiliado.DesProducto;
            //                    rqstEight.NumeroPlan = responseTwo.DatosAfiliado.NumeroPlan;
            //                    rqstEight.CodTipoDocumentoContratante = responseTwo.DatosAfiliado.CodTipoDocumentoContratante.ToString();
            //                    rqstEight.NumeroDocumentoContratante = responseTwo.DatosAfiliado.NumeroDocumentoContratante;
            //                    rqstEight.NombreContratante = responseTwo.DatosAfiliado.NombreContratante;
            //                    rqstEight.CodParentesco = responseTwo.DatosAfiliado.CodParentesco.ToString();
            //                    rqstEight.NumeroCobertura = cobertura.NumeroCobertura;
            //                    rqstEight.BeneficioMaximoInicial = cobertura.BeneficioMaximoInicial;
            //                    rqstEight.CodigoTipoCobertura = cobertura.CodigoTipoCobertura;
            //                    rqstEight.CodigoSubTipoCobertura = cobertura.CodigoSubTipoCobertura;
            //                    rqstEight.CodEspecialidad = "";
            //                    Debug.WriteLine("Request");
            //                    Debug.WriteLine(JsonConvert.SerializeObject(rqstEight).ToString());
            //                    var contentEight = new StringContent(JsonConvert.SerializeObject(rqstEight).ToString(), Encoding.UTF8, "application/json");
            //                    var responseTaskEight = client.PostAsync("Sistema/ConsultaProcedimientosEspeciales", contentEight);
            //                    responseTaskEight.Wait();

            //                    var resultEight = responseTaskEight.Result;
            //                    if (resultEight.IsSuccessStatusCode)
            //                    {
            //                        estados.wsConsultaProcedimientosEspeciales = true;

            //                        var readTaskEight = resultEight.Content.ReadAsStringAsync();
            //                        readTaskEight.Wait();
            //                        Debug.WriteLine("Response");
            //                        Debug.WriteLine(readTaskEight.Result);
            //                        if (readTaskEight.Result.Length > 2 && readTaskEight.Result != "[]")
            //                        {
            //                            responseEight = JsonConvert.DeserializeObject<ConsultaProcedimientosEspecialesResponse>(readTaskEight.Result);

            //                        }
            //                        estados.wsConsultaProcedimientosEspeciales = true;

            //                    }
            //                    else //web api sent error response 
            //                    {
            //                        estados.wsConsultaProcedimientosEspeciales = false;

            //                    }
            //                }
            //            }

            //        }


            //        string estadoString = JsonConvert.SerializeObject(estados).ToString();
            //        var grabarLog = new CitaDA().LogInserccionRoyal(idCita, estadoString, responseSeven.NumeroAutorizacion, null);


            //        return true;

            //    }
            //    else
            //    {
            //        string estadoString = JsonConvert.SerializeObject(estados).ToString();
            //        var grabarLog = new CitaDA().LogInserccionRoyal(idCita, estadoString, null, null);
            //        return false;
            //    }






            //}
            //catch (Exception ex)
            //{
            //    string estadoString = JsonConvert.SerializeObject(estados).ToString();
            //    var grabarLog = new CitaDA().LogInserccionRoyal(idCita, estadoString, null, ex.Message);
            //    //throw;
            //    return false;
            //}

        }
        public RespuestaBE<List<DataResponseLaboratorio>> ObtenerResultadosTabla(string tipoDocumento, string numeroDocumento)
        {
            throw new WebFaultException(HttpStatusCode.BadRequest);
            //Debug.WriteLine(numeroDocumento);
            //#region Validacion de Parámetros
            //if (string.IsNullOrEmpty(tipoDocumento) && string.IsNullOrEmpty(numeroDocumento))
            //{
            //    throw new WebFaultException(HttpStatusCode.BadRequest);
            //}


            //#endregion

            //var date = DateTime.Today;
            //var firstDayOfMonth = new DateTime(date.Year, date.Month, 1);
            //var lastDayOfMonth = firstDayOfMonth.AddMonths(1).AddDays(-1);
            ////var year = DateTime.Now.Year.ToString();
            ////var month = (DateTime.Now.Month < 10) ? "0" + DateTime.Now.Month.ToString() : DateTime.Now.Month.ToString();
            ////var dayStart = (firstDayOfMonth.Day < 10) ? "0" + firstDayOfMonth.Day.ToString() : firstDayOfMonth.Day.ToString();
            ////var dayEnd = (lastDayOfMonth.Day < 10) ? "0" + lastDayOfMonth.Day.ToString() : lastDayOfMonth.Day.ToString();

            //string data = new CitaDA().ResultadoLaboratorioTabla(tipoDocumento, numeroDocumento, firstDayOfMonth, lastDayOfMonth);


            //if (String.IsNullOrEmpty(data))
            //{
            //    return new RespuestaBE<List<DataResponseLaboratorio>>()
            //    {
            //        rpt = 0,
            //        mensaje = "",
            //        data = new List<DataResponseLaboratorio>()
            //    };
            //}

            //List<DataResponseLaboratorio> lista = new List<DataResponseLaboratorio>();
            //string[] reg = data.Split('¬');
            //int nreg = reg.Length;
            //DataResponseLaboratorio oDataResponseLaboratorio;
            //String[] campos;
            //for (int i = 0; i < nreg; i++)
            //{
            //    campos = reg[i].Split('¦');
            //    oDataResponseLaboratorio = new DataResponseLaboratorio();
            //    oDataResponseLaboratorio.ordenAtencion = campos[0];
            //    oDataResponseLaboratorio.peticion = campos[1];
            //    oDataResponseLaboratorio.sede = campos[2];
            //    oDataResponseLaboratorio.medico = campos[3];
            //    oDataResponseLaboratorio.especialidad = campos[4];
            //    oDataResponseLaboratorio.fechaCreacion = campos[5];
            //    oDataResponseLaboratorio.situacion = campos[6];
            //    oDataResponseLaboratorio.idClinica = campos[7];
            //    oDataResponseLaboratorio.idEspecialidad = campos[8];
            //    oDataResponseLaboratorio.indRecetaMedica = (campos[9].Equals("1"));
            //    oDataResponseLaboratorio.idCita = campos[10];
            //    lista.Add(oDataResponseLaboratorio);
            //}



            //try
            //{
            //    return new RespuestaBE<List<DataResponseLaboratorio>>()
            //    {
            //        rpt = 0,
            //        mensaje = "",
            //        data = lista
            //    };
            //}
            //catch (Exception ex)
            //{
            //    return new ErrorDA().RegistrarError<List<DataResponseLaboratorio>>(ex, "WS", "Cita.svc");
            //}
        }
        public RespuestaBE<List<DataResponseTipoCoberturaEspecialidad>> TipoCoberturaEspecialidadListar(string codigo, string rucSeguro = "")
        {
            throw new WebFaultException(HttpStatusCode.BadRequest);
            //string data = new CitaDA().TipoCoberturaPorEspecialidad(codigo, rucSeguro);

            //if (String.IsNullOrEmpty(data))
            //{
            //    return new RespuestaBE<List<DataResponseTipoCoberturaEspecialidad>>()
            //    {
            //        rpt = 0,
            //        mensaje = "",
            //        data = new List<DataResponseTipoCoberturaEspecialidad>()
            //    };
            //}

            //List<DataResponseTipoCoberturaEspecialidad> lista = new List<DataResponseTipoCoberturaEspecialidad>();
            //string[] reg = data.Split('¬');
            //int nreg = reg.Length;
            //DataResponseTipoCoberturaEspecialidad oDataResponseTipoCoberturaEspecialidad;
            //String[] campos;
            //for (int i = 0; i < nreg; i++)
            //{
            //    campos = reg[i].Split('¦');
            //    oDataResponseTipoCoberturaEspecialidad = new DataResponseTipoCoberturaEspecialidad();
            //    oDataResponseTipoCoberturaEspecialidad.codigo = campos[0];
            //    oDataResponseTipoCoberturaEspecialidad.descripcion = campos[1];

            //    lista.Add(oDataResponseTipoCoberturaEspecialidad);
            //}

            //try
            //{
            //    return new RespuestaBE<List<DataResponseTipoCoberturaEspecialidad>>()
            //    {
            //        rpt = 0,
            //        mensaje = "",
            //        data = lista
            //    };
            //}
            //catch (Exception ex)
            //{
            //    return new ErrorDA().RegistrarError<List<DataResponseTipoCoberturaEspecialidad>>(ex, "WS", "Cita.svc");
            //}
        }
        public RespuestaSimpleBE RegistroSiteds(string data)
        {
            throw new WebFaultException(HttpStatusCode.BadRequest);
            ////LOG
            //DateTime now = DateTime.Now;
            //string Archivo = $"{"RegistroSiteds00"}_{now.Year}_{now.Month.ToString().PadLeft(2, '0')}_{now.Day.ToString().PadLeft(2, '0')}{".txt"}";
            //string rutaArchivo = string.Format("{0}{1}", ConfigurationManager.AppSettings["LogCitaBDSpring"], Archivo);
            //string nombreArchivo = "";
            //using (FileStream stream = new FileStream(rutaArchivo + nombreArchivo, FileMode.Append, FileAccess.Write, FileShare.Write))
            //{
            //    using (StreamWriter streamWriter = new StreamWriter(stream, Encoding.Default))
            //    {
            //        streamWriter.WriteLine("Fecha = " + DateTime.Now);
            //        streamWriter.WriteLine("Mensaje = " + "Parámetro");
            //        streamWriter.WriteLine("Data = " + data);
            //        streamWriter.WriteLine(new string('_', 50));
            //    }
            //}
            ////LOG
            //bool rpta = false;
            //RespuestaSimpleBE rptaSimple = new RespuestaSimpleBE()
            //{
            //    rpt = 1,
            //    mensaje = "Error, por favor comunicarse con soporte",
            //    data = "False"
            //};
            //string CadenaConexion = ConfigurationManager.ConnectionStrings["CadenaConexion"].ConnectionString;

            //using (SqlConnection con = new SqlConnection(CadenaConexion))
            //{
            //    string idCita = "0";
            //    String firma = "";
            //    try
            //    {
            //        /*
            //        con.Open();
            //        SqlCommand cmd = new SqlCommand("uspCitaAutorizacionSITEDS", con);
            //        cmd.CommandType = CommandType.StoredProcedure;
            //        cmd.CommandTimeout = 120;

            //        if ("@IDCitaVirtual" != null && idCita != null)
            //        {
            //            cmd.Parameters.AddWithValue("@IDCitaVirtual", idCita);
            //        }
            //        object data = cmd.ExecuteScalar();
            //        */
            //        if (data != null)
            //        {
            //            string response = data.ToString();
            //            string[] Listas = response.Split('¯');
            //            int nListas = Listas.Length;
            //            string tipoLista = "";
            //            int contadorErrores = 0;
            //            int contadorListasVacias = 0;
            //            List<string> listaErrores = new List<string>();
            //            String[] aCampo;
            //            int idTransaccion = 0, idClinica = 0;
            //            for (int i = 0; i < nListas; i++)
            //            {
            //                if (Listas[i] != "")
            //                {
            //                    string[] ListasDetalle = Listas[i].Split('¬');
            //                    int nListasDetalle = ListasDetalle.Length;
            //                    for (int j = 0; j < nListasDetalle; j++)
            //                    {
            //                        if (!String.IsNullOrEmpty(ListasDetalle[j]))
            //                        {
            //                            tipoLista = ListasDetalle[j].Split('¦')[0];
            //                            switch (tipoLista)
            //                            {
            //                                case "DG":
            //                                    var grabarDatosGeneralesVirtual = new RoyalDA().GrabarDatosGeneralesVirtual(ListasDetalle[j], idCita);
            //                                    if (!grabarDatosGeneralesVirtual)
            //                                    {
            //                                        listaErrores.Add("Fallo en GrabarDatosGeneralesVirtual");
            //                                        contadorErrores++;
            //                                    }
            //                                    break;
            //                                case "CA":
            //                                    var grabarCoberturaAcreditacionVirtual = new RoyalDA().GrabarCoberturaAcreditacionVirtual(ListasDetalle[j], idCita);
            //                                    if (!grabarCoberturaAcreditacionVirtual)
            //                                    {
            //                                        listaErrores.Add("Fallo en GrabarCoberturaAcreditacionVirtual");
            //                                        contadorErrores++;
            //                                    }
            //                                    break;
            //                                case "CMP":
            //                                    var grabarCondicionesMedicaPreexistenciaVirtual = new RoyalDA().GrabarCondicionesMedicaPreexistenciaVirtual(ListasDetalle[j], idCita);
            //                                    if (!grabarCondicionesMedicaPreexistenciaVirtual)
            //                                    {
            //                                        listaErrores.Add("Fallo en GrabarCondicionesMedicaPreexistenciaVirtual");
            //                                        contadorErrores++;
            //                                    }
            //                                    break;
            //                                case "CMEX":
            //                                    var grabarCondicionesMedicaExclusionesVirtual = new RoyalDA().GrabarCondicionesMedicaExclusionesVirtual(ListasDetalle[j], idCita);
            //                                    if (!grabarCondicionesMedicaExclusionesVirtual)
            //                                    {
            //                                        listaErrores.Add("Fallo en GrabarCondicionesMedicaExclusionesVirtual");
            //                                        contadorErrores++;
            //                                    }
            //                                    break;
            //                                case "CMC":
            //                                    var grabarCondicionesMedicaCarenciaVirtual = new RoyalDA().GrabarCondicionesMedicaCarenciaVirtual(ListasDetalle[j], idCita);
            //                                    if (!grabarCondicionesMedicaCarenciaVirtual)
            //                                    {
            //                                        listaErrores.Add("Fallo en GrabarCondicionesMedicaCarenciaVirtual");
            //                                        contadorErrores++;
            //                                    }
            //                                    break;
            //                                case "CMA":
            //                                    var grabarCondicionesMedicaAntecedentesVirtual = new RoyalDA().GrabarCondicionesMedicaAntecedentesVirtual(ListasDetalle[j], idCita);
            //                                    if (!grabarCondicionesMedicaAntecedentesVirtual)
            //                                    {
            //                                        listaErrores.Add("Fallo en GrabarCondicionesMedicaAntecedentesVirtual");
            //                                        contadorErrores++;
            //                                    }
            //                                    break;
            //                                case "CME":
            //                                    var grabarCondicionesMedicaEnfermedadVirtual = new RoyalDA().GrabarCondicionesMedicaEnfermedadVirtual(ListasDetalle[j], idCita);
            //                                    if (!grabarCondicionesMedicaEnfermedadVirtual)
            //                                    {
            //                                        listaErrores.Add("Fallo en GrabarCondicionesMedicaEnfermedadVirtual");
            //                                        contadorErrores++;
            //                                    }
            //                                    break;
            //                                case "P":
            //                                    var grabarProcedimientosVirtual = new RoyalDA().GrabarProcedimientosVirtual(ListasDetalle[j], idCita);
            //                                    if (!grabarProcedimientosVirtual)
            //                                    {
            //                                        listaErrores.Add("Fallo en GrabarProcedimientosVirtual");
            //                                        contadorErrores++;
            //                                    }
            //                                    break;
            //                                case "TE":
            //                                    var grabarTiempoEsperaVirtual = new RoyalDA().GrabarTiempoEsperaVirtual(ListasDetalle[j], idCita);
            //                                    if (!grabarTiempoEsperaVirtual)
            //                                    {
            //                                        listaErrores.Add("Fallo en GrabarTiempoEsperaVirtual");
            //                                        contadorErrores++;
            //                                    }
            //                                    break;
            //                                case "EC":
            //                                    var grabarExcepcionCarenciaVirtual = new RoyalDA().GrabarExcepcionCarenciaVirtual(ListasDetalle[j], idCita);
            //                                    if (!grabarExcepcionCarenciaVirtual)
            //                                    {
            //                                        listaErrores.Add("Fallo en GrabarExcepcionCarenciaVirtual");
            //                                        contadorErrores++;
            //                                    }
            //                                    break;
            //                                case "SCT":
            //                                    aCampo = ListasDetalle[j].Split('¦');
            //                                    firma = aCampo[24];
            //                                    var dcnTransaccion = new RoyalDA().GrabarTransaccionSpring(ListasDetalle[j], firma, idCita);

            //                                    if (!dcnTransaccion.ContainsKey("IdTransaccion"))
            //                                    {
            //                                        listaErrores.Add("Fallo en GrabarTransaccionVirtual");
            //                                        contadorErrores++;
            //                                    }
            //                                    else
            //                                    {
            //                                        idTransaccion = int.Parse(dcnTransaccion["IdTransaccion"]);
            //                                        idClinica = int.Parse(dcnTransaccion["IdClinica"]);
            //                                    }
            //                                    break;
            //                                case "SCTD":
            //                                    var grabarTransaccionVirtualDetalle = new RoyalDA().GrabarTransaccionVirtualDetalle(ListasDetalle[j], idCita);

            //                                    if (!grabarTransaccionVirtualDetalle)
            //                                    {
            //                                        listaErrores.Add("Fallo en GrabarTransaccionVirtualDetalle");
            //                                        contadorErrores++;
            //                                    }
            //                                    break;
            //                                default:
            //                                    contadorErrores++;
            //                                    break;
            //                            }
            //                        }
            //                    }
            //                }
            //                else contadorListasVacias++;
            //            }
            //            if (idTransaccion > 0)
            //            {
            //                var grabarTransaccionVirtualDetalle = new RoyalDA().VerificarTransaccionSpring(idTransaccion, idClinica);
            //            }
            //            if (contadorErrores > 0)
            //            {
            //                rpta = false;
            //                rptaSimple.rpt = 1;
            //                rptaSimple.mensaje = "Error, por favor comunicarse con soporte";
            //                rptaSimple.data = "False";
            //            }
            //            else
            //            {
            //                if (contadorListasVacias != nListas)
            //                {
            //                    rpta = true;
            //                    rptaSimple.rpt = 0;
            //                    rptaSimple.mensaje = "Success";
            //                    rptaSimple.data = "true";
            //                }
            //            }

            //        }
            //    }
            //    catch (Exception ex)
            //    {
            //        new ErrorDA().RegistrarError(ex, "WSV", "RegistroSiteds", idCita);
            //        rpta = false;
            //        rptaSimple.rpt = 1;
            //        rptaSimple.mensaje = "Error, por favor comunicarse con soporte";
            //        rptaSimple.data = "False";
            //        return rptaSimple;
            //    }
            //}

            //return rptaSimple;
        }
        public string GenerarOrdenSynap(String data, String idCita = "")
        {
            throw new WebFaultException(HttpStatusCode.BadRequest);
            //_diasPagoSynap = Int32.Parse(ConfigurationManager.AppSettings["diasPagoSynap"]);
            //_urlBaseSynap = ConfigurationManager.AppSettings["urlBaseSynap"];
            //_urlLinkSynap = ConfigurationManager.AppSettings["urlLinkSynap"];
            //_apiKeySynap = ConfigurationManager.AppSettings["apiKeySynap"];
            //RespuestaSimpleBE oResponse = new RespuestaSimpleBE();
            //string response2 = "";
            //var xyz = "";
            //if (!String.IsNullOrEmpty(data))
            //{
            //    String[] lData = data.Split('¯');
            //    string oCorreo = lData[0];
            //    String[] aData1 = lData[1].Split('¦');
            //    String[] aData2 = lData[2].Split('¬');
            //    string aData3 = lData[3];
            //    var secuencia = CitaSecuencia(aData3);
            //    OrdenRequestBE obeOrdenRequest = new OrdenRequestBE();
            //    beOrdenResponse obeOrdenResponse = new beOrdenResponse();
            //    Order oOrder = new Order();
            //    Settings oSettings = new Settings();
            //    Products oProducts;
            //    MetaData oMetaData = new MetaData();
            //    oOrder.country = new Country();
            //    oOrder.currency = new Currency();
            //    oOrder.customer = new Customer();
            //    oOrder.customer.document = new Document();
            //    oOrder.customer.address = new Address();
            //    oOrder.customer.address.levels = new List<string>();
            //    oOrder.products = new List<Products>();
            //    oOrder.orderType = new OrderType();
            //    oOrder.targetType = new TargetType();
            //    oOrder.metadata = new List<MetaData>();
            //    oSettings.autogenerate = new AutoGenerate();
            //    oSettings.expiration = new Expiration();

            //    oOrder.number = secuencia;
            //    oOrder.country.code = aData1[1];
            //    oOrder.currency.code = aData1[2];
            //    oOrder.amount = aData1[3];
            //    oOrder.customer.name = aData1[4];
            //    oOrder.customer.lastName = aData1[5];
            //    oOrder.customer.phone = aData1[9];
            //    oOrder.customer.email = aData1[7];
            //    oOrder.customer.document.type = aData1[8];
            //    oOrder.customer.document.number = aData1[6];
            //    oOrder.customer.address.country = aData1[2];
            //    oOrder.customer.address.levels.Add("150000");
            //    oOrder.customer.address.line1 = "";
            //    oOrder.customer.address.line2 = "";
            //    oOrder.customer.address.zip = "";
            //    string[] campo;
            //    for (var i = 0; i < aData2.Length; i++)
            //    {
            //        oProducts = new Products();
            //        campo = aData2[i].Split('¦');
            //        oProducts.name = campo[0];
            //        oProducts.quantity = campo[1];
            //        oProducts.unitAmount = campo[2];
            //        oProducts.amount = campo[3];
            //        oOrder.products.Add(oProducts);
            //    }

            //    oOrder.orderType.code = "ORDER";
            //    oOrder.targetType.code = "SINGLE";

            //    oMetaData.name = "name1";
            //    oMetaData.value = "value1";
            //    oOrder.metadata.Add(oMetaData);

            //    DateTime dt = DateTime.Now.AddDays(_diasPagoSynap);
            //    string fechaHoy = dt.ToString("yyyy-MM-ddTHH:mm:ss.fff-0500");
            //    oSettings.language = "es_PE";
            //    oSettings.autogenerate.paymentCode = "true";
            //    oSettings.expiration.type = "DATE";
            //    oSettings.expiration.date = fechaHoy;
            //    var elemento = oOrder.number + oOrder.currency.code + oOrder.amount;
            //    obeOrdenRequest.order = oOrder;
            //    obeOrdenRequest.settings = oSettings;
            //    String contenidoJSON = new JavaScriptSerializer().Serialize(obeOrdenRequest);
            //    oResponse.data = PostAsync(_urlBaseSynap, "order/engine/orders/generate", elemento, contenidoJSON);
            //    new ErrorDA().GrabarLog(!String.IsNullOrEmpty(idCita) ? "Request/Response de: " + idCita : "", "WS", "Cita.svc/GenerarOrdenSynap", contenidoJSON, oResponse.data);
            //    obeOrdenResponse = new JavaScriptSerializer().Deserialize<beOrdenResponse>(oResponse.data);
            //    if (!String.IsNullOrEmpty(oResponse.data))
            //    {
            //        if (obeOrdenResponse != null && obeOrdenResponse.success)
            //        {
            //            xyz = obeOrdenResponse.data.order.uniqueIdentifier;
            //            //oResponse.Data = EnviarCorreo(oCorreo, xyz);


            //            string cadena = secuencia + "¦CITAS¦" + _urlLinkSynap + "?identifier=" + xyz + "¦" + contenidoJSON;
            //            SqlDA oSqlDA = new SqlDA();
            //            response2 = oSqlDA.EjecutarComando("uspMedicamentoProcedimientoCita_LinkActualizar", "@lstParametros", cadena);
            //            //DataSQL oDataSQL = new DataSQL();
            //            //response2 = oDataSQL.EjecutarComando("uspMedicamentoProcedimientoCita_LinkActualizar", "@lstParametros", cadena);
            //            return _urlLinkSynap + "?identifier=" + xyz;
            //        }

            //    }
            //}
            //return "";
        }
        public string ProcesarPagoSynap(OrderPago order, PaymentPago payment, ResultPago result, string signature, string success, Message message)
        {
            throw new WebFaultException(HttpStatusCode.BadRequest);
            //string response = "";
            //string rpta = "";
            //bePagoResponse oOrderPago = new bePagoResponse();
            //oOrderPago.order = order;
            //oOrderPago.payment = payment;
            //oOrderPago.result = result;
            //oOrderPago.signature = signature;
            //oOrderPago.success = success;
            //oOrderPago.message = message;

            //var idOrden = oOrderPago.order.number;
            //beAuthorizationNumber obeAuthorizationNumber = new JavaScriptSerializer().Deserialize<beAuthorizationNumber>(oOrderPago.result.processorResult.originalResponse);
            //string rutaArchivo = ConfigurationManager.AppSettings["_LogPath"];

            //string nombreArchivo = "RequestPrincipalProcesarPagoSynap.txt";
            //string request = new JavaScriptSerializer().Serialize(oOrderPago);
            //DateTime oFechaActual = DateTime.Now;
            //using (FileStream stream = new FileStream(rutaArchivo + nombreArchivo, FileMode.Append, FileAccess.Write, FileShare.Write))
            //{
            //    using (StreamWriter streamWriter = new StreamWriter(stream, Encoding.Default))
            //    {
            //        streamWriter.Write(oFechaActual.ToString("dd/MM/yyyy HH:mm:ss.fff"));
            //        streamWriter.Write(" (");
            //        streamWriter.Write(idOrden.ToString());
            //        streamWriter.Write("): ");
            //        streamWriter.Write(request);
            //        streamWriter.WriteLine("");
            //        streamWriter.WriteLine(new string('_', 50));
            //    }
            //}

            //nombreArchivo = "RequestProcesarPagoSynap.txt";
            //request = new JavaScriptSerializer().Serialize(obeAuthorizationNumber);
            //using (FileStream stream = new FileStream(rutaArchivo + nombreArchivo, FileMode.Append, FileAccess.Write, FileShare.Write))
            //{
            //    using (StreamWriter streamWriter = new StreamWriter(stream, Encoding.Default))
            //    {
            //        streamWriter.Write(request);
            //        streamWriter.WriteLine("");
            //        streamWriter.WriteLine(new string('_', 50));
            //    }
            //}
            //string codigo = obeAuthorizationNumber.answer.transactions[0].status.Equals("PAID") ? "000" : "999";
            //string mensaje = obeAuthorizationNumber.answer.transactions[0].detailedStatus;
            //string purchaseNumber = oOrderPago.order.number;//obeAuthorizationNumber.answer.transactions[0].shopId;
            //string transactionID = obeAuthorizationNumber.answer.transactions[0].transactionDetails.cardDetails.authorizationResponse.authorizationNumber;
            //string numeroTarjeta = obeAuthorizationNumber.answer.transactions[0].transactionDetails.cardDetails.pan;
            //decimal montoDec = ((decimal)(obeAuthorizationNumber.answer.transactions[0].transactionDetails.cardDetails.authorizationResponse.amount)) / 100.00m;
            //string monto = montoDec.ToString();
            //string IDUnico = obeAuthorizationNumber.answer.transactions[0].uuid;
            //string tokenEmail = "";
            //string nombreVisa = "";
            //string apellidoVisa = "";
            //string tipoTarjeta = obeAuthorizationNumber.answer.transactions[0].transactionDetails.cardDetails.effectiveBrand;

            //string cadena = idOrden + "¯" + codigo + "¦" + mensaje + "¦" + purchaseNumber + "¦" + transactionID + "¦" + numeroTarjeta + "¦" + monto + "¦" + IDUnico + "¦" + tokenEmail + "¦" + nombreVisa + "¦" + apellidoVisa + "¦" + tipoTarjeta;
            //if (!String.IsNullOrEmpty(idOrden))
            //{
            //    SqlDA oSqlDA = new SqlDA();
            //    response = oSqlDA.EjecutarComando("uspProcesarPagoSynap_Actualizar", "@lstParametros", cadena);
            //    rpta = "ok";
            //}

            //DateTime now = DateTime.Now;
            //nombreArchivo = "RespuestaPasarela.txt";
            //using (FileStream stream = new FileStream(rutaArchivo + nombreArchivo, FileMode.Append, FileAccess.Write, FileShare.Write))
            //{
            //    using (StreamWriter streamWriter = new StreamWriter(stream, Encoding.Default))
            //    {
            //        streamWriter.Write("Fecha");
            //        streamWriter.Write(" = ");
            //        streamWriter.WriteLine($"{now.Year}_{now.Month.ToString().PadLeft(2, '0')}_{now.Day.ToString().PadLeft(2, '0')}");
            //        streamWriter.Write("IdOrden");
            //        streamWriter.Write(" = ");
            //        streamWriter.WriteLine(idOrden);
            //        streamWriter.WriteLine(new string('_', 50));
            //    }
            //}

            //return rpta;
        }
        /*
        public string ProcesarPagoSynap(
            string _type, beAnswer answer, string applicationProvider,
            string applicationVersion, string metadata, string mode,
            string serverDate, string serverUrl, string status,
            string ticket, string version, string webService
        )
        {
            string rutaArchivo = ConfigurationManager.AppSettings["_LogPath"];
            string nombreArchivo = "RequestProcesarPagoSynap.txt";
            string request = new JavaScriptSerializer().Serialize(answer);
            using (FileStream stream = new FileStream(rutaArchivo + nombreArchivo, FileMode.Append, FileAccess.Write, FileShare.Write))
            {
                using (StreamWriter streamWriter = new StreamWriter(stream, Encoding.Default))
                {
                    streamWriter.Write(request);
                    streamWriter.WriteLine(new string('_', 50));
                }
            }
            string response = "";
            string rpta = "";
            bePagoResponse oOrderPago = new bePagoResponse();
            //oOrderPago.order = order;
            //oOrderPago.payment = payment;
            //oOrderPago.result = result;
            //oOrderPago.signature = signature;
            //oOrderPago.success = success;
            //oOrderPago.message = message;

            var idOrden = answer.orderDetails.orderId;
            string codigo = answer.transactions[0].status;
            string mensaje = answer.transactions[0].detailedStatus;
            string purchaseNumber = answer.transactions[0].shopId;
            string transactionID = answer.transactions[0].transactionDetails.cardDetails.authorizationResponse.authorizationNumber;
            string numeroTarjeta = answer.transactions[0].transactionDetails.cardDetails.pan;
            string monto = answer.transactions[0].transactionDetails.cardDetails.authorizationResponse.amount.ToString();
            string IDUnico = answer.transactions[0].uuid;
            string tokenEmail = "";
            string nombreVisa = "";
            string apellidoVisa = "";
            string tipoTarjeta = answer.transactions[0].transactionDetails.cardDetails.effectiveBrand;
            string cadena = idOrden + "¯" + codigo + "¦" + mensaje + "¦" + purchaseNumber + "¦" + transactionID + "¦" + numeroTarjeta + "¦" + monto + "¦" + IDUnico + "¦" + tokenEmail + "¦" + nombreVisa + "¦" + apellidoVisa + "¦" + tipoTarjeta;
            if (!String.IsNullOrEmpty(idOrden))
            {
                SqlDA oSqlDA = new SqlDA();
                response = oSqlDA.EjecutarComando("uspProcesarPagoSynap_Actualizar", "@lstParametros", cadena);
                //DataSQL oDataSQL = new DataSQL("_ConexionBD");
                //response = oDataSQL.ExecuteCommand("uspProcesarPagoSynap_Actualizar", cadena, "@lstParametros");
                rpta = "ok";
            }

            DateTime now = DateTime.Now;
            nombreArchivo = "RespuestaPasarela.txt";
            using (FileStream stream = new FileStream(rutaArchivo + nombreArchivo, FileMode.Append, FileAccess.Write, FileShare.Write))
            {
                using (StreamWriter streamWriter = new StreamWriter(stream, Encoding.Default))
                {
                    streamWriter.Write("Fecha");
                    streamWriter.Write(" = ");
                    streamWriter.WriteLine($"{now.Year}_{now.Month.ToString().PadLeft(2, '0')}_{now.Day.ToString().PadLeft(2, '0')}");
                    streamWriter.Write("IdOrden");
                    streamWriter.Write(" = ");
                    streamWriter.WriteLine(idOrden);
                    streamWriter.WriteLine(new string('_', 50));
                }
            }

            return rpta;
        }
        */
        public RespuestaBE<ResultadoLaboratorio> ObtenerRecetaMedica(string idCita, string numeroOrden)
        {
            throw new WebFaultException(HttpStatusCode.BadRequest);
            //if (string.IsNullOrEmpty(idCita) && string.IsNullOrEmpty(numeroOrden))
            //{
            //    throw new WebFaultException(HttpStatusCode.BadRequest);
            //}

            ////var resultados = new ResponseLaboratorio();

            //try
            //{
            //    string data = new CitaDA().RecetaMedicaListar(idCita, numeroOrden);

            //    string[] listas = data.Split('¯');
            //    string[] cabecera = !String.IsNullOrEmpty(listas[0]) ? listas[0].Split('¦') : new string[] { };
            //    string[] detalle = !String.IsNullOrEmpty(listas[1]) ? listas[1].Split('¬') : new string[] { };
            //    string[] detalleMaterial = !String.IsNullOrEmpty(listas[2]) ? listas[2].Split('¬') : new string[] { };

            //    if (cabecera.Length > 1)
            //    {

            //        string rutaLogo = HttpContext.Current.Server.MapPath("~/Images/sanna_logo.png");
            //        string htmlheader = "<div><table style='width: 100%; border-collapse: collapse;font-family:Calibri;font-size:20px'>";

            //        htmlheader += "<tr>";
            //        htmlheader += "<td style='width:25%;vertical-align:top;'>";
            //        htmlheader += "<img style='width: 180px;margin-top:-25px;margin-left:20px'  src='" + rutaLogo + "' />";
            //        htmlheader += "</td>";
            //        htmlheader += "<td style='width:50%'>";
            //        htmlheader += "<div style='text-align:center;font-weight: bold;'>" + cabecera[0] + "</div>";
            //        htmlheader += "<div style='text-align:center;margin-top:10px;'>" + cabecera[1] + "</div>";
            //        htmlheader += "<div style='text-align:center;'>" + cabecera[2] + "</div>";
            //        htmlheader += "<div style='text-align:center;'>" + cabecera[3] + "</div>";
            //        htmlheader += "<div style='text-align:center;font-weight: bold; padding-top:30px;'>RECETA</div>";
            //        htmlheader += "</td>";
            //        htmlheader += "<td style='width:25%;vertical-align: top;'>";
            //        htmlheader += "<div style='text-align:right;font-size:16px'>" + DateTime.Now.ToString("dd/MM/yyyy HH:mm") + "</div>";
            //        htmlheader += "</td>";
            //        htmlheader += "</tr>";

            //        htmlheader += "</table>";
            //        htmlheader += "<div style='margin-top:30px;background-color:#7fbe6d;height:5px'></div>";

            //        htmlheader += "<table style='width: 100%; border-collapse: collapse;margin-top:25px;font-family:Calibri;'>";
            //        htmlheader += "<tr>";
            //        htmlheader += "<td style='font-weight: bold;'>OA:</td>";
            //        htmlheader += "<td >" + cabecera[4] + "</td>";
            //        htmlheader += "<td style='font-weight: bold;'>Fecha:</td>";
            //        htmlheader += "<td >" + cabecera[5] + "</td>";
            //        htmlheader += "<td style='font-weight: bold;'>Hora:</td>";
            //        htmlheader += "<td >" + cabecera[6] + "</td>";
            //        htmlheader += "<td style='font-weight: bold;'>Vigencia:</td>";
            //        htmlheader += "<td >" + cabecera[7] + "</td>";
            //        htmlheader += "</tr>";

            //        htmlheader += "<tr>";
            //        htmlheader += "<td style='font-weight: bold;'>Paciente:</td>";
            //        htmlheader += "<td colspan='5'>" + cabecera[8] + "</td>";
            //        htmlheader += "<td style='font-weight: bold;'>Aseguradora:</td>";
            //        htmlheader += "<td >" + cabecera[9] + "</td>";
            //        htmlheader += "</tr>";


            //        htmlheader += "<tr>";
            //        htmlheader += "<td style='font-weight: bold;'>Edad:</td>";
            //        htmlheader += "<td colspan='5'>" + cabecera[10] + "</td>";
            //        htmlheader += "<td style='font-weight: bold;'>Médico Tratante:</td>";
            //        htmlheader += "<td >" + cabecera[11] + "</td>";

            //        htmlheader += "</tr>";
            //        htmlheader += "</table>";

            //        //htmlheader += "<table style='width: 100%; border-collapse: collapse;font-family:Calibri;'>";
            //        //htmlheader += "<tr>";
            //        //htmlheader += "<td style='font-weight: bold;width:15%'>Médico Tratante:</td>";
            //        //htmlheader += "<td >" + cabecera[11] + "</td>";
            //        //htmlheader += "</tr>";
            //        //htmlheader += "</table>";
            //        htmlheader += "<div style='font-weight: bold;width:15%;font-family:Calibri;'>Diagnóstico</div>";
            //        htmlheader += "<div style='font-family:Calibri;'>" + cabecera[16] + "</div>";

            //        if (!String.IsNullOrEmpty(cabecera[18]))
            //        {
            //            htmlheader += "<div style='font-weight: bold;width:15%;font-family:Calibri;'>Indicaciones</div>";
            //            htmlheader += "<div style='font-family:Calibri;'>" + cabecera[18] + "</div>";

            //        }


            //        htmlheader += "<div style='margin-top:30px;background-color:#7fbe6d;height:5px'></div>";
            //        htmlheader += "</div>";

            //        string html = "<html><head><meta charset='utf-8'/></head><body style='font-family:Calibri;padding:0px 0px;margin:0px 0px;'>";

            //        string template = "";
            //        template += "<div style='padding-top:30px;'>";
            //        template += "<table style='width: 100%;border-collapse:collapse;padding:10px 10px;'>";
            //        template += "<tr>";
            //        template += "<td style='font-weight: bold;width:15%;'>Medicamento:</td>";
            //        template += "<td style='width:35%;'>{0}</td>";
            //        template += "<td style='font-weight: bold;width:10%;'>DCI :</td>";
            //        template += "<td style='width:40%;'>{1}</td>";
            //        template += "</tr>";

            //        template += "<tr>";
            //        template += "<td colspan='4'>";

            //        template += "<table style='width: 100%;border-collapse: collapse;padding:0px 15px;margin-top:15px;'>";
            //        template += "<tr>";
            //        template += "<td style='font-weight: bold;width:20%;text-align:center'>U.M.</td>";

            //        template += "<td style='font-weight: bold;width:5%;text-align:center'>Dosis</td>";
            //        template += "<td style='font-weight: bold;width:20%;text-align:center'>Cada</td>";
            //        template += "<td style='font-weight: bold;width:20%;text-align:center'>Vía</td>";
            //        template += "<td style='font-weight: bold;width:20%;text-align:center'>Tratamiento</td>";
            //        template += "<td style='font-weight: bold;width:15%;text-align:center'>Cantidad</td>";

            //        template += "</tr>";
            //        template += "<tr>";
            //        template += "<td style='text-align:center'>{6}</td>";

            //        template += "<td style='text-align:center'>{8}</td>";
            //        template += "<td style='text-align:center'>{3}</td>";
            //        template += "<td style='text-align:center'>{4}</td>";
            //        template += "<td style='text-align:center'>{2}</td>";
            //        template += "<td style='text-align:center'>{5}</td>";

            //        template += "</tr>";
            //        template += "</table>";

            //        template += "</td>";
            //        template += "</tr>";
            //        template += "</table>";
            //        template += "<div style='font-weight: bold;padding:10px 10px;'>Indicaciones Especificas</div>";
            //        template += "<div style='padding:10px 10px;'>{7}</div>";

            //        template += "</div>";
            //        template += "<div style='margin-top:30px;background-color:#7fbe6d;height:5px'></div>";



            //        int nDetalle = detalle.Length;
            //        string[] campos;
            //        string[] campoSiguiente;
            //        for (int i = 0; i < nDetalle; i++)
            //        {
            //            campos = detalle[i].Split('¦');

            //            //  html += string.Format(template, campos[0], campos[1], campos[2], campos[3], campos[4], campos[5], campos[6],campos[7],campos[8]);


            //            html += "<div style='padding-top:30px;'>";
            //            html += "<table style='width: 100%;border-collapse:collapse;padding:10px 10px;'>";
            //            html += "<tr>";
            //            html += "<td style='font-weight: bold;width:15%;'>Medicamento:</td>";
            //            html += "<td style='width:35%;'>" + campos[0] + "</td>";
            //            html += "<td style='font-weight: bold;width:10%;'>DCI :</td>";
            //            html += "<td style='width:40%;'>" + campos[1] + "</td>";
            //            html += "</tr>";

            //            html += "<tr>";
            //            html += "<td colspan='4'>";

            //            html += "<table style='width: 100%;border-collapse: collapse;padding:0px 15px;margin-top:15px;'>";
            //            html += "<tr>";
            //            html += "<td style='font-weight: bold;width:20%;text-align:center'>U.M.</td>";
            //            html += "<td style='font-weight: bold;width:5%;text-align:center'>Dosis</td>";
            //            html += "<td style='font-weight: bold;width:20%;text-align:center'>Cada</td>";
            //            html += "<td style='font-weight: bold;width:20%;text-align:center'>Vía</td>";
            //            html += "<td style='font-weight: bold;width:20%;text-align:center'>Tratamiento</td>";
            //            html += "<td style='font-weight: bold;width:15%;text-align:center'>Cantidad</td>";

            //            html += "</tr>";
            //            html += "<tr>";
            //            html += "<td style='text-align:center'>" + campos[6] + "</td>";
            //            html += "<td style='text-align:center'>" + campos[8] + "</td>";
            //            html += "<td style='text-align:center'>" + campos[3] + "</td>";
            //            html += "<td style='text-align:center'>" + campos[4] + "</td>";
            //            html += "<td style='text-align:center'>" + campos[2] + "</td>";
            //            html += "<td style='text-align:center'>" + campos[5] + "</td>";

            //            html += "</tr>";
            //            html += "</table>";

            //            html += "</td>";
            //            html += "</tr>";
            //            html += "</table>";

            //            if (!String.IsNullOrEmpty(campos[7]))
            //            {
            //                html += "<div style='font-weight: bold;padding:10px 10px;'>Indicaciones Especificas</div>";
            //                html += "<div style='padding:10px 10px;'>" + campos[7] + "</div>";
            //            }


            //            html += "</div>";
            //            html += "<div style='margin-top:30px;background-color:#7fbe6d;height:5px'></div>";

            //        }



            //        nDetalle = detalleMaterial.Length;

            //        if (nDetalle > 0)
            //        {
            //            html += "<div style='font-weight: bold;padding:10px 10px;'>Material Médico</div>";

            //            string nombre = "";
            //            for (int i = 0; i < nDetalle; i++)
            //            {
            //                campos = detalleMaterial[i].Split('¦');

            //                if (!nombre.Equals(campos[0]))
            //                {

            //                    html += "<div style='font-weight: bold;padding:10px 10px;'>";
            //                    html += "<div style='font-weight: bold;width:15%;display:inline-block'>DCI:</div>";
            //                    html += "<div style='font-weight: bold;width:84%;display:inline-block'>" + campos[0] + "</div>";

            //                    html += "<table style='width: 100%;border-collapse: collapse;padding:0px 15px;margin-top:15px;'>";
            //                    html += "<tr>";
            //                    html += "<td style='font-weight: bold;width:50%;text-align:center'>Material</td>";
            //                    html += "<td style='font-weight: bold;width:25%;text-align:center'>Cantidad</td>";
            //                    html += "<td style='font-weight: bold;width:25%;text-align:center'>U.M.</td>";
            //                    html += "</tr>";
            //                    html += "<tr>";
            //                    html += "<td >" + campos[1] + "</td>";
            //                    html += "<td style='text-align:center'>" + campos[2] + "</td>";
            //                    html += "<td style='text-align:center'>" + campos[3] + "</td>";
            //                    html += "</tr>";

            //                    nombre = campos[0];

            //                }
            //                else
            //                {
            //                    html += "<tr>";
            //                    html += "<td >" + campos[1] + "</td>";
            //                    html += "<td style='text-align:center'>" + campos[2] + "</td>";
            //                    html += "<td style='text-align:center'>" + campos[3] + "</td>";
            //                    html += "</tr>";
            //                }

            //                int index = i + 1;
            //                if (index == nDetalle)
            //                {
            //                    html += "</table>";
            //                    html += "</div>";
            //                }
            //                else
            //                {
            //                    campoSiguiente = detalleMaterial[index].Split('¦');
            //                    if (!nombre.Equals(campoSiguiente[0]))
            //                    {
            //                        html += "</table>";
            //                        html += "</div>";
            //                    }

            //                }

            //            }

            //        }




            //        html += "<div style='padding:0px 15px;margin-top:120px;'>";
            //        html += "<table style='width: 100%;border-collapse: collapse;'>";


            //        html += "<tr>";
            //        html += "<td style='text-align:center;width:45%;'>";
            //        string archivo = cabecera[17];
            //        if (!String.IsNullOrEmpty(archivo) && File.Exists(archivo))
            //        {
            //            string base64 = Convert.ToBase64String(File.ReadAllBytes(archivo));
            //            html += "<img style='width: 180px;'  src='data:image/png;base64," + base64 + "' />";
            //        }

            //        html += "</td>";
            //        html += "<td style='width:10%;'></td>";
            //        html += "<td  style='width:45%;'></td>";
            //        html += "</tr>";

            //        html += "<tr>";
            //        html += "<td style='width:45%;border-top: 1px solid;'></td>";
            //        html += "<td style='width:10%;'></td>";
            //        html += "<td style='width:45%;border-top: 1px solid;'></td>";
            //        html += "</tr>";



            //        html += "<tr>";
            //        html += "<td>";
            //        html += "<div style='text-align:center;margin-top:10px;'>" + cabecera[11] + "</div>";
            //        html += "<div style='text-align:center;'>" + cabecera[12] + "</div>";
            //        html += "<div style='text-align:center;'><span style='font-weight: bold'>CMP:</span>" + cabecera[13] + "<span style='font-weight: bold;margin-left:10px'>RNE:</span>" + cabecera[14] + "</div>";
            //        html += "</td>";
            //        html += "<td></td>";
            //        html += "<td>";
            //        html += "<div style='text-align:center;margin-top:10px;'>" + cabecera[8] + "</div>";
            //        html += "<div style='text-align:center;'>" + cabecera[15] + "</div>";

            //        html += "</td>";
            //        html += "</tr>";

            //        html += "</table>";
            //        html += "<div>";




            //        html += "</body>";
            //        html += "</html>";


            //        var htmlToPdf = new NReco.PdfGenerator.HtmlToPdfConverter();
            //        htmlToPdf.Orientation = NReco.PdfGenerator.PageOrientation.Portrait;
            //        htmlToPdf.Size = NReco.PdfGenerator.PageSize.A4;
            //        htmlToPdf.Zoom = 1;


            //        htmlToPdf.PageHeaderHtml = htmlheader;
            //        htmlToPdf.PageFooterHtml = "<div style='padding:5px!important;font-size:12px;text-align:right;font-family:Calibri;'> Pág. : <span class='page'></span>/<span class='topage'></span></div>";


            //        var pdfBytes = htmlToPdf.GeneratePdf(html);

            //        string resultados = Convert.ToBase64String(pdfBytes);
            //        ResultadoLaboratorio rl = new ResultadoLaboratorio();
            //        rl.documento = resultados;


            //        return new RespuestaBE<ResultadoLaboratorio>()
            //        {
            //            rpt = 0,
            //            mensaje = "",
            //            data = rl
            //        };

            //    }
            //    else
            //    {
            //        return new RespuestaBE<ResultadoLaboratorio>()
            //        {
            //            rpt = 101,
            //            mensaje = "Sin información para generar el pdf",
            //            data = null
            //        };
            //    }


            //}
            //catch (Exception ex)
            //{
            //    return new ErrorDA().RegistrarError<ResultadoLaboratorio>(ex, "WS", "Cita.svc");
            //}
        }
        public RespuestaBE<TokenIzipayBE> ObtenerTokenPagoIzipayFarmacia(string numeroPedido, string tipoDocumento, string numeroDocumento, string monto, string correo, string idClinica, string canal, int formTokenVersion)
        {
            throw new WebFaultException(HttpStatusCode.BadRequest);
            //#region Validacion de Parámetros
            //int varIdClinica;

            //if (!string.IsNullOrEmpty(idClinica))
            //{
            //    if (!int.TryParse(idClinica, out varIdClinica))
            //    {
            //        return new RespuestaBE<TokenIzipayBE>()
            //        {
            //            rpt = 101,
            //            mensaje = "El parámetro idClinica debe ser numérico",
            //            data = null
            //        };
            //    }
            //}

            //int varNumeroPedido;
            //if (!string.IsNullOrEmpty(numeroPedido))
            //{
            //    if (!int.TryParse(numeroPedido, out varNumeroPedido))
            //    {
            //        return new RespuestaBE<TokenIzipayBE>()
            //        {
            //            rpt = 101,
            //            mensaje = "El parámetro numeroPedido debe ser numérico",
            //            data = null
            //        };
            //    }
            //}
            //#endregion
            //try
            //{
            //    string serializedResult = "", responseWS = "";
            //    if (String.IsNullOrEmpty(monto))
            //    {
            //        return new RespuestaBE<TokenIzipayBE>()
            //        {
            //            rpt = 899,
            //            mensaje = "Debe enviar el monto",
            //            data = null
            //        };
            //    }

            //    TokenIzipayBE oTokenIzipayBE = new TokenIzipayBE();
            //    oTokenIzipayBE.token = "";
            //    DatosPagoIzipayBE oDatosPagoBE = new CitaDA().ObtenerDatosPagoIzipayFarmacia(idClinica, canal);
            //    oDatosPagoBE.monto = monto;
            //    oDatosPagoBE.correo = correo;
            //    oDatosPagoBE.tokenEmail = numeroDocumento;

            //    CookieContainer cookies = new CookieContainer();
            //    HttpClientHandler handler = new HttpClientHandler();

            //    handler.CookieContainer = cookies;
            //    handler.UseCookies = true;
            //    handler.AllowAutoRedirect = true;

            //    using (var client = new HttpClient(handler))
            //    {
            //        try
            //        {
            //            client.DefaultRequestHeaders.Add("User-Agent", "Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36");
            //            client.DefaultRequestHeaders.Add("accept", "*/*");
            //            client.DefaultRequestHeaders.Add("Connection", "keep-alive");


            //            string credentials = Convert.ToBase64String(Encoding.ASCII.GetBytes(oDatosPagoBE.user + ":" + oDatosPagoBE.password));
            //            client.DefaultRequestHeaders.Add("Authorization", "Basic " + credentials);

            //            System.Net.ServicePointManager.ServerCertificateValidationCallback = (object se, System.Security.Cryptography.X509Certificates.X509Certificate cert, System.Security.Cryptography.X509Certificates.X509Chain chain, System.Net.Security.SslPolicyErrors sslerror) => true;
            //            System.Net.ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls;

            //            string url = oDatosPagoBE.merchant;

            //            var datos = new Dictionary<string, object>();
            //            datos["email"] = oDatosPagoBE.correo;
            //            datos["reference"] = oDatosPagoBE.tokenEmail;//es el dni paciente

            //            var infoCliente = new Dictionary<string, string>();
            //            infoCliente["firstName"] = oDatosPagoBE.nombreCompletoPaciente;
            //            infoCliente["lastName"] = oDatosPagoBE.apellidoCompletoPaciente;
            //            infoCliente["address"] = oDatosPagoBE.direccionPaciente;
            //            infoCliente["streetNumber"] = oDatosPagoBE.numeroDireccionPaciente;
            //            infoCliente["phoneNumber"] = oDatosPagoBE.telefono;


            //            datos["billingDetails"] = infoCliente;

            //            int montoIzipay = 0;
            //            if (oDatosPagoBE.monto.IndexOf(".") > -1)
            //            {
            //                montoIzipay = int.Parse(oDatosPagoBE.monto.Replace(".", ""));
            //            }
            //            else
            //            {
            //                montoIzipay = int.Parse(oDatosPagoBE.monto + "00");
            //            }

            //            izipay o = new izipay();
            //            o.amount = montoIzipay;
            //            o.currency = "PEN";
            //            o.orderId = numeroPedido;
            //            o.formTokenVersion = formTokenVersion;

            //            o.customer = datos;

            //            var serializer = new JavaScriptSerializer();
            //            serializedResult = serializer.Serialize(o);

            //            HttpResponseMessage result = client.PostAsync(new Uri(url), new StringContent(serializedResult, Encoding.UTF8, "application/json")).Result;
            //            if (result.IsSuccessStatusCode)
            //            {
            //                responseWS = result.Content.ReadAsStringAsync().Result;

            //                if (!String.IsNullOrEmpty(responseWS))
            //                {

            //                    dynamic obj = serializer.Deserialize<object>(responseWS);

            //                    if (!String.IsNullOrEmpty(obj["status"]) && obj["status"] == "SUCCESS")
            //                    {
            //                        oTokenIzipayBE.token = obj["answer"]["formToken"];
            //                    }
            //                }

            //            }

            //        }
            //        catch (Exception e)
            //        {
            //            new ErrorDA().GrabarLog(e.Message, "WS", "Cita.svc/ObtenerTokenPagoIzipayFarmacia", e.StackTrace, serializedResult);
            //            RespuestaBE<TokenIzipayBE> er = new ErrorDA().RegistrarError<TokenIzipayBE>(e, "WS", "Cita.svc");

            //            return new RespuestaBE<TokenIzipayBE>()
            //            {
            //                rpt = 101,
            //                mensaje = "Error al obtener token izipay",
            //                data = null
            //            };

            //        }

            //    }
            //    if (String.IsNullOrEmpty(oTokenIzipayBE.token))
            //    {
            //        new ErrorDA().GrabarLog("Valor de token de pago no proporcionado por Izipay", "WS", "Cita.svc/ObtenerTokenPagoIzipayFarmacia", responseWS, serializedResult);
            //        return new RespuestaBE<TokenIzipayBE>()
            //        {
            //            rpt = 101,
            //            mensaje = "Error al obtener token izipay",
            //            data = null
            //        };

            //    }

            //    return new RespuestaBE<TokenIzipayBE>()
            //    {
            //        rpt = 0,
            //        mensaje = "",
            //        data = oTokenIzipayBE
            //    };
            //}
            //catch (Exception ex)
            //{
            //    return new ErrorDA().RegistrarError<TokenIzipayBE>(ex, "WS", "Cita.svc");
            //}
        }
        public RespuestaBE<IzipaySDKBE> ObtenerDatosIzipaySDKFarmacia(string numeroPedido, string idClinica, string canal)
        {
            throw new WebFaultException(HttpStatusCode.BadRequest);
            //#region Validacion de Parámetros
            //int varIdClinica;

            //if (!string.IsNullOrEmpty(idClinica))
            //{
            //    if (!int.TryParse(idClinica, out varIdClinica))
            //    {
            //        return new RespuestaBE<IzipaySDKBE>()
            //        {
            //            rpt = 101,
            //            mensaje = "El parámetro idClinica debe ser numérico",
            //            data = null
            //        };
            //    }
            //}

            //int varNumeroPedido;
            //if (!string.IsNullOrEmpty(numeroPedido))
            //{
            //    if (!int.TryParse(numeroPedido, out varNumeroPedido))
            //    {
            //        return new RespuestaBE<IzipaySDKBE>()
            //        {
            //            rpt = 101,
            //            mensaje = "El parámetro numeroPedido debe ser numérico",
            //            data = null
            //        };
            //    }
            //}
            //#endregion
            //try
            //{
            //    IzipaySDKBE oIzipaySDKBE = new CitaDA().ObtenerDatosIzipaySDKFarmacia(idClinica, canal);
            //    return new RespuestaBE<IzipaySDKBE>()
            //    {
            //        rpt = 0,
            //        mensaje = "",
            //        data = oIzipaySDKBE
            //    };

            //}
            //catch (Exception ex)
            //{
            //    return new ErrorDA().RegistrarError<IzipaySDKBE>(ex, "WS", "Cita.svc");
            //}
        }
        public RespuestaBE<ProtocoloChequeoMedicoBE> ObtenerProtocoloChequeoMedico(string tipoDocumento, String numeroDocumento, string clinicaId)
        {
            throw new WebFaultException(HttpStatusCode.BadRequest);
            //int varIdClinica;

            //if (!string.IsNullOrEmpty(clinicaId))
            //{
            //    if (!int.TryParse(clinicaId, out varIdClinica))
            //    {
            //        return new RespuestaBE<ProtocoloChequeoMedicoBE>()
            //        {
            //            rpt = 101,
            //            mensaje = "El parámetro clinicaId debe ser numérico",
            //            data = null
            //        };
            //    }
            //}
            //try
            //{
            //    string lista = new CitaDA().ObtenerProtocolosChequeoMedico(tipoDocumento, numeroDocumento, clinicaId);

            //    ProtocoloChequeoMedicoBE oProtocoloChequeoMedicoBE = new ProtocoloChequeoMedicoBE();
            //    if (!string.IsNullOrEmpty(lista))
            //    {

            //        string[] listas = lista.Split('¯');
            //        string[] lstAseguradoras = listas[0].Split('¬');
            //        string[] mensajeSinCobertura = listas[1].Split('¦');
            //        string[] turnoHorario = listas[2].Split('¦');
            //        string[] edadGenero = listas[3].Split('¦');
            //        string[] infoClinica = listas[4].Split('¦');

            //        int n = lstAseguradoras.Length;
            //        string[] campos = new string[] { };
            //        List<string> productos = new List<string>();

            //        SitedsConAse270RequestBE oSitedsConAse270RequestBE = new SitedsConAse270RequestBE();
            //        for (int i = 0; i < n; i++)
            //        {
            //            campos = lstAseguradoras[i].Split('¦');

            //            oSitedsConAse270RequestBE = new SitedsConAse270RequestBE();
            //            oSitedsConAse270RequestBE.NoTransaccion = "270_CON_ASE";
            //            oSitedsConAse270RequestBE.IdRemitente = infoClinica[2]; //codSunasa
            //            oSitedsConAse270RequestBE.IdReceptor = campos[2]; //codIafas
            //            oSitedsConAse270RequestBE.FeTransaccion = DateTime.Now.ToString("YYYYmmdd");
            //            oSitedsConAse270RequestBE.HoTransaccion = DateTime.Now.ToString("HHmmss");
            //            oSitedsConAse270RequestBE.IdCorrelativo = "028091546";
            //            oSitedsConAse270RequestBE.IdTransaccion = "270";
            //            oSitedsConAse270RequestBE.TiFinalidad = "13";
            //            oSitedsConAse270RequestBE.CaRemitente = "2";
            //            oSitedsConAse270RequestBE.NuRucRemitente = infoClinica[1]; //Ruc
            //            oSitedsConAse270RequestBE.TxRequest = "CN";
            //            oSitedsConAse270RequestBE.CaReceptor = "2";
            //            oSitedsConAse270RequestBE.TiDocumento = tipoDocumento;
            //            oSitedsConAse270RequestBE.NuDocumento = numeroDocumento;

            //            oSitedsConAse270RequestBE.CaPaciente = "";
            //            oSitedsConAse270RequestBE.IdReContratante = "";
            //            oSitedsConAse270RequestBE.ApPaternoPaciente = "";
            //            oSitedsConAse270RequestBE.ApMaternoPaciente = "";
            //            oSitedsConAse270RequestBE.CoAfPaciente = "";
            //            oSitedsConAse270RequestBE.CoParentesco = "";
            //            oSitedsConAse270RequestBE.CoProducto = "";
            //            oSitedsConAse270RequestBE.DeProducto = "";
            //            oSitedsConAse270RequestBE.CoInProducto = "";
            //            oSitedsConAse270RequestBE.NoContratante = "";
            //            oSitedsConAse270RequestBE.CoReContratante = "";
            //            oSitedsConAse270RequestBE.NoMaContratante = "";
            //            oSitedsConAse270RequestBE.NoPaContratante = "";
            //            oSitedsConAse270RequestBE.NoPaciente = "";
            //            oSitedsConAse270RequestBE.NuPlan = "";
            //            oSitedsConAse270RequestBE.TiCaContratante = "";
            //            oSitedsConAse270RequestBE.TiDoContratante = "";
            //            oSitedsConAse270RequestBE.CoEspecialidad = "";
            //            oSitedsConAse270RequestBE.NuCobertura = "";
            //            oSitedsConAse270RequestBE.BeMaxInicial = "";
            //            oSitedsConAse270RequestBE.CoTiCobertura = "";
            //            oSitedsConAse270RequestBE.CoSuTiCobertura = "";


            //            var tarea = Task.Run(() =>
            //            {
            //                string producto = obtenerProductosSITEDS(oSitedsConAse270RequestBE).Result;
            //                if (!String.IsNullOrEmpty(producto))
            //                {
            //                    productos.Add(producto + "¦" + campos[0]);
            //                }

            //            });

            //            tarea.Wait();

            //        }


            //        int nProductos = productos.Count;

            //        if (nProductos > 0)
            //        {

            //            string listaPlanComponente = new CitaDA().ObtenerPlanesComponentesChequeoMedico("1", clinicaId);
            //            string[] lstPlanes = new string[] { };
            //            string[] lstComponentes = new string[] { };

            //            if (!String.IsNullOrEmpty(listaPlanComponente))
            //            {

            //                string[] listasPlanesComponentes = listaPlanComponente.Split('¯');
            //                lstPlanes = listasPlanesComponentes[0].Split('¬');
            //                lstComponentes = listasPlanesComponentes[1].Split('¬');

            //            }



            //            string rutaListas = ConfigurationManager.AppSettings["rutaSitedsListas"];

            //            string[] lstEstado = System.IO.File.ReadAllText(rutaListas + "lstEstado.txt").Split('¬');
            //            string[] lstParentesco = System.IO.File.ReadAllText(rutaListas + "lstParentesco.txt").Split('¬');
            //            string[] lstProducto = System.IO.File.ReadAllText(rutaListas + "lstProductos.txt").Split('¬');

            //            string desParentesco = "";
            //            string desEstado = "";
            //            string desProducto = "";

            //            int nPlanes = lstPlanes.Length;
            //            int nComponentes = lstComponentes.Length;
            //            string[] campoPlanes;


            //            oProtocoloChequeoMedicoBE.detalleProtocolo = new List<ProtocoloBE>();

            //            for (int i = 0; i < nProductos; i++)
            //            {
            //                campos = productos[i].Split('¦');

            //                //6 codEstado  1 o 9
            //                if (campos[6].Equals("1") || campos[6].Equals("9"))
            //                {

            //                    ProtocoloBE oProtocoloBE = new ProtocoloBE();

            //                    desParentesco = buscarDescripcion(lstParentesco, campos[4]);
            //                    desEstado = buscarDescripcion(lstEstado, campos[6]);
            //                    desProducto = buscarDescripcion(lstProducto, campos[0]);


            //                    oProtocoloBE.codigoProducto = campos[0];
            //                    oProtocoloBE.descripcionProducto = desProducto;
            //                    oProtocoloBE.codigoParentesco = campos[4];
            //                    oProtocoloBE.parentesco = desParentesco;
            //                    oProtocoloBE.contratante = campos[5];
            //                    oProtocoloBE.codigoEstado = campos[6];
            //                    oProtocoloBE.estado = desEstado;
            //                    oProtocoloBE.codigoAsegurado = campos[8];
            //                    oProtocoloBE.rucContratante = campos[14];
            //                    oProtocoloBE.detallePlanes = new List<Planes>();

            //                    /*
            //                        sbRegistro.Add(item.CodProducto);
            //                        sbRegistro.Add(item.ApellidoPaternoAfiliado);
            //                        sbRegistro.Add(item.ApellidoMaternoAfiliado);
            //                        sbRegistro.Add(item.NombresAfiliado);
            //                        sbRegistro.Add(item.CodParentesco);
            //                        sbRegistro.Add(item.NombreContratante);
            //                        sbRegistro.Add(item.CodEstado);
            //                        sbRegistro.Add(item.CodEstadoCivil);
            //                        sbRegistro.Add(item.CodigoAfiliado);
            //                        sbRegistro.Add(item.CodTipoDocumentoAfiliado);
            //                        sbRegistro.Add(item.NumeroDocumentoAfiliado);
            //                        sbRegistro.Add(item.NumeroPlan);
            //                        sbRegistro.Add(item.NumeroSCTR);
            //                        sbRegistro.Add(item.NumeroContratoAfiliado);
            //                        sbRegistro.Add(item.NumeroDocumentoContratante);
            //                        sbRegistro.Add("");
            //                        sbRegistro.Add(item.NombreContratante);
            //                        sbRegistro.Add(item.TipoCalificadorContratante);
            //                        sbRegistro.Add(item.CodTipoDocumentoContratante);
            //                        sbRegistro.Add("");    
            //                 */

            //                    for (int j = 0; j < nPlanes; j++)
            //                    {
            //                        campoPlanes = lstPlanes[j].Split('¦');

            //                        if ((campoPlanes[9] == "" || campoPlanes[9] == oProtocoloBE.rucContratante) &&
            //                            campoPlanes[3] == oProtocoloBE.codigoProducto &&
            //                            campoPlanes[4] == campos[20] &&
            //                            Convert.ToInt32(campoPlanes[5]) <= Convert.ToInt32(edadGenero[0]) &&
            //                            Convert.ToInt32(edadGenero[0]) <= Convert.ToInt32(campoPlanes[6]) &&
            //                            (campoPlanes[7] == "A" || campoPlanes[7] == edadGenero[1]) &&
            //                            campoPlanes[8] == "ASG")
            //                        {

            //                            Planes oPlanes = new Planes();
            //                            oPlanes.id = campoPlanes[2];
            //                            oPlanes.codigo = campoPlanes[0];
            //                            oPlanes.descripcion = campoPlanes[1];
            //                            oPlanes.detalleComponentes = new List<Componentes>();

            //                            if (nComponentes > 0)
            //                            {

            //                                string[] cabeceras = lstComponentes[0].Split('¦');
            //                                int nCabeceras = cabeceras.Length;
            //                                int indexCabecera = -1;
            //                                for (int z = 2; z < nCabeceras; z++)
            //                                {
            //                                    if ('[' + oPlanes.codigo + ']' == cabeceras[z])
            //                                    {
            //                                        indexCabecera = z;
            //                                        break;
            //                                    }
            //                                }
            //                                if (indexCabecera > -1)
            //                                {

            //                                    for (int z = 1; z < nComponentes; z++)
            //                                    {
            //                                        string[] campoComponente = lstComponentes[z].Split('¦');

            //                                        if (campoComponente[indexCabecera].Equals("1"))
            //                                        {
            //                                            Componentes oComponentes = new Componentes();
            //                                            oComponentes.codigo = campoComponente[0];
            //                                            oComponentes.descripcion = campoComponente[1];

            //                                            oPlanes.detalleComponentes.Add(oComponentes);

            //                                        }

            //                                    }

            //                                }

            //                            }

            //                            oProtocoloBE.detallePlanes.Add(oPlanes);

            //                        }

            //                    }

            //                    oProtocoloChequeoMedicoBE.detalleProtocolo.Add(oProtocoloBE);

            //                }


            //            }


            //            if (oProtocoloChequeoMedicoBE.detalleProtocolo.Count > 0)
            //            {

            //                oProtocoloChequeoMedicoBE.error = null;
            //                oProtocoloChequeoMedicoBE.errorDetalle = null;
            //                oProtocoloChequeoMedicoBE.turno = turnoHorario[1];
            //                oProtocoloChequeoMedicoBE.horario = turnoHorario[2];

            //            }
            //            else
            //            {

            //                oProtocoloChequeoMedicoBE.detalleProtocolo = null;
            //                oProtocoloChequeoMedicoBE.error = mensajeSinCobertura[1];
            //                oProtocoloChequeoMedicoBE.errorDetalle = mensajeSinCobertura[2];
            //                oProtocoloChequeoMedicoBE.turno = null;
            //                oProtocoloChequeoMedicoBE.horario = null;

            //            }


            //        }
            //        else
            //        {
            //            oProtocoloChequeoMedicoBE.detalleProtocolo = null;
            //            oProtocoloChequeoMedicoBE.error = mensajeSinCobertura[1];
            //            oProtocoloChequeoMedicoBE.errorDetalle = mensajeSinCobertura[2];
            //            oProtocoloChequeoMedicoBE.turno = null;
            //            oProtocoloChequeoMedicoBE.horario = null;
            //        }


            //        return new RespuestaBE<ProtocoloChequeoMedicoBE>()
            //        {
            //            rpt = 0,
            //            mensaje = "",
            //            data = oProtocoloChequeoMedicoBE
            //        };

            //    }
            //    else
            //    {
            //        return new RespuestaBE<ProtocoloChequeoMedicoBE>()
            //        {
            //            rpt = 101,
            //            mensaje = "Sin configuración de listas",
            //            data = null
            //        };
            //    }

            //}
            //catch (Exception ex)
            //{
            //    return new ErrorDA().RegistrarError<ProtocoloChequeoMedicoBE>(ex, "WS", "Cita.svc");
            //}
        }
        public RespuestaSimpleBE EnviarCorreoImagenes(string idCita, string archivoConsentimiento = "", string nombreArchivoConsentimiento = "")
        {
            throw new WebFaultException(HttpStatusCode.BadRequest);
            //#region Validacion de Parámetros
            //int varIdCita;
            //if (!int.TryParse(idCita, out varIdCita))
            //{
            //    return new RespuestaSimpleBE()
            //    {
            //        rpt = 105,
            //        mensaje = "El parámetro idCita debe ser numérico",
            //        data = null
            //    };
            //}
            //#endregion
            //bool statusEnvioEmail = false;
            //Dictionary<string, string> varParametrosCorreo;
            //try
            //{
            //    varParametrosCorreo = new CitaDA().ObtenerDatosCita(varIdCita.ToString());

            //    //ClasesGenericas.EnviarCorreo(varParametrosCorreo["Email"], "Cita_RegistrarCitaAliada", varParametrosCorreo, null, "SMTPAliada", "", ';', "", ';', archivoConsentimiento, nombreArchivoConsentimiento);
            //    if (varParametrosCorreo["IDClinica"].Equals("9"))
            //    {
            //        //Aliada
            //        if (!String.IsNullOrEmpty(archivoConsentimiento) && !String.IsNullOrEmpty(nombreArchivoConsentimiento))
            //        {
            //            statusEnvioEmail = ClasesGenericas.EnviarCorreo(varParametrosCorreo["Email"], "Cita_RegistrarCitaAliada", varParametrosCorreo, null, "SMTPAliada", "", ';', "", ';', archivoConsentimiento, nombreArchivoConsentimiento);
            //        }
            //        else
            //        {
            //            statusEnvioEmail = ClasesGenericas.EnviarCorreo(varParametrosCorreo["Email"], "Cita_RegistrarCitaAliada", varParametrosCorreo, null, "SMTPAliada");
            //        }
            //    }
            //    else
            //    {
            //        //mb cambio ahora envia link pago
            //        statusEnvioEmail = enviarCorreoCitaPresencial(varParametrosCorreo["IDCita"], "", archivoConsentimiento, nombreArchivoConsentimiento);

            //        //SANNA
            //        //if (!String.IsNullOrEmpty(archivoConsentimiento) && !String.IsNullOrEmpty(nombreArchivoConsentimiento))
            //        //{
            //        //    statusEnvioEmail = ClasesGenericas.EnviarCorreo(varParametrosCorreo["Email"], "Cita_RegistrarCita", varParametrosCorreo, null, "SMTP", "", ';', "", ';', archivoConsentimiento, nombreArchivoConsentimiento);
            //        //}
            //        //else
            //        //{
            //        //    statusEnvioEmail = ClasesGenericas.EnviarCorreo(varParametrosCorreo["Email"], "Cita_RegistrarCita", varParametrosCorreo);
            //        //}
            //    }
            //}
            //catch (Exception ex)
            //{
            //    return new ErrorDA().RegistrarError(ex, "WS", "Cita.svc");
            //}
            //return new RespuestaSimpleBE()
            //{
            //    rpt = statusEnvioEmail ? 0 : -1,
            //    mensaje = statusEnvioEmail ? "Enviado satisfactoriamente" : "",
            //    data = statusEnvioEmail ? varParametrosCorreo["IDCita"] : ""
            //};
        }
        //public RespuestaSimpleBE ReenviarOTP(string tipoDocumento, string numeroDocumento)
        //{

        //    if (string.IsNullOrEmpty(tipoDocumento) || string.IsNullOrEmpty(numeroDocumento) )
        //    {
        //        throw new WebFaultException(HttpStatusCode.BadRequest);
        //    }
        //    if (tipoDocumento != "1" && tipoDocumento != "2" && tipoDocumento != "3")
        //    {
        //        return new RespuestaSimpleBE()
        //        {
        //            rpt = 101,
        //            mensaje = "Sólo se soportan los valores \"1\" (DNI), \"2\" (CE) o \"3\" (PAS) en el parámetro tipoDocumento",
        //            data = null
        //        };
        //    }
        //    if (numeroDocumento.Length > 20)
        //    {
        //        return new RespuestaSimpleBE()
        //        {
        //            rpt = 102,
        //            mensaje = "El parámetro numeroDocumento no puede tener más de 20 caracteres",
        //            data = null
        //        };
        //    }

        //    //var resultados = new ResponseLaboratorio();

        //    try
        //    {

        //        RespuestaSimpleBE oRespuestaSimpleBE = new RespuestaSimpleBE();
        //        OTPBE oOTPBE = new CitaDA().ObtenerOTP(tipoDocumento, numeroDocumento);

        //        if (oOTPBE != null)
        //        {

        //            string idOTP = new CitaDA().AnularOTP(oOTPBE.idOTP.ToString());

        //            string tipoCaracteresOTP = ConfigurationManager.AppSettings["tipoCaracteresOTP"];
        //            string cantidadAleatorioOTP = ConfigurationManager.AppSettings["cantidadAleatorioOTP"];
        //            string tiempoOTP = ConfigurationManager.AppSettings["tiempoOTP"];


        //            string codigoOTP = generarCaracterAzar(int.Parse(tipoCaracteresOTP), int.Parse(cantidadAleatorioOTP));

        //            DateTime FechaHoraInicio = DateTime.Now;
        //            DateTime FechaHoraFin = FechaHoraInicio.AddSeconds(double.Parse(tiempoOTP));

        //            Dictionary<string, string> varParametros = new CitaDA().EnviarOTP(codigoOTP, tipoDocumento, numeroDocumento, oOTPBE.Correo, FechaHoraInicio, FechaHoraFin, true, "ACT");


        //            if (!string.IsNullOrEmpty(varParametros["IdOTP"]))
        //            {

        //                string asunto = ConfigurationManager.AppSettings["asuntoCorreoOTP"];
        //                string contenido = ConfigurationManager.AppSettings["asuntoContenidoOTP"].ToString().Replace("@codigo", codigoOTP);


        //                bool exito = ClasesGenericas.EnviarCorreoPlantillaHTML(oOTPBE.Correo, asunto, contenido, null, "SMTP", "", ';', "", ';', "", "");

        //                if (exito)
        //                {
        //                    oRespuestaSimpleBE.rpt = 0;
        //                    oRespuestaSimpleBE.mensaje = "";
        //                    oRespuestaSimpleBE.data = codigoOTP;
        //                }
        //                else
        //                {
        //                    string id = new CitaDA().AnularOTP(varParametros["IdOTP"]);
        //                    oRespuestaSimpleBE.rpt = 104;
        //                    oRespuestaSimpleBE.mensaje = "Error al enviar correo";
        //                }
        //            }
        //            else
        //            {
        //                oRespuestaSimpleBE.rpt = 104;
        //                oRespuestaSimpleBE.mensaje = "Error al grabar";
        //            }

        //        }
        //        else {

        //            oRespuestaSimpleBE.rpt = 104;
        //            oRespuestaSimpleBE.mensaje = "No se enecontro código OTP activo para el usuario";
        //        }



        //        return oRespuestaSimpleBE;

        //    }
        //    catch (Exception ex)
        //    {
        //        return new ErrorDA().RegistrarError(ex, "WS", "Cita.svc");
        //    }
        //}
        public RespuestaSimpleBE RegistrarPagoCitaSynapsis(string idCitaPresencial, string idCita, string codigo, string mensaje, string fecha,
                                                    string hora, long purchaseNumber, string transactionID, string numeroTarjeta,
                                                    string deseaBoleta, string ruc, string razonSocial, string direccion, string origen,
                                                    string monto, string IDUnico, string tokenEmail, string nombreVisa, string apellidoVisa,
                                                    string firma, string tipoTarjeta = null)
        {
            throw new WebFaultException(HttpStatusCode.BadRequest);
            //try
            //{
            //    string rutaArchivo = ConfigurationManager.AppSettings["_LogPath"];

            //    string nombreArchivo = "RegistrarPagoCitaSynapsis.txt";
            //    //string cadena = "Prueba";
            //    string cadena = String.Format(
            //        "App_Proc_Cita_RegistrarPagoSynapsis:\r\n" +
            //        "===================================\r\n" +
            //        "idCitaPresencial = {0}\r\n" +
            //        "idCita = {1}\r\n" +
            //        "codigo = {2}\r\n" +
            //        "mensaje = {3}\r\n" +
            //        "fecha = {4}\r\n" +
            //        "hora = {5}\r\n" +
            //        "purchaseNumber = {6}\r\n" +
            //        "transactionID = {7}\r\n" +
            //        "numeroTarjeta = {8}\r\n" +
            //        "IDUnico = {9}",
            //        idCitaPresencial, idCita, codigo, mensaje,
            //        fecha, hora, purchaseNumber,
            //        transactionID == null ? "" : transactionID,
            //        numeroTarjeta == null ? "" : numeroTarjeta,
            //        IDUnico == null ? "" : IDUnico
            //    );
            //    using (FileStream stream = new FileStream(rutaArchivo + nombreArchivo, FileMode.Append, FileAccess.Write, FileShare.Write))
            //    {
            //        using (StreamWriter streamWriter = new StreamWriter(stream, Encoding.Default))
            //        {
            //            streamWriter.Write(cadena);
            //            streamWriter.WriteLine("");
            //            streamWriter.WriteLine(new string('_', 50));
            //        }
            //    }

            //    var succes = new CitaDA().RegistrarPagoCitaSynapsis(idCitaPresencial, idCita, codigo, mensaje, fecha, hora,
            //                                                purchaseNumber, transactionID == null ? "" : transactionID, numeroTarjeta == null ? "" : numeroTarjeta,
            //                                                deseaBoleta, ruc, razonSocial, direccion, origen, monto == null ? "" : monto, IDUnico == null ? "" : IDUnico,
            //                                                tokenEmail == null ? "" : tokenEmail, nombreVisa == null ? "" : nombreVisa, apellidoVisa == null ? "" : apellidoVisa,
            //                                                firma, tipoTarjeta);

            //    // [Inicio] - Registrar en intermedias (BORRAR)
            //    if (succes)
            //    {
            //        var id = (String.IsNullOrEmpty(idCitaPresencial)) ? idCita : idCitaPresencial;
            //        var tipo = (String.IsNullOrEmpty(idCitaPresencial)) ? 2 : 1;
            //        if (codigo == "000")
            //        {
            //            bool pagoRoyal = false;
            //            RespuestaSimpleBE pagoRoyalSimple = new RespuestaSimpleBE();

            //            if (tipo == 1) pagoRoyal = RegistroPagoRoyal(id, numeroTarjeta, tipoTarjeta, tipo, fecha, hora);
            //            else if (tipo == 2) pagoRoyalSimple = RegistroPagoRoyalVirtual(id, firma);
            //        }
            //    }
            //    // [Fin] - Registrar en intermedias (BORRAR)

            //    if (succes)
            //    {
            //        bool statusEnvioEmail;
            //        Dictionary<string, string> varParametrosCorreo;
            //        if (!String.IsNullOrEmpty(idCita))
            //        {
            //            //Virtual
            //            varParametrosCorreo = new CitaDA().DatosCitaVirtual(idCita);
            //            varParametrosCorreo.Add("FechaPago", fecha);
            //            varParametrosCorreo.Add("HoraPago", hora);
            //            varParametrosCorreo.Add("Transaccion", transactionID);
            //            try
            //            {
            //                if (codigo == "000")
            //                {
            //                    //bool pagoRoyal = RegistroPagoRoyal(idCita, numeroTarjeta);
            //                    if (varParametrosCorreo["IDClinica"].Equals("9"))
            //                    {
            //                        //Aliada
            //                        statusEnvioEmail = ClasesGenericas.EnviarCorreo(varParametrosCorreo["Email"], "Cita_RegistrarCitaVirtualAliadaPago", varParametrosCorreo, null, "SMTPVirtual", "", ';', varParametrosCorreo["EmailPago"], ';');
            //                    }
            //                    else if (varParametrosCorreo["IDClinica"].Equals("17"))
            //                    {
            //                        //DR ONLINE
            //                        statusEnvioEmail = ClasesGenericas.EnviarCorreo(varParametrosCorreo["Email"], "Cita_RegistrarCitaVirtualPagoDrOnline", varParametrosCorreo, null, "SMTPVirtual", "", ';', varParametrosCorreo["EmailPago"], ';');
            //                    }
            //                    else
            //                    {
            //                        //SANNA
            //                        statusEnvioEmail = ClasesGenericas.EnviarCorreo(varParametrosCorreo["Email"], "Cita_RegistrarCitaVirtualPago", varParametrosCorreo, null, "SMTPVirtual", "", ';', varParametrosCorreo["EmailPago"], ';');
            //                    }
            //                }
            //            }
            //            catch (Exception)
            //            {
            //            }
            //        }
            //        else
            //        {
            //            //Presencial
            //            varParametrosCorreo = new CitaDA().DatosCita(idCitaPresencial);
            //            varParametrosCorreo.Add("FechaPago", fecha);
            //            varParametrosCorreo.Add("HoraPago", hora);
            //            varParametrosCorreo.Add("Transaccion", transactionID);

            //            if (codigo == "000")
            //            {
            //                if (varParametrosCorreo["IDClinica"].Equals("9"))
            //                {
            //                    //Aliada
            //                    statusEnvioEmail = ClasesGenericas.EnviarCorreo(varParametrosCorreo["Email"], "Cita_RegistrarCitaAliadaPago", varParametrosCorreo, null, "SMTP", "", ';', varParametrosCorreo["EmailPago"], ';');
            //                }
            //                else
            //                {
            //                    //SANNA
            //                    statusEnvioEmail = ClasesGenericas.EnviarCorreo(varParametrosCorreo["Email"], "Cita_RegistrarCitaPago", varParametrosCorreo, null, "SMTP", "", ';', varParametrosCorreo["EmailPago"], ';');
            //                }
            //            }
            //        }
            //        return new RespuestaSimpleBE()
            //        {
            //            rpt = 0,
            //            mensaje = "Success",
            //            data = "true"
            //        };
            //    }
            //    else
            //    {
            //        return new RespuestaSimpleBE()
            //        {
            //            rpt = 1,
            //            mensaje = "Error, por favor comunicarse con soporte",
            //            data = "False"
            //        };
            //    }


            //}
            //catch (Exception ex)
            //{
            //    return new ErrorDA().RegistrarError(ex, "WS", "Cita.svc");

            //}
        }
        public RespuestaBE<List<ServicioInfo>> ServicioInfoListar(string idClinica)
        {
            throw new WebFaultException(HttpStatusCode.BadRequest);
            //if (string.IsNullOrEmpty(idClinica))
            //{
            //    throw new WebFaultException(HttpStatusCode.BadRequest);
            //}

            ////var resultados = new ResponseLaboratorio();

            //try
            //{
            //    string data = new CitaDA().ServicioInfoListar(idClinica);


            //    string[] lista = !String.IsNullOrEmpty(data) ? data.Split('¬') : new string[] { };
            //    int n = lista.Length;
            //    string[] campos;
            //    List<ServicioInfo> lstServicioInfo = new List<ServicioInfo>();
            //    ServicioInfo oServicioInfo = null;

            //    for (int i = 0; i < n; i++)
            //    {
            //        campos = lista[i].Split('¦');
            //        oServicioInfo = new ServicioInfo();
            //        oServicioInfo.servicioInfoId = int.Parse(campos[0]);
            //        oServicioInfo.descripcion = campos[1];
            //        oServicioInfo.abreviatura = campos[2];
            //        oServicioInfo.equipamiento = campos[3];

            //        lstServicioInfo.Add(oServicioInfo);
            //    }

            //    return new RespuestaBE<List<ServicioInfo>>()
            //    {
            //        rpt = 0,
            //        mensaje = "",
            //        data = lstServicioInfo
            //    };

            //}
            //catch (Exception ex)
            //{
            //    return new ErrorDA().RegistrarError<List<ServicioInfo>>(ex, "WS", "Cita.svc");
            //}
        }
        //public RespuestaBE<ListarOpcionesPagoBE> ListarOpcionesPago(string tipoDocumento, string numeroDocumento, string idCitaPresencial, string idCitaVirtual, string tipoPaciente)
        //{
        //    #region Validacion de Parámetros
        //    if (string.IsNullOrEmpty(tipoDocumento) || string.IsNullOrEmpty(numeroDocumento))
        //    {
        //        throw new WebFaultException(HttpStatusCode.BadRequest);
        //    }
        //    if (string.IsNullOrEmpty(idCitaPresencial) && string.IsNullOrEmpty(idCitaVirtual))
        //    {
        //        throw new WebFaultException(HttpStatusCode.BadRequest);
        //    }
        //    if (tipoDocumento != "1" && tipoDocumento != "2" && tipoDocumento != "3")
        //    {
        //        return new RespuestaBE<ListarOpcionesPagoBE>()
        //        {
        //            rpt = 100,
        //            mensaje = "Sólo se soportan los valores \"1\" (DNI), \"2\" (CE) o \"3\" (PAS) en el parámetro tipoDocumento",
        //            data = null
        //        };
        //    }
        //    if (numeroDocumento.Length > 20)
        //    {
        //        return new RespuestaBE<ListarOpcionesPagoBE>()
        //        {
        //            rpt = 101,
        //            mensaje = "El parámetro numeroDocumento no puede tener más de 20 caracteres",
        //            data = null
        //        };
        //    }
        //    if (!string.IsNullOrEmpty(idCitaPresencial) && !string.IsNullOrEmpty(idCitaVirtual))
        //    {
        //        return new RespuestaBE<ListarOpcionesPagoBE>()
        //        {
        //            rpt = 102,
        //            mensaje = "Solo enviar el parámetro idCitaPresencial o idCitaVirtual",
        //            data = null
        //        };
        //    }
        //    int varIDCita;
        //    if (!string.IsNullOrEmpty(idCitaPresencial))
        //    {
        //        if (!int.TryParse(idCitaPresencial, out varIDCita))
        //        {
        //            return new RespuestaBE<ListarOpcionesPagoBE>()
        //            {
        //                rpt = 103,
        //                mensaje = "El parámetro idCitaPresencial debe ser numérico",
        //                data = null
        //            };
        //        }
        //    }
        //    if (!string.IsNullOrEmpty(idCitaVirtual))
        //    {
        //        if (!int.TryParse(idCitaVirtual, out varIDCita))
        //        {
        //            return new RespuestaBE<ListarOpcionesPagoBE>()
        //            {
        //                rpt = 104,
        //                mensaje = "El parámetro idCitaVirtual debe ser numérico",
        //                data = null
        //            };
        //        }
        //    }
        //    if (!String.IsNullOrEmpty(tipoPaciente) && tipoPaciente != "1" && tipoPaciente != "2" && tipoPaciente != "3")
        //    {
        //        return new RespuestaBE<ListarOpcionesPagoBE>()
        //        {
        //            rpt = 105,
        //            mensaje = "Sólo se soportan los valores \"1\" (Asegurado), \"2\" (Particular) o \"3\" (Asegurado y Particular) en el parámetro tipoPaciente",
        //            data = null
        //        };
        //    }
        //    #endregion
        //    try
        //    {
        //        ListarOpcionesPagoBE oListarOpcionesPagoBE = new ListarOpcionesPagoBE();
        //        oListarOpcionesPagoBE.opcionesPago = new CitaDA().ListarOpcionesPago(tipoDocumento, numeroDocumento, idCitaPresencial, idCitaVirtual, tipoPaciente);

        //        if (oListarOpcionesPagoBE.opcionesPago != null && oListarOpcionesPagoBE.opcionesPago.Count > 0)
        //        {
        //            oListarOpcionesPagoBE.datosCita = new CitaDA().ObtenerDatosPagoV2(idCitaPresencial, idCitaVirtual);
        //        }

        //        //List<OpcionPagoBE> lOpcionPagoBE = new List<OpcionPagoBE>();
        //        //lOpcionPagoBE.Add(new OpcionPagoBE()
        //        //{
        //        //    tipoTarifa = "Seguro",
        //        //    RUCSeguro = "20431115825",
        //        //    IAFAS = "20002",
        //        //    nombre = "Pacifico EPS",
        //        //    codigoProducto = "EPS",
        //        //    nombreProducto = "REGULAR",
        //        //    codigoCobertura = "4100",
        //        //    nombreCobertura = "CONSULTA AMBULATORIA",
        //        //    monto = "110.00",
        //        //    origenMonto = "STDS",
        //        //    fechaPago = "",
        //        //    parentesco = "Titular"
        //        //});
        //        //lOpcionPagoBE.Add(new OpcionPagoBE()
        //        //{
        //        //    tipoTarifa = "Particular",
        //        //    RUCSeguro = "",
        //        //    IAFAS = "",
        //        //    nombre = "",
        //        //    codigoProducto = "",
        //        //    nombreProducto = "",
        //        //    codigoCobertura = "",
        //        //    nombreCobertura = "",
        //        //    monto = "120.00",
        //        //    origenMonto = "SETAP",
        //        //    fechaPago = "",
        //        //    parentesco = ""
        //        //});

        //        if (oListarOpcionesPagoBE != null && oListarOpcionesPagoBE.opcionesPago != null && oListarOpcionesPagoBE.opcionesPago.Count > 0)
        //        {
        //            return new RespuestaBE<ListarOpcionesPagoBE>()
        //            {
        //                rpt = 0,
        //                mensaje = "",
        //                data = oListarOpcionesPagoBE//.OrderBy(p => p.fechaOrdenamiento).ToList()
        //            };
        //        }
        //        else
        //        {
        //            return new RespuestaBE<ListarOpcionesPagoBE>()
        //            {
        //                rpt = 80,
        //                mensaje = "Lo sentimos, no se pudo procesar el pago en estos momentos. Por favor vuelve a intentarlo en unos minutos; de lo contrario puedes llamar a nuestro Contact Center al (01) 219-0000.",//"No existen opciones de pago disponibles",
        //                data = new ListarOpcionesPagoBE()//.OrderBy(p => p.fechaOrdenamiento).ToList()
        //            };
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        if (ex.Message.StartsWith("ERRFU:"))
        //        {
        //            return new RespuestaBE<ListarOpcionesPagoBE>()
        //            {
        //                rpt = 81,
        //                mensaje = ex.Message.Replace("ERRFU:", ""),
        //                data = new ListarOpcionesPagoBE()
        //            };
        //        }
        //        else
        //        {
        //            new ErrorDA().RegistrarError<ListarOpcionesPagoBE>(ex, "WS", "Cita.svc");
        //            return new RespuestaBE<ListarOpcionesPagoBE>()
        //            {
        //                rpt = 81,
        //                mensaje = "Lo sentimos, no se pudo procesar el pago en estos momentos. Por favor vuelve a intentarlo en unos minutos; de lo contrario puedes llamar a nuestro Contact Center al (01) 219-0000.",
        //                data = new ListarOpcionesPagoBE()//.OrderBy(p => p.fechaOrdenamiento).ToList()
        //            };
        //        }
        //        //return new ErrorDA().RegistrarError<ListarOpcionesPagoBE>(ex, "WS", "Cita.svc");
        //    }
        //}
        //public RespuestaSimpleBE ProcesarPagoIzipay(Stream oStream)
        //{
        //    //ProcesarPagoIzipay es donde llama la IPN
        //    RespuestaSimpleBE oResponse = new RespuestaSimpleBE()
        //    {
        //        rpt = 1,
        //        mensaje = "No procesado"
        //    };
        //    try
        //    {
        //        string strKrAnswer = GetData(oStream, "kr-answer");
        //        if (!string.IsNullOrEmpty(strKrAnswer))
        //        {
        //            beAnswer krAnswer = new JavaScriptSerializer().Deserialize<beAnswer>(strKrAnswer);
        //            if (krAnswer != null)
        //            {
        //                string idCita = krAnswer.orderDetails.orderId;
        //                string idOrden = "";
        //                string rutaArchivo = ConfigurationManager.AppSettings["_LogPath"];

        //                string nombreArchivo = "RequestProcesarPagoIzipay.txt";
        //                string request = new JavaScriptSerializer().Serialize(krAnswer);
        //                DateTime oFechaActual = DateTime.Now;
        //                using (FileStream stream = new FileStream(rutaArchivo + nombreArchivo, FileMode.Append, FileAccess.Write, FileShare.Write))
        //                {
        //                    using (StreamWriter streamWriter = new StreamWriter(stream, Encoding.Default))
        //                    {
        //                        streamWriter.Write(oFechaActual.ToString("dd/MM/yyyy HH:mm:ss.fff"));
        //                        streamWriter.Write(" (");
        //                        streamWriter.Write(idOrden.ToString());
        //                        streamWriter.Write("): ");
        //                        streamWriter.Write(request);
        //                        streamWriter.WriteLine("");
        //                        streamWriter.WriteLine(new string('_', 50));
        //                    }
        //                }

        //                string codigo = krAnswer.transactions[0].status.Equals("PAID") ? "000" : "999";
        //                string mensaje = krAnswer.transactions[0].detailedStatus;
        //                long purchaseNumber = -1;//oOrderPago.order.number;//obeAuthorizationNumber.answer.transactions[0].shopId;
        //                string transactionID = krAnswer.transactions[0].transactionDetails.cardDetails.authorizationResponse.authorizationNumber;
        //                string numeroTarjeta = krAnswer.transactions[0].transactionDetails.cardDetails.pan;
        //                decimal montoDec = ((decimal)(krAnswer.transactions[0].transactionDetails.cardDetails.authorizationResponse.amount)) / 100.00m;
        //                string monto = montoDec.ToString();
        //                string IDUnico = krAnswer.transactions[0].uuid;
        //                string tipoTarjeta = krAnswer.transactions[0].transactionDetails.cardDetails.effectiveBrand;
        //                DateTime oFechaHoraTransaccion = DateTime.Parse(krAnswer.transactions[0].creationDate);
        //                string fechaTransaccion = oFechaHoraTransaccion.ToString("dd/MM/yyyy");
        //                string horaTransaccion = oFechaHoraTransaccion.ToString("HH:mm:ss");
        //                string cadena = idCita;
        //                if (!String.IsNullOrEmpty(idCita))
        //                {
        //                    SqlDA oSqlDA = new SqlDA();
        //                    string response = oSqlDA.EjecutarComando("uspProcesarPagoIzipay_Actualizar", "@lstParametros", cadena);
        //                    if (!string.IsNullOrEmpty(response))
        //                    {
        //                        string[] aResponse = response.Split('¦');
        //                        string IDCitaPresencial = aResponse[0];
        //                        string IDCitaVirtual = aResponse[1];
        //                        string OrigenMonto = aResponse[2];
        //                        string RUCSeguro = aResponse[3];
        //                        string IAFAS = aResponse[4];
        //                        string CodProducto = aResponse[5];
        //                        string CodCobertura = aResponse[6];
        //                        string CodAsegurado = aResponse[7];
        //                        string CodigoParentesco = aResponse[8];
        //                        string TipoDocumentoContratante = aResponse[9];
        //                        string NumeroDocumentoContratante = aResponse[10];
        //                        string DeseaBoleta = aResponse[11];
        //                        string RUCFactura = aResponse[12];
        //                        string RazonSocialFactura = aResponse[13];
        //                        string DireccionFactura = aResponse[14];
        //                        string TipoDocumentoBoleta = aResponse[15];
        //                        string NumeroDocumentoBoleta = aResponse[16];
        //                        string NombresBoleta = aResponse[17];
        //                        string ApellidoPaternoBoleta = aResponse[18];
        //                        string ApellidoMaternoBoleta = aResponse[19];
        //                        string DireccionBoleta = aResponse[20];
        //                        string FechaNacimientoBoleta = aResponse[21];
        //                        string CelularBoleta = aResponse[22];
        //                        string EmailBoleta = aResponse[23];
        //                        string CodigoTipoPago = aResponse[24];

        //                        oResponse = RegistrarPagoCita(IDCitaPresencial, IDCitaVirtual, codigo, mensaje,
        //                            fechaTransaccion, horaTransaccion, purchaseNumber, transactionID, numeroTarjeta,
        //                            DeseaBoleta, RUCFactura, RazonSocialFactura, DireccionFactura, "IPN",
        //                            monto, IDUnico, "", "", "", "", tipoTarjeta,
        //                            TipoDocumentoBoleta, NumeroDocumentoBoleta, NombresBoleta, ApellidoPaternoBoleta,
        //                            ApellidoMaternoBoleta, DireccionBoleta,
        //                            FechaNacimientoBoleta, CelularBoleta, EmailBoleta, RUCSeguro,
        //                            CodCobertura, OrigenMonto, null, CodProducto, IAFAS, CodigoParentesco,
        //                            CodAsegurado, TipoDocumentoContratante, NumeroDocumentoContratante, CodigoTipoPago,
        //                            true);
        //                        //rpta = "ok";
        //                    }
        //                    else
        //                    {
        //                        oResponse.rpt = 0;
        //                        oResponse.mensaje = "Cita ya fue pagada";
        //                    }
        //                }
        //            }

        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        if (ex.Message.StartsWith("ERRFU:"))
        //        {
        //            oResponse.rpt = 0;
        //            oResponse.mensaje = ex.Message.Replace("ERRFU:", "");
        //        }
        //        else
        //        {
        //            return new ErrorDA().RegistrarError(ex, "WS", "Cita.svc/ProcesarPagoIzipay");
        //        }
        //    }
        //    return oResponse;
        //}

        //Obtener valor de un formulario (content-type: x-www-form-urlencoded)
        //public string GetData(Stream oStream, string keyForm)
        //{
        //    using (StreamReader oReader = new StreamReader(oStream))
        //    {
        //        string body = oReader.ReadToEnd();
        //        var @params = HttpUtility.ParseQueryString(body);
        //        return @params[keyForm];
        //    }
        //}
        public RespuestaBE<ListarOpcionesPagoBE> ListarOpcionesPagoV2(string tipoDocumento, string numeroDocumento, string idCitaPresencial, string idCitaVirtual, string tipoPaciente)
        {
            throw new WebFaultException(HttpStatusCode.BadRequest);
            //#region Validacion de Parámetros
            //if (string.IsNullOrEmpty(tipoDocumento) || string.IsNullOrEmpty(numeroDocumento))
            //{
            //    throw new WebFaultException(HttpStatusCode.BadRequest);
            //}
            //if (string.IsNullOrEmpty(idCitaPresencial) && string.IsNullOrEmpty(idCitaVirtual))
            //{
            //    throw new WebFaultException(HttpStatusCode.BadRequest);
            //}
            //if (tipoDocumento != "1" && tipoDocumento != "2" && tipoDocumento != "3")
            //{
            //    return new RespuestaBE<ListarOpcionesPagoBE>()
            //    {
            //        rpt = 100,
            //        mensaje = "Sólo se soportan los valores \"1\" (DNI), \"2\" (CE) o \"3\" (PAS) en el parámetro tipoDocumento",
            //        data = null
            //    };
            //}
            //if (numeroDocumento.Length > 20)
            //{
            //    return new RespuestaBE<ListarOpcionesPagoBE>()
            //    {
            //        rpt = 101,
            //        mensaje = "El parámetro numeroDocumento no puede tener más de 20 caracteres",
            //        data = null
            //    };
            //}
            //if (!string.IsNullOrEmpty(idCitaPresencial) && !string.IsNullOrEmpty(idCitaVirtual))
            //{
            //    return new RespuestaBE<ListarOpcionesPagoBE>()
            //    {
            //        rpt = 102,
            //        mensaje = "Solo enviar el parámetro idCitaPresencial o idCitaVirtual",
            //        data = null
            //    };
            //}
            //int varIDCita;
            //if (!string.IsNullOrEmpty(idCitaPresencial))
            //{
            //    if (!int.TryParse(idCitaPresencial, out varIDCita))
            //    {
            //        return new RespuestaBE<ListarOpcionesPagoBE>()
            //        {
            //            rpt = 103,
            //            mensaje = "El parámetro idCitaPresencial debe ser numérico",
            //            data = null
            //        };
            //    }
            //}
            //if (!string.IsNullOrEmpty(idCitaVirtual))
            //{
            //    if (!int.TryParse(idCitaVirtual, out varIDCita))
            //    {
            //        return new RespuestaBE<ListarOpcionesPagoBE>()
            //        {
            //            rpt = 104,
            //            mensaje = "El parámetro idCitaVirtual debe ser numérico",
            //            data = null
            //        };
            //    }
            //}
            //if (!String.IsNullOrEmpty(tipoPaciente) && tipoPaciente != "1" && tipoPaciente != "2" && tipoPaciente != "3")
            //{
            //    return new RespuestaBE<ListarOpcionesPagoBE>()
            //    {
            //        rpt = 105,
            //        mensaje = "Sólo se soportan los valores \"1\" (Asegurado), \"2\" (Particular) o \"3\" (Asegurado y Particular) en el parámetro tipoPaciente",
            //        data = null
            //    };
            //}
            //#endregion
            //try
            //{
            //    ListarOpcionesPagoBE oListarOpcionesPagoBE = new ListarOpcionesPagoBE();
            //    List<string> lIAFA = new CitaDA().ObtenerConfiguracionIAFAS();
            //    int nIAFAS = lIAFA.Count;
            //    string rutaArchivo = ConfigurationManager.AppSettings["_LogPath"];
            //    string nombreArchivo = "NET_TiempoSitedsGeneral.txt";
            //    DateTime oFechaActual = DateTime.Now;
            //    Stopwatch oStopwatch = new Stopwatch();
            //    oStopwatch.Start();
            //    Parallel.For(0, nIAFAS, i =>
            //    {
            //        List<OpcionPagoBE> lOpcionPagoBE = new List<OpcionPagoBE>();
            //        var tarea = Task.Run(() =>
            //        {
            //            fnObtenerOpcionesPago(tipoDocumento, numeroDocumento, idCitaPresencial, idCitaVirtual, lIAFA[i]);
            //            //lOpcionPagoBE = new CitaDA().ListarOpcionesPago(tipoDocumento, numeroDocumento, idCitaPresencial, idCitaVirtual, tipoPaciente, lIAFA[i]);
            //        });
            //        tarea.Wait();
            //        //lOpcionPagoBE = await new CitaDA().ListarOpcionesPago(tipoDocumento, numeroDocumento, idCitaPresencial, idCitaVirtual, tipoPaciente, lIAFA[i]);
            //        oListarOpcionesPagoBE.opcionesPago = oListarOpcionesPagoBE.opcionesPago.Concat(lOpcionPagoBE).ToList();
            //    });
            //    oStopwatch.Stop();
            //    DateTime oFechaActual2 = DateTime.Now;
            //    using (FileStream stream = new FileStream(rutaArchivo + nombreArchivo, FileMode.Append, FileAccess.Write, FileShare.Write))
            //    {
            //        using (StreamWriter streamWriter = new StreamWriter(stream, Encoding.Default))
            //        {
            //            streamWriter.WriteLine("Inicio: " + oFechaActual.ToString("dd/MM/yyyy HH:mm:ss.fff"));
            //            if (!string.IsNullOrEmpty(idCitaPresencial))
            //            {
            //                streamWriter.Write("idCitaPresencial: ");
            //                streamWriter.WriteLine(idCitaPresencial.ToString());
            //            }
            //            else
            //            {
            //                streamWriter.Write("idCitaVirtual: ");
            //                streamWriter.WriteLine(idCitaVirtual);
            //            }
            //            streamWriter.Write("tiempo: ");
            //            streamWriter.WriteLine(oStopwatch.ElapsedMilliseconds.ToString());
            //            streamWriter.WriteLine("Fin: " + oFechaActual2.ToString("dd/MM/yyyy HH:mm:ss.fff"));
            //            streamWriter.WriteLine(new string('_', 50));
            //        }
            //    }

            //    if (oListarOpcionesPagoBE.opcionesPago != null && oListarOpcionesPagoBE.opcionesPago.Count > 0)
            //    {
            //        oListarOpcionesPagoBE.datosCita = new CitaDA().ObtenerDatosPagoV2(idCitaPresencial, idCitaVirtual);
            //    }

            //    if (oListarOpcionesPagoBE != null && oListarOpcionesPagoBE.opcionesPago != null && oListarOpcionesPagoBE.opcionesPago.Count > 0)
            //    {
            //        return new RespuestaBE<ListarOpcionesPagoBE>()
            //        {
            //            rpt = 0,
            //            mensaje = "",
            //            data = oListarOpcionesPagoBE//.OrderBy(p => p.fechaOrdenamiento).ToList()
            //        };
            //    }
            //    else
            //    {
            //        return new RespuestaBE<ListarOpcionesPagoBE>()
            //        {
            //            rpt = 80,
            //            mensaje = "Lo sentimos, no se pudo procesar el pago en estos momentos. Por favor vuelve a intentarlo en unos minutos; de lo contrario puedes llamar a nuestro Contact Center al (01) 219-0000.",//"No existen opciones de pago disponibles",
            //            data = new ListarOpcionesPagoBE()//.OrderBy(p => p.fechaOrdenamiento).ToList()
            //        };
            //    }
            //}
            //catch (Exception ex)
            //{
            //    if (ex.Message.StartsWith("ERRFU:"))
            //    {
            //        return new RespuestaBE<ListarOpcionesPagoBE>()
            //        {
            //            rpt = 81,
            //            mensaje = ex.Message.Replace("ERRFU:", ""),
            //            data = new ListarOpcionesPagoBE()
            //        };
            //    }
            //    else
            //    {
            //        new ErrorDA().RegistrarError<ListarOpcionesPagoBE>(ex, "WS", "Cita.svc");
            //        return new RespuestaBE<ListarOpcionesPagoBE>()
            //        {
            //            rpt = 81,
            //            mensaje = "Lo sentimos, no se pudo procesar el pago en estos momentos. Por favor vuelve a intentarlo en unos minutos; de lo contrario puedes llamar a nuestro Contact Center al (01) 219-0000.",
            //            data = new ListarOpcionesPagoBE()//.OrderBy(p => p.fechaOrdenamiento).ToList()
            //        };
            //    }
            //}
        }
        public RespuestaSimpleBE ProcesarPagoIzipay(beAnswer krAnswer)
        {
            //throw new WebFaultException(HttpStatusCode.BadRequest);
            ////IPN llama a /General/ProcesarPagoIzipay/ de la web del paciente y de este se llama a este método
            RespuestaSimpleBE oResponse = new RespuestaSimpleBE()
            {
                rpt = 1,
                mensaje = "No procesado"
            };
            //string cadena3 = Encoding.UTF8.GetString(OperationContext.Current.RequestContext.RequestMessage.GetBody<byte[]>());
            //string rpta = "";
            try
            {
                string idCita = krAnswer.orderDetails.orderId;
                string idOrden = "";
                string rutaArchivo = ConfigurationManager.AppSettings["_LogPath"];

                string nombreArchivo = "RequestProcesarPagoIzipay.txt";
                string request = new JavaScriptSerializer().Serialize(krAnswer);
                DateTime oFechaActual = DateTime.Now;
                using (FileStream stream = new FileStream(rutaArchivo + nombreArchivo, FileMode.Append, FileAccess.Write, FileShare.Write))
                {
                    using (StreamWriter streamWriter = new StreamWriter(stream, Encoding.Default))
                    {
                        streamWriter.Write(oFechaActual.ToString("dd/MM/yyyy HH:mm:ss.fff"));
                        streamWriter.Write(" (");
                        streamWriter.Write(idOrden.ToString());
                        streamWriter.Write("): ");
                        streamWriter.Write(request);
                        streamWriter.WriteLine("");
                        streamWriter.WriteLine(new string('_', 50));
                    }
                }
                string codigo = krAnswer.transactions[0].status.Equals("PAID") ? "000" : "999";
                string mensaje = krAnswer.transactions[0].detailedStatus;
                long purchaseNumber = -1;//oOrderPago.order.number;//obeAuthorizationNumber.answer.transactions[0].shopId;
                string transactionID = krAnswer.transactions[0].transactionDetails.cardDetails.authorizationResponse.authorizationNumber;
                string numeroTarjeta = krAnswer.transactions[0].transactionDetails.cardDetails.pan;
                decimal montoDec = ((decimal)(krAnswer.transactions[0].transactionDetails.cardDetails.authorizationResponse.amount)) / 100.00m;
                string monto = montoDec.ToString();
                string IDUnico = krAnswer.transactions[0].uuid;
                string tipoTarjeta = krAnswer.transactions[0].transactionDetails.cardDetails.effectiveBrand;
                DateTime oFechaHoraTransaccion = DateTime.Parse(krAnswer.transactions[0].creationDate);
                string fechaTransaccion = oFechaHoraTransaccion.ToString("dd/MM/yyyy");
                string horaTransaccion = oFechaHoraTransaccion.ToString("HH:mm:ss");
                string cadena = idCita;// + "¦" + codigo + "¦" + mensaje + "¦" + purchaseNumber + "¦" + transactionID + "¦" + numeroTarjeta + "¦" + monto + "¦" + IDUnico + "¦" + tokenEmail + "¦" + nombreVisa + "¦" + apellidoVisa + "¦" + tipoTarjeta + "¦" + idCita;
                if (!String.IsNullOrEmpty(idCita))
                {
                    var oRequest = new
                    {
                        data = cadena
                    };
                    string strRequest = new JavaScriptSerializer().Serialize(oRequest);
                    string response = ClasesGenericas.PostAsyncIntranet("Cita.svc/ProcesarPagoIzipay/", strRequest, ClasesGenericas.GetHeader(WebOperationContext.Current.IncomingRequest.Headers, "token"));
                    RespuestaSimpleBE varRespuesta = new JavaScriptSerializer().Deserialize<RespuestaSimpleBE>(response);

                    if (varRespuesta == null)
                    {
                        return new RespuestaSimpleBE()
                        {
                            rpt = -1,
                            mensaje = "No se logró procesar la solicitud",
                            data = null
                        };
                    }

                    if (!string.IsNullOrEmpty(varRespuesta.data))
                    {
                        string[] aResponse = varRespuesta.data.Split('¦');
                        string IDCitaPresencial = aResponse[0];
                        string IDCitaVirtual = aResponse[1];
                        string OrigenMonto = aResponse[2];
                        string RUCSeguro = aResponse[3];
                        string IAFAS = aResponse[4];
                        string CodProducto = aResponse[5];
                        string CodCobertura = aResponse[6];
                        string CodAsegurado = aResponse[7];
                        string CodigoParentesco = aResponse[8];
                        string TipoDocumentoContratante = aResponse[9];
                        string NumeroDocumentoContratante = aResponse[10];
                        string DeseaBoleta = aResponse[11];
                        string RUCFactura = aResponse[12];
                        string RazonSocialFactura = aResponse[13];
                        string DireccionFactura = aResponse[14];
                        string TipoDocumentoBoleta = aResponse[15];
                        string NumeroDocumentoBoleta = aResponse[16];
                        string NombresBoleta = aResponse[17];
                        string ApellidoPaternoBoleta = aResponse[18];
                        string ApellidoMaternoBoleta = aResponse[19];
                        string DireccionBoleta = aResponse[20];
                        string FechaNacimientoBoleta = aResponse[21];
                        string CelularBoleta = aResponse[22];
                        string EmailBoleta = aResponse[23];
                        string CodigoTipoPago = aResponse[24];

                        oResponse = RegistrarPagoCita(IDCitaPresencial, IDCitaVirtual, codigo, mensaje,
                            fechaTransaccion, horaTransaccion, purchaseNumber, transactionID, numeroTarjeta,
                            DeseaBoleta, RUCFactura, RazonSocialFactura, DireccionFactura, "IPN",
                            monto, IDUnico, "", "", "", "", tipoTarjeta,
                            TipoDocumentoBoleta, NumeroDocumentoBoleta, NombresBoleta, ApellidoPaternoBoleta,
                            ApellidoMaternoBoleta, DireccionBoleta,
                            FechaNacimientoBoleta, CelularBoleta, EmailBoleta, RUCSeguro,
                            CodCobertura, OrigenMonto, null, CodProducto, IAFAS, CodigoParentesco,
                            CodAsegurado, TipoDocumentoContratante, NumeroDocumentoContratante, CodigoTipoPago,
                            true, "", "", "", "", "", "", "",
                            true);
                    }
                    else
                    {
                        oResponse.rpt = 0;
                        oResponse.mensaje = "Cita ya fue pagada";
                    }
                }
            }
            catch (Exception ex)
            {
                if (ex.Message.StartsWith("ERRFU:"))
                {
                    oResponse.rpt = 0;
                    oResponse.mensaje = ex.Message.Replace("ERRFU:", "");
                }
                else
                {
                    //return new ErrorDA().RegistrarError(ex, "WS", "Cita.svc/ProcesarPagoIzipay");
                    return ClasesGenericas.RegistrarErrorIntranet(ex, "WS", "Cita.svc/ProcesarPagoIzipay");
                }
            }
            return oResponse;
        }
        public RespuestaSimpleBE RegistrarPagoCitaIzipay(string idCitaPresencial, string idCita, string codigo, string mensaje, string fecha,
                                                    string hora, long purchaseNumber, string transactionID, string numeroTarjeta,
                                                    string deseaBoleta, string ruc, string razonSocial, string direccion, string origen,
                                                    string monto, string IDUnico, string tokenEmail, string nombreVisa, string apellidoVisa,
                                                    string firma, string tipoTarjeta, string tipoDocumentoBoleta, string numeroDocumentoBoleta,
                                                    string nombresBoleta, string apellidoPaternoBoleta, string apellidoMaternoBoleta,
                                                    string direccionBoleta, string fechaNacimientoBoleta, string celularBoleta,
                                                    string emailBoleta,
                                                    string RUCSeguro, string codigoCobertura, string origenMonto,
                                                    string fechaPago, string codigoProducto, string IAFAS,
                                                    string codigoParentesco, string codigoAfiliado, string tipoDocumentoContratante,
                                                    string numeroDocumentoContratante, string codigoTipoPago, string payMethod,
                                                    bool esIPN)
        {
            throw new WebFaultException(HttpStatusCode.BadRequest);
            ////RegistrarPagoCitaIzipay solo es usado ProcesarPagoIzipay por la IPN
            //codigo = (String.IsNullOrEmpty(codigo) && monto.Equals("0.00")) ? "000" : codigo;
            //try
            //{

            //    RegistroPagoBE oRegistroPagoBE = new CitaDA().RegistrarPagoCita(idCitaPresencial, idCita, codigo, mensaje, fecha, hora,
            //                                                purchaseNumber, transactionID == null ? "" : transactionID, numeroTarjeta == null ? "" : numeroTarjeta,
            //                                                deseaBoleta, ruc, razonSocial, direccion, origen, monto == null ? "" : monto, IDUnico == null ? "" : IDUnico,
            //                                                tokenEmail == null ? "" : tokenEmail, nombreVisa == null ? "" : nombreVisa, apellidoVisa == null ? "" : apellidoVisa,
            //                                                firma, tipoTarjeta, tipoDocumentoBoleta, numeroDocumentoBoleta,
            //                                                nombresBoleta, apellidoPaternoBoleta, apellidoMaternoBoleta,
            //                                                direccionBoleta, fechaNacimientoBoleta, celularBoleta,
            //                                                emailBoleta,
            //                                                RUCSeguro, codigoCobertura, origenMonto,
            //                                                fechaPago, codigoProducto, IAFAS,
            //                                                codigoParentesco, codigoAfiliado, tipoDocumentoContratante,
            //                                                numeroDocumentoContratante, codigoTipoPago, payMethod
            //                                            );

            //    bool succes = oRegistroPagoBE.success;

            //    if (succes)
            //    {
            //        var id = (String.IsNullOrEmpty(idCitaPresencial)) ? idCita : idCitaPresencial;
            //        var tipo = (String.IsNullOrEmpty(idCitaPresencial)) ? 2 : 1;
            //        if (codigo == "000")
            //        {
            //            Debug.WriteLine("Entro");
            //            bool pagoRoyal = false;
            //            RespuestaSimpleBE pagoRoyalSimple = new RespuestaSimpleBE();

            //            if (tipo == 1) pagoRoyal = RegistroPagoRoyal(id, numeroTarjeta, tipoTarjeta, tipo, fecha, hora);
            //            else if (tipo == 2) pagoRoyalSimple = RegistroPagoRoyalVirtual(id, firma);
            //            //bool statusEnvioEmail = ClasesGenericas.EnviarCorreo(varParametrosCorreo["Email"], "Cita_RegistrarCitaVirtualPago", varParametrosCorreo, null, "SMTPVirtual");
            //        }

            //    }
            //    if (succes)
            //    {
            //        if (oRegistroPagoBE.indEnviarCorreo)
            //        {
            //            bool statusEnvioEmail;
            //            Dictionary<string, string> varParametrosCorreo;
            //            if (!String.IsNullOrEmpty(idCita))
            //            {
            //                //Virtual
            //                varParametrosCorreo = new CitaDA().DatosCitaVirtual(idCita);
            //                varParametrosCorreo.Add("FechaPago", fecha);
            //                varParametrosCorreo.Add("HoraPago", hora);
            //                varParametrosCorreo.Add("Transaccion", transactionID);
            //                try
            //                {
            //                    if (codigo == "000")
            //                    {
            //                        //bool pagoRoyal = RegistroPagoRoyal(idCita, numeroTarjeta);
            //                        if (varParametrosCorreo["IDClinica"].Equals("9"))
            //                        {
            //                            //Aliada
            //                            statusEnvioEmail = ClasesGenericas.EnviarCorreo(varParametrosCorreo["Email"], "Cita_RegistrarCitaVirtualAliadaPago", varParametrosCorreo, null, "SMTPVirtual", "", ';', varParametrosCorreo["EmailPago"], ';');
            //                        }
            //                        else if (varParametrosCorreo["IDClinica"].Equals("17"))
            //                        {
            //                            //DR ONLINE
            //                            statusEnvioEmail = ClasesGenericas.EnviarCorreo(varParametrosCorreo["Email"], "Cita_RegistrarCitaVirtualPagoDrOnline", varParametrosCorreo, null, "SMTPVirtual", "", ';', varParametrosCorreo["EmailPago"], ';');
            //                        }
            //                        else
            //                        {
            //                            //SANNA
            //                            statusEnvioEmail = ClasesGenericas.EnviarCorreo(varParametrosCorreo["Email"], "Cita_RegistrarCitaVirtualPago", varParametrosCorreo, null, "SMTPVirtual", "", ';', varParametrosCorreo["EmailPago"], ';');
            //                        }
            //                    }
            //                }
            //                catch (Exception)
            //                {
            //                }
            //            }
            //            else
            //            {
            //                //Presencial
            //                varParametrosCorreo = new CitaDA().DatosCita(idCitaPresencial);
            //                varParametrosCorreo.Add("FechaPago", fecha);
            //                varParametrosCorreo.Add("HoraPago", hora);
            //                varParametrosCorreo.Add("Transaccion", transactionID);

            //                if (codigo == "000")
            //                {
            //                    if (varParametrosCorreo["IDClinica"].Equals("9"))
            //                    {
            //                        //Aliada
            //                        statusEnvioEmail = ClasesGenericas.EnviarCorreo(varParametrosCorreo["Email"], "Cita_RegistrarCitaAliadaPago", varParametrosCorreo, null, "SMTP", "", ';', varParametrosCorreo["EmailPago"], ';');
            //                    }
            //                    else
            //                    {
            //                        //SANNA
            //                        statusEnvioEmail = ClasesGenericas.EnviarCorreo(varParametrosCorreo["Email"], "Cita_RegistrarCitaPago", varParametrosCorreo, null, "SMTP", "", ';', varParametrosCorreo["EmailPago"], ';');
            //                    }
            //                }
            //            }
            //        }
            //        return new RespuestaSimpleBE()
            //        {
            //            rpt = 0,
            //            mensaje = "Success",
            //            data = "true"
            //        };
            //    }
            //    else
            //    {
            //        return new RespuestaSimpleBE()
            //        {
            //            rpt = 1,
            //            mensaje = "Error, por favor comunicarse con soporte",
            //            data = "False"
            //        };
            //    }


            //}
            //catch (Exception ex)
            //{
            //    return new ErrorDA().RegistrarError(ex, "WS", "Cita.svc");

            //}
        }
        public RespuestaSimpleBE RegistrarLog(string idCitaPresencial, string idCitaVirtual, string metodo,
                                        string accion, string mensaje)
        {
            throw new WebFaultException(HttpStatusCode.BadRequest);
            //#region Validación de parámetros
            //if (string.IsNullOrWhiteSpace(idCitaPresencial) && string.IsNullOrWhiteSpace(idCitaVirtual))
            //{
            //    throw new WebFaultException(HttpStatusCode.BadRequest);
            //}
            //if (!string.IsNullOrWhiteSpace(idCitaPresencial) && !string.IsNullOrWhiteSpace(idCitaVirtual))
            //{
            //    throw new WebFaultException(HttpStatusCode.BadRequest);
            //}
            //string tipoCita = "P", 
            //       idCita = idCitaPresencial;
            //int varIdCitaPresencial;
            //if (!string.IsNullOrWhiteSpace(idCitaPresencial))
            //{
            //    if (!int.TryParse(idCitaPresencial, out varIdCitaPresencial))
            //    {
            //        return new RespuestaSimpleBE()
            //        {
            //            rpt = 100,
            //            mensaje = "El parámetro idCitaPresencial debe ser numérico"
            //        };
            //    }
            //}
            //int varIdCitaVirtual;
            //if (!string.IsNullOrWhiteSpace(idCitaVirtual))
            //{
            //    tipoCita = "V";
            //    idCita = idCitaVirtual;
            //    if (!int.TryParse(idCitaVirtual, out varIdCitaVirtual))
            //    {
            //        return new RespuestaSimpleBE()
            //        {
            //            rpt = 101,
            //            mensaje = "El parámetro idCitaVirtual debe ser numérico"
            //        };
            //    }
            //}
            //#endregion
            //try
            //{
            //    fnRegistrarCitaLog(idCita, mensaje, null, null, metodo, accion, "ServicioWeb", tipoCita);
            //    return new RespuestaSimpleBE()
            //    {
            //        rpt = 0,
            //        mensaje = "Registrado satisfactoriamente"
            //    };
            //}
            //catch (Exception ex)
            //{
            //    return ClasesGenericas.RegistrarErrorIntranet(ex, "WS", "Cita.svc/RegistrarLog");
            //}
        }
        #endregion
    }
}

public class izipay
{

    public int amount { get; set; }
    public string currency { get; set; }
    public int formTokenVersion { get; set; }
    public string orderId { get; set; }
    public Dictionary<string, object> customer { get; set; }

}

public class IzipayV2
{

    public string requestSource { get; set; }
    public string merchantCode { get; set; }
    public string orderNumber { get; set; }
    public string publicKey { get; set; }
    public string amount { get; set; }

}